{"version":3,"sources":["views/admin/variables/charts.js","assets/img/toiec.png","assets/img/logo.png","assets/img/pen.svg","views/admin/logo-white.svg","assets/img/4772.jpg","assets/img/bg22_o.jpg","assets/img/mission.svg","assets/img/thay_pa.jpg","assets/img/ban_np.jpg","assets/img/eva.jpg","assets/img/bg21.jpg","assets/img/teacher.png","assets/img/linh_profile.png","assets/img/ryan.jpg","assets/img/header-m.jpg","assets/img/arrow_square.svg","views/admin/assets/img/bg5.jpg","views/admin/assets/img/mike.jpg","serviceWorker.ts","config.ts","sections/home/TestingTrial/index.tsx","components/Truncate/index.tsx","schema/schema.tsx","sections/home/Testimonials/index.tsx","sections/home/ContactUs/index.tsx","sections/home/index.tsx","components/Footers/DefaultFooter.tsx","components/Divider/index.tsx","sections/Test/QuestionPalette/index.tsx","components/Questions/QuestionsItem.tsx","components/Questions/ListQuestions.tsx","components/Explaination/index.tsx","components/LeaderBoard/index.tsx","components/Score/index.tsx","sections/Test/TestTake/index.tsx","components/Loading/index.tsx","sections/Test/TestSkills/index.tsx","sections/Test/TestCategory/CardCategory.tsx","sections/Test/TestCategory/index.tsx","components/Breadcrumb/index.tsx","utils/string.ts","sections/Test/index.tsx","components/Headers/IndexHeader.tsx","hooks/useMe.tsx","views/admin/components/Error/index.tsx","components/BrowserStorage.tsx","utils/stripTypenames.ts","sections/Login/ModalLogin.tsx","components/Navbars/NavbarContext.tsx","components/Navbars/IndexNavbar.tsx","components/Brand/index.tsx","views/layout/Layout.tsx","sections/Blog/BlogDetail.tsx","sections/Blog/ListBlog.tsx","views/admin/components/Sidebar/Sidebar.tsx","sections/Blog/index.tsx","views/Index.tsx","views/admin/components/Navbars/HeaderAdmin.tsx","views/admin/components/Footer/FooterAdmin.tsx","views/admin/components/FixedPlugin/FixedPlugin.js","views/admin/views/Dashboard.js","views/admin/components/PanelHeader/index.tsx","views/admin/utils/Notification.tsx","views/admin/components/TinyMCETextarea/index.tsx","views/admin/components/QuestionsAndTest/CreateAndEditPart.tsx","views/admin/components/ImageUploader/index.tsx","views/admin/components/QuestionsAndTest/QuestionContext.tsx","views/admin/components/ButtonQuestion/ButtonAdd.tsx","views/admin/components/Modal/Delete.tsx","views/admin/components/QuestionsAndTest/CreateAndEditQuestion.tsx","views/admin/components/LazyLoad/index.tsx","views/admin/components/QuestionsAndTest/ListQuestions.tsx","views/admin/components/QuestionsAndTest/ModalListQuestions.tsx","views/admin/components/ButtonQuestion/ButtonCreateQuestion.tsx","views/admin/components/AudioUploader/index.tsx","views/admin/components/ButtonQuestion/ButtonAddPart.tsx","views/admin/components/QuestionsAndTest/TemplateCreateTest/ListQuestionExam.tsx","views/admin/components/QuestionsAndTest/TemplateCreateTest/Exam.tsx","views/admin/components/QuestionsAndTest/ModalCreateQuestion.tsx","views/admin/components/QuestionsAndTest/ListPart.tsx","views/admin/components/QuestionsAndTest/ModalPart.tsx","views/admin/components/QuestionsAndTest/CreateAndEditTest.tsx","views/admin/components/QuestionsAndTest/ListTest.tsx","views/admin/components/QuestionsAndTest/ListTestCategory.tsx","views/admin/components/QuestionsAndTest/index.tsx","views/admin/components/ButtonQuestion/ButtonAddTest.tsx","views/admin/components/QuestionsAndTest/ModalTest.tsx","views/admin/components/ButtonSubmit/index.tsx","views/admin/utils/GenerateLink.ts","views/admin/views/TestGroup/CreateAndEditTestGroup.tsx","views/admin/components/QuestionsAndTest/CreateAndEditTestCategory.tsx","views/admin/views/Toeic/index.tsx","views/admin/utils/UppercaseFirstLetter.tsx","views/admin/views/Blog/ListBlog/index.tsx","views/admin/views/Blog/HomePage/index.tsx","views/admin/views/Blog/CreateAndEditBlog/index.tsx","views/admin/views/Blog/index.tsx","views/admin/views/TestGroup/ListTestGroup.tsx","views/admin/routes.js","views/admin/views/TestGroup/index.tsx","views/admin/views/UserPage.js","views/admin/layouts/Admin.tsx","index.tsx"],"names":["hexToRGB","hex","alpha","r","parseInt","slice","g","b","dashboardShippedProductsChart","data","canvas","ctx","getContext","gradientStroke","createLinearGradient","addColorStop","gradientFill","labels","datasets","label","borderColor","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBorderWidth","pointRadius","fill","backgroundColor","borderWidth","options","maintainAspectRatio","legend","display","tooltips","bodySpacing","mode","intersect","position","xPadding","yPadding","caretPadding","responsive","scales","yAxes","ticks","maxTicksLimit","gridLines","zeroLineColor","drawTicks","drawBorder","xAxes","layout","padding","left","right","top","bottom","dashboardAllProductsChart","dashboard24HoursPerformanceChart","module","exports","dashboardPanelChart","pointHoverBackgroundColor","pointHoverBorderColor","titleFontColor","bodyFontColor","fillStyle","fontColor","fontStyle","beginAtZero","color","Boolean","window","location","hostname","match","apiUrl","config","GRAPHQL_SERVER_URL","PATH_IMAGE","UPLOAD_MEDIA","PUBLIC_URL","TestingTrial","className","Container","Row","Col","md","alt","src","require","style","backgroundImage","GroupType","EnglishCertificateType","SkillsType","QuestionType","OrderDirection","UserRole","MediaType","Truncate","children","lines","css","settingsSlick","dots","infinite","speed","slidesToShow","slidesToScroll","items","altText","caption","content","Card","href","onClick","e","preventDefault","CardBody","CardTitle","tag","CardFooter","Testimonials","React","useState","map","item","index","key","lg","xl","ContactUs","firstFocus","setFirstFocus","lastFocus","setLastFocus","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","placeholder","type","onFocus","onBlur","cols","name","rows","Button","block","size","HomePage","id","DefaultFooter","Date","getFullYear","Divider","QuestionPalette","testQuestions","answered","isResult","questionsSorted","setQuestionSorted","questions","questionsClone","sort","a","displayOrder","useEffect","testQuestion","questionsGroup","questionFormatted","question","push","questionGroups","length","group","useRouteMatch","modal1","setModal1","modal2","setModal2","maxHeight","overflowY","isChecked","width","height","justifyContent","alignItems","borderRadius","marginBottom","marginRight","cursor","target","document","getElementById","scrollTo","offsetTop","behavior","Modal","isOpen","toggle","ModalBody","ele","keyAnswer","modalClassName","centered","to","url","AssetFragmentDoc","gql","BlogFragmentDoc","TestCategoryInfoFragmentDoc","TestGroupChildInfoFragmentDoc","TestGroupInfoFragmentDoc","QuestionGroupFragmentDoc","QuestionFragmentDoc","PartFragmentDoc","TestQuestionFragmentDoc","TestFragmentDoc","TestCategoryFragmentDoc","TestGroupFragmentDoc","UserFragmentDoc","MeFragmentDoc","CreateBlogDocument","UpdateBlogDocument","GetBlogDocument","GetBlogsDocument","useGetBlogsQuery","baseOptions","ApolloReactHooks","DeleteBlogDocument","UniqueLinkBlogDocument","CreatePartDocument","GetPartDocument","GetPartsDocument","GetPartsFromIdsDocument","UpdatePartDocument","CreateQuestionDocument","UpdateQuestionDocument","GetQuestionDocument","GetQuestionsDocument","RemoveQuestionDocument","useRemoveQuestionMutation","CreateTestDocument","UpdateTestDocument","useUpdateTestMutation","UpdateTestsDocument","RemoveFromCatDocument","GetTestDocument","RemoveTestDocument","GetTestsDocument","CreateTestCategoryDocument","UpdateTestCategoryDocument","useUpdateTestCategoryMutation","GetTestCategoryDocument","RemoveTestCategoryDocument","GetTestCategoriesDocument","GetTestCategoriesInfoDocument","CreateTestGroupDocument","UpdateTestGroupDocument","useUpdateTestGroupMutation","GetTestGroupsDocument","GetTestGroupsInfoDocument","useGetTestGroupsInfoQuery","GetTestGroupInfoDocument","UniqueLinkTestGroupDocument","GetTestQuestionsDocument","CreateListTestQuestionsDocument","RemoveTestQuestionDocument","UpdateTestQuestionDocument","LoginDocument","MeDocument","useMeQuery","QuestionsItem","arrChecked","setArrChecked","isSuccessful","isOpenExplaination","setIsOpenExplaination","lengthOfGroups","questionGroupName","questionName","audioSec","secs","audio","currentTime","play","seekAudio","Collapse","dangerouslySetInnerHTML","__html","explaination","description","image","answers","isAnswer","result","answerContent","Label","questionId","answeredObject","find","forEach","o","handleCheck","ListQuestions","testDetail","testQuestionWithPart","partId","part","testQuestionsWithPart","parts","partAndAudioSecs","skillType","Listening","audioUrl","controls","controlsList","index_part","partDetail","qp","partName","autdioSecs","Explaination","maxWidth","LeaderBoard","colorBoard","point","listStyle","Score","rightAnswer","notPoint","toFixed","parseFloat","title","border","isCorrect","TestTaken","testsData","testId","useParams","test","testQuestionsSorted","path","Loading","isWelcome","absolute","isDisplay","defaultOptionsHello","loop","autoplay","animationData","animationHello","rendererSettings","preserveAspectRatio","defaultOptionsLoading","animationLoading","marginTop","paddingLeft","TestSkills","setIsTaken","testCategoryId","history","useHistory","variables","loading","testCategory","getTestCategory","tests","some","i","reverse","TestTake","testCategoryName","Table","borderless","scope","Reading","textDecoration","CardCategory","console","log","dateFormatted","moment","createdAt","format","CardSubtitle","certificateType","TestCategory","testCategories","BreadcrumbMain","link","Breadcrumb","BreadcrumbItem","HTMLToString","html","text","replace","Test","string","charAt","toUpperCase","getTestCategories","IndexHeader","pageHeader","useRef","defaultOptionsTest","animationTest","innerWidth","updateScroll","windowScrollTop","pageYOffset","current","transform","addEventListener","removeEventListener","filter-color","ref","whiteSpace","paddingRight","margin","notMe","firstName","lastName","email","role","Member","MeContext","createContext","useMe","useContext","ErrorMessage","message","BrowserStorage","tokens","accessToken","refreshToken","this","load","props","Object","keys","applyProperties","JSON","parse","localStorage","getItem","setItem","stringify","useBrowserStorage","stripTypenames","obj","propToDelete","property","File","newData","ModalLogin","setIsOpen","browserStorage","nameFocus","setNameFocus","passwordFocus","setPasswordFocus","fetchPolicy","meQuery","meQueryResult","useLoginMutation","loginMutation","shouldValidate","setShouldValidate","me","refetch","formik","useFormik","enableReinitialize","validateOnChange","validateOnBlur","initialValues","password","validationSchema","yup","shape","trim","required","min","onSubmit","values","login","impersonatingUser","save","graphQLErrors","extensions","code","exception","invitedUser","data-background-color","aria-hidden","Form","action","method","FormGroup","onChange","handleChange","handleBlur","Error","errors","ModalFooter","submitForm","NavbarContext","NavBarContextProvider","isHomePage","navBarContextProvider","isStyle","setIsStyle","navbarColor","setNavbarColor","topFixed","setTopFixed","hiddenBrand","setHiddenBrand","modalLogin","setModalLogin","undefined","testGroupsData","setTestGroupsData","y","setY","scrolState","setScrolState","handleNavigation","currentTarget","scrollY","useMemo","body","classList","add","documentElement","remove","useChatContextProvider","Provider","value","DropdownMenuChild","elements","eleSorted","DropdownMenu","eleChild","DropdownItem","toLowerCase","groupType","Link","testGroupName","IndexNavbar","isGeneral","collapseOpen","setCollapseOpen","testGroups","getTestGroups","Navbar","expand","aria-expanded","navbar","Nav","UncontrolledDropdown","nav","DropdownToggle","caret","testGroupsChild","Logo","Brand","client","useApolloClient","clear","resetStore","Layout","BlogDetail","blogsData","blogId","blog","Fragment","blogName","ps","ListBlog","testGroupData","dateCreated","testGroup","author","Blog","testGroupId","blogsQuery","getBlogs","blogs","Index","HeaderAdmin","dropdownOpen","setDropdownOpen","setColor","sidebarToggle","fluid","NavbarBrand","NavbarToggler","NavItem","Dropdown","FooterAdmin","isDefault","rel","Sidebar","sidebar","createRef","navigator","platform","indexOf","PerfectScrollbar","suppressScrollX","suppressScrollY","destroy","logo","routes","prop","redirect","activeClassName","icon","Component","FixedPlugin","state","classes","handleClick","bind","setState","bgColor","data-color","handleColorClick","Dashboard","xs","CardHeader","check","defaultChecked","UncontrolledTooltip","delay","PanelHeader","notificationAdd","notification","insert","container","animationIn","animationOut","dismiss","duration","pauseOnHover","TinyMCETextarea","onEditorChange","textareaName","apiKey","initialValue","init","menubar","plugins","toolbar","EnglishCertificateOptions","Toeic","Ielts","University","ExtraCourses","Coop","Support","SkillsTypeOptions","CreateAndEditPart","certificateTypeSelect","setCertificateTypeSelect","skillTypeSelect","setSkillTypeSelect","getPartQuery","getPartResponse","__typename","useCreatePartMutation","createPart","useUpdatePartMutation","updatePart","store","addNotification","resetForm","handleSubmit","opt","setFieldValue","classNamePrefix","ImageUpload","singleImage","setPath","isShowPreview","classNameContainer","setLoading","pathPreview","setPathPreview","handleImageChange","p","FormData","append","fetch","credentials","headers","Accept","then","response","json","res","success","withIcon","buttonText","imgExtension","maxFileSize","Spinner","QuestionContext","QuestionContextProvider","questionContextProvider","updateTestMutation","updateTestMutationResult","setPartId","isOpenModal","setIsOpenModal","isOpenModalCreateQuestion","setIsOpenModalCreateQuestion","isOpenModalAddPart","setIsOpenModalAddPart","isOpenModalAddTest","setIsOpenModalAddTest","isOpenModalAddTestCategory","setIsOpenModalAddTestCategory","questionIdModal","setQuestionIdModal","partIds","setPartIds","useQuestionProvider","ButtonAdd","ModalDelete","callback","onClose","disabled","PartsOptions","answersKey","CreateAndEditQuestionForm","modal","dataTestQuestionInput","refetchTestQuestions","setIdForced","isOpenModalDelete","setIsOpenModalDelete","removeQuestionMutation","removeQuestionMutationResult","idRemove","setIdRemove","answersKeyVcl","questionContext","answersKeyState","setAnswerKeyState","questionIdFinal","partSelect","setPartSelect","partsQuery","getParts","filter","optionPart","audioSecVN","questionType","SingleChoice","isCheckedResult","setIsCheckedResult","useGetQuestionLazyQuery","getQuestionQuery","getQuestionRespone","removeQuestion","dataQuestion","answersGroupsArr","setAnswersGroupsArr","handleRemoveQuestionGroup","urlDefault","questionGroupOrder","isGroup","answer","answersGroupsArrBE","order","useCreateQuestionMutation","createQuestion","useUpdateQuestionMutation","updateQuestion","answersGroup","minWidth","fontWeight","onKeyUp","defaultValue","CustomInput","checked","Image","index_a","aR","answersGroupEle","toString","isNew","CreateAndEditQuestion","idForced","LazyLoad","refetchQuery","isHeightFull","bodyRef","onScroll","node","Math","floor","scrollHeight","scrollTop","clientHeight","optionsFilter","setIconPills","arrQuestionIds","setArrQuestionIds","currentFilter","setCurrentFilter","searchName","setSearchName","questionsFilter","questionsQuery","fetchMoreQuestions","useCallback","nextCursor","fetchMore","updateQuery","prev","next","fetchMoreResult","questionIds","q","arrQuestionId","Badge","ModalListQuestions","createListTestQuestionsMutation","resultCreateListTestQuestionsMutation","createListTestQuestions","contentClassName","partIdAndQuestionIdsInput","ButtonCreateQuestion","AudioUpload","file","files","accept","textAlign","fontSize","paddingTop","ButtonAddPart","ListQuestionExam","updateTestQuestionMutation","updateTestQuestionMutationResult","useRemoveTestQuestionMutation","removeTestQuestionMutation","removeTestQuestionMutationResult","removeTestQuestion","notificationD","updateTestQuestion","q_index","q_order","q_group","index_g","Exam","dataParts","testData","partAndAudioSeconds","setPartAndAudioSeconds","partAndAudioSecondsDefault","testName","updateTest","Audio","_","cloneDeep","pp","ModalCreateQuestion","ListPart","dataUpdateTest","setDataUpdateTest","partsFilter","ids","d","ModalPart","refechParts","hello","CreateAndEditTest","getTestQuery","getTestResponse","useGetTestQuestionsLazyQuery","testQuestionsQuery","testQuestionsResponse","useGetPartsFromIdsLazyQuery","partsQueryResponse","variablesTestQuestion","refetchTest","getTestQuestions","getPartsFromIds","sm","ListTest","setTestIds","testIds","testIdsForget","testIdRemoved","setTestRemove","testsQuery","useRemoveTestMutation","removeTestMutation","removeTestMutationResult","removeTest","fetchMoreTests","getTests","t","isPublished","ListTestCategory","testCategoriesQuery","updateTestCategoryMutation","updateTestCategoryMutationResult","useRemoveTestCategoryMutation","removeTestCategoryMutation","removeTestCategoryMutationResult","fetchMoreTestCategories","testCategoryIdRemoved","setTestCategoryIdRemoved","removeTestCategory","updateTestCategory","TestPage","iconPills","createTestMutation","resultCreateTestMutation","useCreateTestCategoryMutation","createTestCategory","resultCreateTestCategory","time","getTime","dataCreateTest","dataCreateCategory","createTestClick","createTestCategoryClick","createTest","tabs","ButtonAddTest","ModalTest","refetchTestCategory","setTestIdsForget","updateTestsMutation","updateTestsMutationResult","testIdsDefault","updateTests","zIndex","ButtonSubmitGroup","loadingAnimation","loadingJson","generateLink","removeAccents","Latinise","latin_map","Á","Ă","Ắ","Ặ","Ằ","Ẳ","Ẵ","Ǎ","Â","Ấ","Ậ","Ầ","Ẩ","Ẫ","Ä","Ǟ","Ȧ","Ǡ","Ạ","Ȁ","À","Ả","Ȃ","Ā","Ą","Å","Ǻ","Ḁ","Ⱥ","Ã","Ꜳ","Æ","Ǽ","Ǣ","Ꜵ","Ꜷ","Ꜹ","Ꜻ","Ꜽ","Ḃ","Ḅ","Ɓ","Ḇ","Ƀ","Ƃ","Ć","Č","Ç","Ḉ","Ĉ","Ċ","Ƈ","Ȼ","Ď","Ḑ","Ḓ","Ḋ","Ḍ","Ɗ","Ḏ","ǲ","ǅ","Đ","Ƌ","Ǳ","Ǆ","É","Ĕ","Ě","Ȩ","Ḝ","Ê","Ế","Ệ","Ề","Ể","Ễ","Ḙ","Ë","Ė","Ẹ","Ȅ","È","Ẻ","Ȇ","Ē","Ḗ","Ḕ","Ę","Ɇ","Ẽ","Ḛ","Ꝫ","Ḟ","Ƒ","Ǵ","Ğ","Ǧ","Ģ","Ĝ","Ġ","Ɠ","Ḡ","Ǥ","Ḫ","Ȟ","Ḩ","Ĥ","Ⱨ","Ḧ","Ḣ","Ḥ","Ħ","Í","Ĭ","Ǐ","Î","Ï","Ḯ","İ","Ị","Ȉ","Ì","Ỉ","Ȋ","Ī","Į","Ɨ","Ĩ","Ḭ","Ꝺ","Ꝼ","Ᵹ","Ꞃ","Ꞅ","Ꞇ","Ꝭ","Ĵ","Ɉ","Ḱ","Ǩ","Ķ","Ⱪ","Ꝃ","Ḳ","Ƙ","Ḵ","Ꝁ","Ꝅ","Ĺ","Ƚ","Ľ","Ļ","Ḽ","Ḷ","Ḹ","Ⱡ","Ꝉ","Ḻ","Ŀ","Ɫ","ǈ","Ł","Ǉ","Ḿ","Ṁ","Ṃ","Ɱ","Ń","Ň","Ņ","Ṋ","Ṅ","Ṇ","Ǹ","Ɲ","Ṉ","Ƞ","ǋ","Ñ","Ǌ","Ó","Ŏ","Ǒ","Ô","Ố","Ộ","Ồ","Ổ","Ỗ","Ö","Ȫ","Ȯ","Ȱ","Ọ","Ő","Ȍ","Ò","Ỏ","Ơ","Ớ","Ợ","Ờ","Ở","Ỡ","Ȏ","Ꝋ","Ꝍ","Ō","Ṓ","Ṑ","Ɵ","Ǫ","Ǭ","Ø","Ǿ","Õ","Ṍ","Ṏ","Ȭ","Ƣ","Ꝏ","Ɛ","Ɔ","Ȣ","Ṕ","Ṗ","Ꝓ","Ƥ","Ꝕ","Ᵽ","Ꝑ","Ꝙ","Ꝗ","Ŕ","Ř","Ŗ","Ṙ","Ṛ","Ṝ","Ȑ","Ȓ","Ṟ","Ɍ","Ɽ","Ꜿ","Ǝ","Ś","Ṥ","Š","Ṧ","Ş","Ŝ","Ș","Ṡ","Ṣ","Ṩ","Ť","Ţ","Ṱ","Ț","Ⱦ","Ṫ","Ṭ","Ƭ","Ṯ","Ʈ","Ŧ","Ɐ","Ꞁ","Ɯ","Ʌ","Ꜩ","Ú","Ŭ","Ǔ","Û","Ṷ","Ü","Ǘ","Ǚ","Ǜ","Ǖ","Ṳ","Ụ","Ű","Ȕ","Ù","Ủ","Ư","Ứ","Ự","Ừ","Ử","Ữ","Ȗ","Ū","Ṻ","Ų","Ů","Ũ","Ṹ","Ṵ","Ꝟ","Ṿ","Ʋ","Ṽ","Ꝡ","Ẃ","Ŵ","Ẅ","Ẇ","Ẉ","Ẁ","Ⱳ","Ẍ","Ẋ","Ý","Ŷ","Ÿ","Ẏ","Ỵ","Ỳ","Ƴ","Ỷ","Ỿ","Ȳ","Ɏ","Ỹ","Ź","Ž","Ẑ","Ⱬ","Ż","Ẓ","Ȥ","Ẕ","Ƶ","Ĳ","Œ","ᴀ","ᴁ","ʙ","ᴃ","ᴄ","ᴅ","ᴇ","ꜰ","ɢ","ʛ","ʜ","ɪ","ʁ","ᴊ","ᴋ","ʟ","ᴌ","ᴍ","ɴ","ᴏ","ɶ","ᴐ","ᴕ","ᴘ","ʀ","ᴎ","ᴙ","ꜱ","ᴛ","ⱻ","ᴚ","ᴜ","ᴠ","ᴡ","ʏ","ᴢ","á","ă","ắ","ặ","ằ","ẳ","ẵ","ǎ","â","ấ","ậ","ầ","ẩ","ẫ","ä","ǟ","ȧ","ǡ","ạ","ȁ","à","ả","ȃ","ā","ą","ᶏ","ẚ","å","ǻ","ḁ","ⱥ","ã","ꜳ","æ","ǽ","ǣ","ꜵ","ꜷ","ꜹ","ꜻ","ꜽ","ḃ","ḅ","ɓ","ḇ","ᵬ","ᶀ","ƀ","ƃ","ɵ","ć","č","ç","ḉ","ĉ","ɕ","ċ","ƈ","ȼ","ď","ḑ","ḓ","ȡ","ḋ","ḍ","ɗ","ᶑ","ḏ","ᵭ","ᶁ","đ","ɖ","ƌ","ı","ȷ","ɟ","ʄ","ǳ","ǆ","é","ĕ","ě","ȩ","ḝ","ê","ế","ệ","ề","ể","ễ","ḙ","ë","ė","ẹ","ȅ","è","ẻ","ȇ","ē","ḗ","ḕ","ⱸ","ę","ᶒ","ɇ","ẽ","ḛ","ꝫ","ḟ","ƒ","ᵮ","ᶂ","ǵ","ğ","ǧ","ģ","ĝ","ġ","ɠ","ḡ","ᶃ","ǥ","ḫ","ȟ","ḩ","ĥ","ⱨ","ḧ","ḣ","ḥ","ɦ","ẖ","ħ","ƕ","í","ĭ","ǐ","î","ï","ḯ","ị","ȉ","ì","ỉ","ȋ","ī","į","ᶖ","ɨ","ĩ","ḭ","ꝺ","ꝼ","ᵹ","ꞃ","ꞅ","ꞇ","ꝭ","ǰ","ĵ","ʝ","ɉ","ḱ","ǩ","ķ","ⱪ","ꝃ","ḳ","ƙ","ḵ","ᶄ","ꝁ","ꝅ","ĺ","ƚ","ɬ","ľ","ļ","ḽ","ȴ","ḷ","ḹ","ⱡ","ꝉ","ḻ","ŀ","ɫ","ᶅ","ɭ","ł","ǉ","ſ","ẜ","ẛ","ẝ","ḿ","ṁ","ṃ","ɱ","ᵯ","ᶆ","ń","ň","ņ","ṋ","ȵ","ṅ","ṇ","ǹ","ɲ","ṉ","ƞ","ᵰ","ᶇ","ɳ","ñ","ǌ","ó","ŏ","ǒ","ô","ố","ộ","ồ","ổ","ỗ","ö","ȫ","ȯ","ȱ","ọ","ő","ȍ","ò","ỏ","ơ","ớ","ợ","ờ","ở","ỡ","ȏ","ꝋ","ꝍ","ⱺ","ō","ṓ","ṑ","ǫ","ǭ","ø","ǿ","õ","ṍ","ṏ","ȭ","ƣ","ꝏ","ɛ","ᶓ","ɔ","ᶗ","ȣ","ṕ","ṗ","ꝓ","ƥ","ᵱ","ᶈ","ꝕ","ᵽ","ꝑ","ꝙ","ʠ","ɋ","ꝗ","ŕ","ř","ŗ","ṙ","ṛ","ṝ","ȑ","ɾ","ᵳ","ȓ","ṟ","ɼ","ᵲ","ᶉ","ɍ","ɽ","ↄ","ꜿ","ɘ","ɿ","ś","ṥ","š","ṧ","ş","ŝ","ș","ṡ","ṣ","ṩ","ʂ","ᵴ","ᶊ","ȿ","ɡ","ᴑ","ᴓ","ᴝ","ť","ţ","ṱ","ț","ȶ","ẗ","ⱦ","ṫ","ṭ","ƭ","ṯ","ᵵ","ƫ","ʈ","ŧ","ᵺ","ɐ","ᴂ","ǝ","ᵷ","ɥ","ʮ","ʯ","ᴉ","ʞ","ꞁ","ɯ","ɰ","ᴔ","ɹ","ɻ","ɺ","ⱹ","ʇ","ʌ","ʍ","ʎ","ꜩ","ú","ŭ","ǔ","û","ṷ","ü","ǘ","ǚ","ǜ","ǖ","ṳ","ụ","ű","ȕ","ù","ủ","ư","ứ","ự","ừ","ử","ữ","ȗ","ū","ṻ","ų","ᶙ","ů","ũ","ṹ","ṵ","ᵫ","ꝸ","ⱴ","ꝟ","ṿ","ʋ","ᶌ","ⱱ","ṽ","ꝡ","ẃ","ŵ","ẅ","ẇ","ẉ","ẁ","ⱳ","ẘ","ẍ","ẋ","ᶍ","ý","ŷ","ÿ","ẏ","ỵ","ỳ","ƴ","ỷ","ỿ","ȳ","ẙ","ɏ","ỹ","ź","ž","ẑ","ʑ","ⱬ","ż","ẓ","ȥ","ẕ","ᵶ","ᶎ","ʐ","ƶ","ɀ","ﬀ","ﬃ","ﬄ","ﬁ","ﬂ","ĳ","œ","ﬆ","ₐ","ₑ","ᵢ","ⱼ","ₒ","ᵣ","ᵤ","ᵥ","ₓ","penEdit","ListOfTestGroups","GroupTypeOptions","Landing","CreateAndEditTestGroup","testsGroupData","isDisableEditLink","setIsDisableEditLink","uniqueLinkTestGroupMutation","useGetTestGroupInfoLazyQuery","getTestGroupQuery","getTestGroupResponse","selectedGroupTypeOptions","setSelectedGroupTypeOptions","selectedTestGroup","setSelectedTestGroup","getTestGroup","selected","parentId","useCreateTestGroupMutation","createTestGroupMutation","createTestGroupResponse","updateTestGroupMutation","updateTestGrouResponse","defaultListTestGroup","setDefaultListTestGroup","tg","remainingData","linkTrim","uniqueLinkTestGroup","setErrors","updateTestGroup","createTestGroup","ButtonSubmit","generatedLink","CreateAndEditTestCategory","getTestCategoryQuery","getTestCategoryResponse","useRemoveFromCatMutation","removeTestFromCatMutation","removeTestFromCatMutationResult","getTestGroupsQuery","orderDirection","Asc","shouldGetChild","testCategoryData","removeFromCat","t_index","ToeicAdmin","val","typeFormatted","deleteBlog","deleteBlogMutation","deleteBlogMutationResult","BlogHomePage","TestGroupDefaultOptions","CreateAndEditBlog","getBlogQuery","getBlogResponse","useUniqueLinkBlogMutation","uniqueLinkBlogMutation","useCreateBlogMutation","createBlogMutation","useUpdateBlogMutation","updateBlogMutation","TestGroupOptions","setTestGroupOptions","testGroupSelected","setTestGroupSelected","useGetTestGroupsQuery","getBlog","authorId","metaTags","shouldShowPreview","uniqueLinkBlog","updateBlog","createBlog","submitCount","BlogAdmin","arrow","StatusOptions","ListBody","testGroupChild","isChild","ListBodyChild","StatusDefault","s","ListTestGroup","dashRoutes","component","isTest","htmlFor","DashboardAdmin","mainPanel","setBackgroundColor","from","httpLink","createHttpLink","uri","fetchOptions","authLink","setContext","powper","authorization","ApolloClient","concat","cache","InMemoryCache","App","render","serviceWorker","ready","registration","unregister","catch","error"],"mappings":";+FAoBA,SAASA,EAASC,EAAKC,GACrB,IAAIC,EAAIC,SAASH,EAAII,MAAM,EAAG,GAAI,IAChCC,EAAIF,SAASH,EAAII,MAAM,EAAG,GAAI,IAC9BE,EAAIH,SAASH,EAAII,MAAM,EAAG,GAAI,IAEhC,OAAIH,EACK,QAAUC,EAAI,KAAOG,EAAI,KAAOC,EAAI,KAAOL,EAAQ,IAEnD,OAASC,EAAI,KAAOG,EAAI,KAAOC,EAAI,IAQ9C,IAwNMC,EAAgC,CACpCC,KAAM,SAACC,GACL,IAAIC,EAAMD,EAAOE,WAAW,MACxBC,EAAiBF,EAAIG,qBAAqB,IAAK,EAAG,IAAK,GAC3DD,EAAeE,aAAa,EAAG,WAC/BF,EAAeE,aAAa,EA7Nb,WA8Nf,IAAIC,EAAeL,EAAIG,qBAAqB,EAAG,IAAK,EAAG,IAGvD,OAFAE,EAAaD,aAAa,EAAG,0BAC7BC,EAAaD,aAAa,EAAG,2BACtB,CACLE,OAAQ,CACN,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OAEFC,SAAU,CACR,CACEC,MAAO,eACPC,YAAa,UACbC,iBAAkB,OAClBC,qBAAsB,UACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,sBAAuB,EACvBC,YAAa,EACbC,MAAM,EACNC,gBAAiBZ,EACjBa,YAAa,EACbpB,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,SAKtEqB,QA/PwC,CACxCC,qBAAqB,EACrBC,OAAQ,CACNC,SAAS,GAEXC,SAAU,CACRC,YAAa,EACbC,KAAM,UACNC,UAAW,EACXC,SAAU,UACVC,SAAU,GACVC,SAAU,GACVC,aAAc,IAEhBC,WAAY,EACZC,OAAQ,CACNC,MAAO,CACL,CACEX,QAAS,EACTY,MAAO,CACLZ,SAAS,EACTa,cAAe,GAEjBC,UAAW,CACTC,cAAe,cACfC,WAAW,EACXhB,SAAS,EACTiB,YAAY,KAIlBC,MAAO,CACL,CACElB,QAAS,EACTY,MAAO,CACLZ,SAAS,GAEXc,UAAW,CACTC,cAAe,cACfC,WAAW,EACXhB,SAAS,EACTiB,YAAY,MAKpBE,OAAQ,CACNC,QAAS,CAAEC,KAAM,EAAGC,MAAO,EAAGC,IAAK,GAAIC,OAAQ,OAuN7CC,EAA4B,CAChCjD,KAAM,SAACC,GACL,IAAIC,EAAMD,EAAOE,WAAW,MACxBC,EAAiBF,EAAIG,qBAAqB,IAAK,EAAG,IAAK,GAC3DD,EAAeE,aAAa,EAAG,WAC/BF,EAAeE,aAAa,EA9Qb,WA+Qf,IAAIC,EAAeL,EAAIG,qBAAqB,EAAG,IAAK,EAAG,IAGvD,OAFAE,EAAaD,aAAa,EAAG,0BAC7BC,EAAaD,aAAa,EAAGf,EAAS,UAAW,KAC1C,CACLiB,OAAQ,CAAC,QAAS,MAAO,MAAO,MAAO,OAAQ,MAAO,MAAO,OAC7DC,SAAU,CACR,CACEC,MAAO,cACPC,YAAa,UACbC,iBAAkB,OAClBC,qBAAsB,UACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,sBAAuB,EACvBC,YAAa,EACbC,MAAM,EACNC,gBAAiBZ,EACjBa,YAAa,EACbpB,KAAM,CAAC,GAAI,IAAK,IAAK,IAAK,KAAM,KAAM,KAAM,UAKpDqB,QAhPwD,CACxDC,qBAAqB,EACrBC,OAAQ,CACNC,SAAS,GAEXC,SAAU,CACRC,YAAa,EACbC,KAAM,UACNC,UAAW,EACXC,SAAU,UACVC,SAAU,GACVC,SAAU,GACVC,aAAc,IAEhBC,WAAY,EACZC,OAAQ,CACNC,MAAO,CACL,CACEG,UAAW,CACTC,cAAe,cACfE,YAAY,GAEdL,MAAO,CACLC,cAAe,KAIrBK,MAAO,CACL,CACElB,QAAS,EACTY,MAAO,CACLZ,SAAS,GAEXc,UAAW,CACTC,cAAe,cACfC,WAAW,EACXhB,SAAS,EACTiB,YAAY,MAKpBE,OAAQ,CACNC,QAAS,CAAEC,KAAM,EAAGC,MAAO,EAAGC,IAAK,GAAIC,OAAQ,OA4M7CE,EAAmC,CACvClD,KAAM,SAACC,GACL,IACIM,EADMN,EAAOE,WAAW,MACLE,qBAAqB,EAAG,IAAK,EAAG,IAGvD,OAFAE,EAAaD,aAAa,EAAG,0BAC7BC,EAAaD,aAAa,EAAGf,EAAS,UAAW,KAC1C,CACLiB,OAAQ,CACN,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAEFC,SAAU,CACR,CACEC,MAAO,mBACPS,gBAAiBZ,EACjBI,YAAa,UACbC,iBAAkB,OAClBC,qBAAsB,UACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,sBAAuB,EACvBC,YAAa,EACbC,MAAM,EACNE,YAAa,EACbpB,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,IAAK,GAAI,GAAI,GAAI,IAAK,SAK9DqB,QAAS,CACPC,qBAAqB,EACrBC,OAAQ,CACNC,SAAS,GAEXC,SAAU,CACRC,YAAa,EACbC,KAAM,UACNC,UAAW,EACXC,SAAU,UACVC,SAAU,GACVC,SAAU,GACVC,aAAc,IAEhBC,WAAY,EACZC,OAAQ,CACNC,MAAO,CACL,CACEC,MAAO,CACLC,cAAe,GAEjBC,UAAW,CACTC,cAAe,cACfE,YAAY,KAIlBC,MAAO,CACL,CACElB,QAAS,EACTY,MAAO,CACLZ,SAAS,GAEXc,UAAW,CACTC,cAAe,cACfC,WAAW,EACXhB,SAAS,EACTiB,YAAY,MAKpBE,OAAQ,CACNC,QAAS,CAAEC,KAAM,EAAGC,MAAO,EAAGC,IAAK,GAAIC,OAAQ,OAKrDG,EAAOC,QAAU,CACfC,oBA5R0B,CAC1BrD,KAAM,SAACC,GACL,IAAMC,EAAMD,EAAOE,WAAW,MAE1BC,EAAiBF,EAAIG,qBAAqB,IAAK,EAAG,IAAK,GAC3DD,EAAeE,aAAa,EAAG,WAC/BF,EAAeE,aAAa,EAHX,WAIjB,IAAIC,EAAeL,EAAIG,qBAAqB,EAAG,IAAK,EAAG,IAIvD,OAHAE,EAAaD,aAAa,EAAG,0BAC7BC,EAAaD,aAAa,EAAG,6BAEtB,CACLE,OAAQ,CACN,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OAEFC,SAAU,CACR,CACEC,MAAO,OACPC,YA1BW,UA2BXC,iBA3BW,UA4BXC,qBAAsB,UACtByC,0BAA2B,UAC3BC,sBA9BW,UA+BXzC,iBAAkB,EAClBC,iBAAkB,EAClBC,sBAAuB,EACvBC,YAAa,EACbC,MAAM,EACNC,gBAAiBZ,EACjBa,YAAa,EACbpB,KAAM,CAAC,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,QAKpEqB,QAAS,CACPsB,OAAQ,CACNC,QAAS,CACPC,KAAM,GACNC,MAAO,GACPC,IAAK,EACLC,OAAQ,IAGZ1B,qBAAqB,EACrBG,SAAU,CACRN,gBAAiB,OACjBqC,eAAgB,OAChBC,cAAe,OACf/B,YAAa,EACbI,SAAU,GACVH,KAAM,UACNC,UAAW,EACXC,SAAU,WAEZN,OAAQ,CACNM,SAAU,SACV6B,UAAW,OACXlC,SAAS,GAEXU,OAAQ,CACNC,MAAO,CACL,CACEC,MAAO,CACLuB,UAAW,wBACXC,UAAW,OACXC,aAAa,EACbxB,cAAe,EACfO,QAAS,IAEXN,UAAW,CACTE,WAAW,EACXC,YAAY,EACZjB,SAAS,EACTsC,MAAO,wBACPvB,cAAe,iBAIrBG,MAAO,CACL,CACEJ,UAAW,CACTd,SAAS,EACTsC,MAAO,yBAET1B,MAAO,CACLQ,QAAS,GACTe,UAAW,wBACXC,UAAW,aA0LrB7D,gCACAkD,4BACAC,qC,oBC5aFC,EAAOC,QAAU,IAA0B,mC,oBCA3CD,EAAOC,QAAU,IAA0B,kC,oBCA3CD,EAAOC,QAAU,IAA0B,iC,62uECA3CD,EAAOC,QAAU,IAA0B,wC,8/ZCA3CD,EAAOC,QAAU,IAA0B,kC,oBCA3CD,EAAOC,QAAU,IAA0B,oC,oBCA3CD,EAAOC,QAAU,IAA0B,qC,oBCA3CD,EAAOC,QAAU,IAA0B,qC,oBCA3CD,EAAOC,QAAU,IAA0B,oC,oBCA3CD,EAAOC,QAAU,IAA0B,iC,oBCA3CD,EAAOC,QAAU,IAA0B,kC,oBCA3CD,EAAOC,QAAU,IAA0B,qC,oBCA3CD,EAAOC,QAAU,IAA0B,0C,oBCA3CD,EAAOC,QAAU,IAA0B,kC,oBCA3CD,EAAOC,QAAU,IAA0B,sC,0CCA3CD,EAAOC,QAAU,IAA0B,0C,oBCA3CD,EAAOC,QAAU,IAA0B,iC,oBCA3CD,EAAOC,QAAU,IAA0B,kC,mFCYvBW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6BCjBOC,EAAiD,wBAQ/CC,EANA,CACbC,mBAAmB,GAAD,OAAKF,EAAL,YAClBG,WAAU,UAAMH,EAAN,oBACVI,aAAa,GAAD,OAAKJ,EAAL,aACZK,WAAY,iBALC,c,kGCwMAC,EAlMmC,SAAC,GACjD,OADyD,eAEvD,oCACE,yBAAKC,UAAU,cACb,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACN,wBAAIJ,UAAU,SAAd,yBACe,IACb,0BAAMA,UAAU,wBAAhB,mBAEF,yBAAKA,UAAU,wBACb,yBAAKA,UAAU,+BACb,uBAAGA,UAAU,iCAEf,yBAAKA,UAAU,eACb,wBAAIA,UAAU,cAAd,4EAGA,2VAOJ,yBAAKA,UAAU,wBACb,yBAAKA,UAAU,+BACb,uBAAGA,UAAU,iCAEf,yBAAKA,UAAU,eACb,wBAAIA,UAAU,cAAd,wCACA,mYAOJ,yBAAKA,UAAU,wBACb,yBAAKA,UAAU,+BACb,uBAAGA,UAAU,kCAEf,yBAAKA,UAAU,eACb,wBAAIA,UAAU,cAAd,iDACA,wXAOJ,yBAAKA,UAAU,wBACb,yBAAKA,UAAU,+BACb,uBAAGA,UAAU,wCAEf,yBAAKA,UAAU,eACb,wBAAIA,UAAU,cAAd,2DACA,2YAQN,kBAACG,EAAA,EAAD,CAAKC,GAAG,KACN,yBAAKJ,UAAU,4BACb,yBAAKA,UAAU,oBACb,yBACEK,IAAI,MACJC,IAAKC,EAAQ,QAGjB,yBAAKP,UAAU,gCACb,yBAAKA,UAAU,+BACb,uBAAGA,UAAU,mCAEf,yBAAKA,UAAU,eACb,wBAAIA,UAAU,cAAd,+FAGA,2RAWd,yBACIA,UAAU,2BACVQ,MAAO,CACLC,gBAAiB,OAASF,EAAQ,KAAoC,MAG1E,kBAACN,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACN,wBAAIJ,UAAU,mBAAd,oBACU,IACR,0BAAMA,UAAU,wBAAhB,mBAEF,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,eACb,uBAAGA,UAAU,2BAAb,y6BAWA,uBAAGA,UAAU,cAAb,uEAKJ,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACN,yBAAKJ,UAAU,6BACb,yBAAKA,UAAU,QACb,uBAAGA,UAAU,iCAEf,yBAAKA,UAAU,eACb,wBAAIA,UAAU,cAAd,gCAIN,kBAACG,EAAA,EAAD,CAAKC,GAAG,KACN,yBAAKJ,UAAU,6BACb,yBAAKA,UAAU,QACb,uBAAGA,UAAU,iCAEf,yBAAKA,UAAU,eACb,wBAAIA,UAAU,cAAd,yBAIN,kBAACG,EAAA,EAAD,CAAKC,GAAG,KACN,yBAAKJ,UAAU,6BACb,yBAAKA,UAAU,QACb,uBAAGA,UAAU,iCAEf,yBAAKA,UAAU,eACb,wBAAIA,UAAU,cAAd,sBAIN,kBAACG,EAAA,EAAD,CAAKC,GAAG,KACN,yBAAKJ,UAAU,6BACb,yBAAKA,UAAU,QACb,uBAAGA,UAAU,iCAEf,yBAAKA,UAAU,eACb,wBAAIA,UAAU,cAAd,sBAIN,kBAACG,EAAA,EAAD,CAAKC,GAAG,KACN,yBAAKJ,UAAU,6BACb,yBAAKA,UAAU,QACb,uBAAGA,UAAU,iCAEf,yBAAKA,UAAU,eACb,wBAAIA,UAAU,cAAd,sBAMV,kBAACG,EAAA,EAAD,CAAKC,GAAG,KACN,yBAAKJ,UAAU,4BACb,yBAAKA,UAAU,oBACb,yBACEK,IAAI,MACJC,IAAKC,EAAQ,e,oWCtL1B,ICwLKG,EAMAC,EA6CAC,EAmDAC,EA2CAC,EA0VAC,EAkHAC,EDrxBCC,EAAoC,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,MAAOnB,EAAe,EAAfA,UAChE,OACI,iBAAGoB,IAAKA,YAAF,IAEoBD,GAK1BnB,UAAWA,GAAYkB,IECzBG,EAAgB,CACpBC,MAAM,EACNC,UAAU,EACVC,MAAO,IACPC,aAAc,EACdC,eAAgB,GAEZC,EAAQ,CACZ,CACErB,IAAK,IACLsB,QAAS,GACTC,QAAS,GACTC,QACE,kBAACC,EAAA,EAAD,CAAM/B,UAAU,+BACd,yBAAKA,UAAU,eACb,uBAAGgC,KAAK,SAASC,QAAS,SAACC,GAAD,OAAOA,EAAEC,mBACjC,yBACE9B,IAAI,MACJL,UAAU,yBACVM,IAAKC,EAAQ,SAInB,kBAAC6B,EAAA,EAAD,KACE,kBAAC,EAAD,CAAUjB,MAAO,EAAGnB,UAAU,gCAA9B,2vBAQA,kBAACqC,EAAA,EAAD,CAAWC,IAAI,MAAf,wCACA,kBAACC,EAAA,EAAD,KACE,wBAAIvC,UAAU,sBAAd,+FAQV,CACEM,IAAK,IACLsB,QAAS,GACTC,QAAS,GACTC,QACE,kBAACC,EAAA,EAAD,CAAM/B,UAAU,+BACd,yBAAKA,UAAU,eACb,uBAAGgC,KAAK,SAASC,QAAS,SAACC,GAAD,OAAOA,EAAEC,mBACjC,yBACE9B,IAAI,MACJL,UAAU,yBACVM,IAAKC,EAAQ,SAInB,kBAAC6B,EAAA,EAAD,KACE,kBAAC,EAAD,CAAUjB,MAAO,EAAGnB,UAAU,+BAA9B,+lBAOA,kBAACqC,EAAA,EAAD,CAAWC,IAAI,MAAf,uBACA,kBAACC,EAAA,EAAD,KACE,wBAAIvC,UAAU,sBAAd,uBAMV,CACEM,IAAK,IACLsB,QAAS,GACTC,QAAS,GACTC,QACE,kBAACC,EAAA,EAAD,CAAM/B,UAAU,+BACd,yBAAKA,UAAU,eACb,uBAAGgC,KAAK,SAASC,QAAS,SAACC,GAAD,OAAOA,EAAEC,mBACjC,yBACE9B,IAAI,MACJL,UAAU,yBACVM,IAAKC,EAAQ,SAInB,kBAAC6B,EAAA,EAAD,KACE,kBAAC,EAAD,CAAUjB,MAAO,EAAGnB,UAAU,+BAA9B,0oCAWA,kBAACqC,EAAA,EAAD,CAAWC,IAAI,MAAf,gDACA,kBAACC,EAAA,EAAD,KACE,wBAAIvC,UAAU,sBAAd,wBAoKGwC,EA7JoB,SAAC,GAAQ,qBACJC,IAAMC,SAAS,GADZ,gCAEPD,IAAMC,UAAS,IAFR,6BAmBzC,OACE,yBAAK1C,UAAU,kBACb,kBAACC,EAAA,EAAD,KACE,wBAAID,UAAU,qBAAd,kCACkB,IAChB,0BAAMA,UAAU,wBAAhB,mBAGF,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,MACR,kBAAC,IAAWiB,EACXM,EAAMgB,KAAI,SAACC,EAAMC,GACZ,OACE,yBAAKC,IAAKD,GACPD,EAAKd,gBA8CpB,yBACE9B,UAAU,uBACVQ,MAAO,CACLC,gBACE,OAASF,EAAQ,KAAkC,MAGvD,kBAACN,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKH,UAAU,8BAA8BI,GAAG,KAC9C,wBAAIJ,UAAU,SAAd,8CACA,wBAAIA,UAAU,kBAGlB,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKH,UAAU,kBAAkB+C,GAAG,IAAIC,GAAG,KACzC,kBAACjB,EAAA,EAAD,CAAM/B,UAAU,gBACd,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACN,yBAAKJ,UAAU,cACb,uBAAGgC,KAAK,SAASC,QAAS,SAACC,GAAD,OAAOA,EAAEC,mBACjC,yBACE9B,IAAI,MACJL,UAAU,YACVM,IAAKC,EAAQ,UAKrB,kBAACJ,EAAA,EAAD,CAAKC,GAAG,KACN,kBAACgC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAWC,IAAI,MAAf,wCACA,wBAAItC,UAAU,mCAAd,OACA,uBAAGA,UAAU,+BAAb,+FASV,kBAACG,EAAA,EAAD,CAAKH,UAAU,kBAAkB+C,GAAG,IAAIC,GAAG,KACzC,kBAACjB,EAAA,EAAD,CAAM/B,UAAU,gBACd,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACN,yBAAKJ,UAAU,cACb,uBAAGgC,KAAK,SAASC,QAAS,SAACC,GAAD,OAAOA,EAAEC,mBACjC,yBACE9B,IAAI,MACJL,UAAU,YACVM,IAAKC,EAAQ,UAKrB,kBAACJ,EAAA,EAAD,CAAKC,GAAG,KACN,kBAACgC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAWC,IAAI,MAAf,qCACA,wBAAItC,UAAU,mCAAd,WAGA,uBAAGA,UAAU,+BAAb,yG,6CCpLPiD,EA9E8B,SAAC,GAGvC,qBACiCR,IAAMC,UAAS,GADjD,mBACKQ,EADL,KACiBC,EADjB,OAE8BV,IAAMC,UAAS,GAF7C,mBAEGU,EAFH,KAEcC,EAFd,KAGF,OACI,oCACE,yBAAKrD,UAAU,0CACf,kBAACC,EAAA,EAAD,KACE,wBAAID,UAAU,SAAd,iBACA,uBAAGA,UAAU,eAAb,sBACA,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKH,UAAU,8BAA8B+C,GAAG,IAAI3C,GAAG,KACrD,kBAACkD,EAAA,EAAD,CACEtD,UACE,YAAckD,EAAa,qBAAuB,KAGpD,kBAACK,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,KACE,uBAAGzD,UAAU,mCAGjB,kBAAC0D,EAAA,EAAD,CACEC,YAAY,gBACZC,KAAK,OACLC,QAAS,kBAAMV,GAAc,IAC7BW,OAAQ,kBAAMX,GAAc,OAGhC,kBAACG,EAAA,EAAD,CACEtD,UACE,YAAcoD,EAAY,qBAAuB,KAGnD,kBAACG,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,KACE,uBAAGzD,UAAU,iCAGjB,kBAAC0D,EAAA,EAAD,CACEC,YAAY,WACZC,KAAK,OACLC,QAAS,kBAAMR,GAAa,IAC5BS,OAAQ,kBAAMT,GAAa,OAG/B,yBAAKrD,UAAU,sBACb,kBAAC0D,EAAA,EAAD,CACEK,KAAK,KACLC,KAAK,OACLL,YAAY,oBACZM,KAAK,IACLL,KAAK,cAGT,yBAAK5D,UAAU,eACb,kBAACkE,EAAA,EAAD,CACEC,OAAK,EACLnE,UAAU,YACVb,MAAM,UACN6C,KAAK,SACLC,QAAS,SAACC,GAAD,OAAOA,EAAEC,kBAClBiC,KAAK,MANP,uBCtCHC,EAlB4B,SAAC,GAIxC,OADG,eAEC,oCACE,yBAAKrE,UAAU,wBAAwBsE,GAAG,aACpC,kBAAC,EAAD,MACA,kBAAC,EAAD,MAGA,kBAAC,EAAD,SC8IDC,EA7JO,WACpB,OACE,oCACE,4BAAQvE,UAAU,8BAChB,kBAACC,EAAA,EAAD,KACE,yBAAKD,UAAU,WACb,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,IAAIJ,UAAU,cACpB,wCACA,wBAAIA,UAAU,kBACZ,4BACE,uBACEA,UAAU,aACVgC,KAAK,SACLC,QAAS,SAACC,GAAD,OAAOA,EAAEC,mBAHpB,SAQF,4BACE,uBACEnC,UAAU,aACVgC,KAAK,SACLC,QAAS,SAACC,GAAD,OAAOA,EAAEC,mBAHpB,aAQF,4BACE,uBACEnC,UAAU,aACVgC,KAAK,SACLC,QAAS,SAACC,GAAD,OAAOA,EAAEC,mBAHpB,iBAQF,4BACE,uBACEnC,UAAU,aACVgC,KAAK,SACLC,QAAS,SAACC,GAAD,OAAOA,EAAEC,mBAHpB,iBAUN,kBAAChC,EAAA,EAAD,CAAKC,GAAG,IAAIJ,UAAU,cACpB,sCACA,wBAAIA,UAAU,kBACZ,4BACE,uBACEA,UAAU,aACVgC,KAAK,SACLC,QAAS,SAACC,GAAD,OAAOA,EAAEC,mBAHpB,UAQF,4BACE,uBACEnC,UAAU,aACVgC,KAAK,SACLC,QAAS,SAACC,GAAD,OAAOA,EAAEC,mBAHpB,UAQF,4BACE,uBACEnC,UAAU,aACVgC,KAAK,SACLC,QAAS,SAACC,GAAD,OAAOA,EAAEC,mBAHpB,sBAWN,kBAAChC,EAAA,EAAD,CAAKC,GAAG,IAAIJ,UAAU,cACpB,yCACA,wBAAIA,UAAU,kBACZ,4BACE,kBAACkE,EAAA,EAAD,CACElE,UAAU,sCACVb,MAAM,UACN6C,KAAK,SACLC,QAAS,SAACC,GAAD,OAAOA,EAAEC,mBAElB,uBAAGnC,UAAU,qBAGjB,4BACE,kBAACkE,EAAA,EAAD,CACElE,UAAU,sCACVb,MAAM,WACN6C,KAAK,SACLC,QAAS,SAACC,GAAD,OAAOA,EAAEC,mBAElB,uBAAGnC,UAAU,6BAGjB,4BACE,kBAACkE,EAAA,EAAD,CACElE,UAAU,sCACVb,MAAM,WACN6C,KAAK,SACLC,QAAS,SAACC,GAAD,OAAOA,EAAEC,mBAElB,uBAAGnC,UAAU,sBAGjB,4BACE,kBAACkE,EAAA,EAAD,CACElE,UAAU,sCACVb,MAAM,SACN6C,KAAK,SACLC,QAAS,SAACC,GAAD,OAAOA,EAAEC,mBAElB,uBAAGnC,UAAU,yBAGjB,4BACE,kBAACkE,EAAA,EAAD,CACElE,UAAU,iCACVb,MAAM,YACN6C,KAAK,SACLC,QAAS,SAACC,GAAD,OAAOA,EAAEC,mBAElB,uBAAGnC,UAAU,wBAInB,4BACE,qDAEF,sCACS,2BAAOA,UAAU,cAAjB,YAET,yCACY,2BAAOA,UAAU,cAAjB,oBAKlB,wBAAIA,UAAU,eACd,yBAAKA,UAAU,wBAAf,mBACe,IAAIwE,MAAOC,cAD1B,mCC9IKC,EAPyB,SAAC,GAAsB,IAAD,IAAnBvF,aAAmB,MAAb,OAAa,EAE5D,OACE,yBAAKa,UAAW,wBAA0B,CAACb,Y,mCCsNhCwF,GAjNyC,SAAC,GAIlD,IAHLC,EAGI,EAHJA,cACAC,EAEI,EAFJA,SACAC,EACI,EADJA,SACI,EACyCrC,IAAMC,SAEjD,IAHE,mBACGqC,EADH,KACoBC,EADpB,KAIAC,EAAiE,GAC/DC,EAAc,OAAGN,QAAH,IAAGA,OAAH,EAAGA,EACnB3J,QACDkK,MAAK,SAACC,EAAGjK,GAAJ,OAAUiK,EAAEC,aAAelK,EAAEkK,gBACrC5C,IAAM6C,WAAU,WACA,OAAdJ,QAAc,IAAdA,KAAgBvC,KAAI,SAAC4C,GACnB,IAAIC,EAAsE,GACpEC,EAAiB,2BAAOF,EAAaG,UAApB,IAA8BL,aAAcE,EAAaF,eAChFJ,EAAUU,KAAKF,GACXF,EAAaG,SAASE,eAAeC,OAAS,IAChDL,EAAiBD,EAAaG,SAASE,eAAejD,KAAI,SAACmD,EAAOjD,GAAY,OAAO,2BAAIiD,GAAX,IAAkBT,aAAcE,EAAaF,aAAe,EAAIxC,OAC9IoC,EAAS,sBAAOA,GAAP,YAAqBO,QAGlCR,EAAkBC,KACjB,IACH,IAAMzF,EAAQuG,cApBV,EAqBwBtD,IAAMC,UAAS,GArBvC,mBAqBGsD,EArBH,KAqBWC,EArBX,OAsBwBxD,IAAMC,UAAS,GAtBvC,mBAsBGwD,EAtBH,KAsBWC,EAtBX,KAyBJ,OAFAtB,EAASM,MAAK,SAACC,EAAQjK,GAAT,OAAoBiK,EAAEd,GAAKnJ,EAAEmJ,MAGzC,6BACEtE,UAAU,0FACVQ,MAAO,CACL4F,UAAW,UAGb,wBAAIpG,UAAU,QAAd,oBACA,yBACEA,UAAU,yCACVQ,MAAO,CAAE4F,UAAW,IAAKC,UAAW,SAEnCtB,EAAgBc,OAAS,GACxBd,EAAgBpC,KACd,SAAC+C,EAA2D7C,GAC1D,IAAIyD,GAAY,EAMhB,OALAzB,EAASlC,KAAI,SAACT,GACRA,EAAEoC,KAAOoB,EAASpB,KACpBgC,GAAY,MAId,0BACExD,IAAKD,EACL7C,UAAS,YACPsG,EAAY,wBAA0B,sBAD/B,qBAGT9F,MAAO,CACL+F,MAAO,OACPC,OAAQ,OACR3J,QAAS,OACT4J,eAAgB,SAChBC,WAAY,SACZC,aAAc,OACdC,aAAc,MACdC,YAAa,MACbC,OAAQ,WAEV7E,QAAS,WACP,IAAM8E,EAASC,SAASC,eACtB,WAAavB,EAASpB,IAExByC,GACE1H,OAAO6H,SAAS,CACd9I,IAAK2I,EAAOI,UAAY,IACxBC,SAAU,aAIf1B,EAASL,kBAMtB,yBAAKrF,UAAU,gBACb,yBAAKA,UAAU,kCACb,0BACEA,UAAW,wBACXQ,MAAO,CACL+F,MAAO,OACPC,OAAQ,OACRC,eAAgB,SAChBC,WAAY,SACZC,aAAc,OACdC,aAAc,MACdC,YAAa,SAVnB,YAeA,yBAAK7G,UAAU,6BACb,0BACEA,UAAW,sBACXQ,MAAO,CACL+F,MAAO,OACPC,OAAQ,OACRC,eAAgB,SAChBC,WAAY,SACZC,aAAc,OACdC,aAAc,MACdC,YAAa,SAVnB,gBAgBA/B,GACA,yBAAK9E,UAAU,mBACb,kBAACkE,EAAA,EAAD,CACElE,UAAU,8CACViC,QAAS,kBAAMgE,GAAU,KAF3B,UAMA,kBAACoB,EAAA,EAAD,CAAOC,OAAQtB,EAAQ5B,KAAK,KAAKmD,OAAQ,kBAAMtB,GAAU,KACvD,yBAAKjG,UAAU,uCACb,4BACEA,UAAU,QACV4D,KAAK,SACL3B,QAAS,kBAAMgE,GAAU,KAEzB,uBAAGjG,UAAU,qCAEf,wBAAIA,UAAU,kBAAd,oBAEF,kBAACwH,EAAA,EAAD,KACE,0CACc3C,EAASgB,OADvB,IACgCd,EAAgBc,QAEhD,yBAAK7F,UAAU,oBACZ6E,EAASlC,KAAI,SAAC8E,EAAU5E,GACvB,OACE,0BAAM7C,UAAU,OAAO8C,IAAKD,GAC1B,uBAAG7C,UAAU,iCAAb,YACYyH,EAAIpC,cACX,IAHP,KAIKoC,EAAIC,gBAMjB,yBAAK1H,UAAU,gBACb,kBAACkE,EAAA,EAAD,CACE/E,MAAM,SACNyE,KAAK,SACL3B,QAAS,kBAAMgE,GAAU,KAH3B,WASJ,kBAAC/B,EAAA,EAAD,CACEjC,QAAS,kBAAMkE,GAAU,IACzBnG,UAAU,+CAFZ,UAOA,kBAACqH,EAAA,EAAD,CACEM,eAAe,eACfJ,OAAQ,kBAAMpB,GAAU,IACxBmB,OAAQpB,EACR0B,UAAQ,GAER,kBAACJ,EAAA,EAAD,KACE,2CACgB,IACd,0CACe3C,EAASgB,OADxB,IACiCd,EAAgBc,OADjD,OAKJ,yBAAK7F,UAAU,gBACb,kBAAC,IAAD,CACEA,UAAU,kBACV6H,GAAE,UAAKrI,EAAMsI,IAAX,WACF7F,QAAS,WACPkE,GAAU,KAJd,UASA,kBAACjC,EAAA,EAAD,CACElE,UAAU,cACVb,MAAM,OACNyE,KAAK,SACL3B,QAAS,kBAAMkE,GAAU,KAJ3B,c,o8aNhBFzF,K,YAAAA,E,YAAAA,E,mBAAAA,M,cAMAC,K,cAAAA,E,cAAAA,E,wBAAAA,E,4BAAAA,E,kBAAAA,E,aAAAA,M,cA6CAC,K,kBAAAA,E,uBAAAA,M,cAmDAC,K,4BAAAA,E,0BAAAA,E,uBAAAA,M,cA2CAC,K,UAAAA,E,aAAAA,M,cA0VAC,K,gBAAAA,E,UAAAA,E,eAAAA,M,cAkHAC,K,cAAAA,E,cAAAA,E,eAAAA,M,KAiEL,IAAM+G,GAAmBC,KAAH,MAQhBC,GAAkBD,KAAH,MA8BfE,GAA8BF,KAAH,MAc3BG,GAAgCH,KAAH,MAY7BI,GAA2BJ,KAAH,KAc/BG,IACOE,GAA2BL,KAAH,MAuBxBM,GAAsBN,KAAH,KAyB1BK,IACOE,GAAkBP,KAAH,MAUfQ,GAA0BR,KAAH,KAW9BM,GACJC,IACWE,GAAkBT,KAAH,KAqBtBQ,IACOE,GAA0BV,KAAH,KAe9BS,IACOE,GAAuBX,KAAH,KAc3BU,IACOE,GAAkBZ,KAAH,MAWfa,GAAgBb,KAAH,MAmBSA,KAAH,KAM1BD,IAgCC,IAAMe,GAAqBd,KAAH,KAMzBC,IAgCC,IAAMc,GAAqBf,KAAH,KAMzBC,IAgCiCD,KAAH,KAM9BC,IAgCC,IAAMe,GAAkBhB,KAAH,KAMtBC,IAiCC,IAAMgB,GAAmBjB,KAAH,KAUvBC,IAwBC,SAASiB,GAAiBC,GACzB,OAAOC,YAAiEH,GAAkBE,GAQ3F,IAAME,GAAqBrB,KAAH,MAoCxB,IAAMsB,GAAyBtB,KAAH,MAqC5B,IAAMuB,GAAqBvB,KAAH,KAMzBO,IAgCC,IAAMiB,GAAkBxB,KAAH,KAMtBO,IAiCC,IAAMkB,GAAmBzB,KAAH,KAUvBO,IAiCC,IAAMmB,GAA0B1B,KAAH,KAM9BO,IAiCC,IAAMoB,GAAqB3B,KAAH,KAMzBO,IAgC4BP,KAAH,MAoCxB,IAAM4B,GAAyB5B,KAAH,KAM7BM,IAgCC,IAAMuB,GAAyB7B,KAAH,KAM7BM,IAgCC,IAAMwB,GAAsB9B,KAAH,KAM1BM,IAiCC,IAAMyB,GAAuB/B,KAAH,KAU3BM,IAiCC,IAAM0B,GAAyBhC,KAAH,MA8B5B,SAASiC,GAA0Bd,GAClC,OAAOC,eAAsFY,GAAwBb,GAKtH,IAAMe,GAAqBlC,KAAH,KAMzBS,IAgCC,IAAM0B,GAAqBnC,KAAH,KAMzBS,IA0BC,SAAS2B,GAAsBjB,GAC9B,OAAOC,eAA8Ee,GAAoBhB,GAK1G,IAAMkB,GAAsBrC,KAAH,KAM1BS,IAgCC,IAAM6B,GAAwBtC,KAAH,KAM5BS,IAgCC,IAAM8B,GAAkBvC,KAAH,KAMtBS,IAiCC,IAAM+B,GAAqBxC,KAAH,MAoCxB,IAAMyC,GAAmBzC,KAAH,KAUvBS,IAiCC,IAAMiC,GAA6B1C,KAAH,KAMjCU,IAgCC,IAAMiC,GAA6B3C,KAAH,KAMjCU,IA0BC,SAASkC,GAA8BzB,GACtC,OAAOC,eAA8FuB,GAA4BxB,GAKlI,IAAM0B,GAA0B7C,KAAH,KAM9BU,IAiCC,IAAMoC,GAA6B9C,KAAH,MAoChC,IAAM+C,GAA4B/C,KAAH,KAUhCU,IAiCC,IAAMsC,GAAgChD,KAAH,KAUpCE,IAiCC,IAAM+C,GAA0BjD,KAAH,KAM9BW,IAgCC,IAAMuC,GAA0BlD,KAAH,KAM9BI,IA0BC,SAAS+C,GAA2BhC,GACnC,OAAOC,eAAwF8B,GAAyB/B,GAK5FnB,KAAH,KAM3BW,IAiCC,IAAMyC,GAAwBpD,KAAH,KAU5BW,IAiCC,IAAM0C,GAA4BrD,KAAH,KAUhCI,IAwBC,SAASkD,GAA0BnC,GAClC,OAAOC,YAAmFiC,GAA2BlC,GAQtH,IAAMoC,GAA2BvD,KAAH,KAM/BI,IAiCiCJ,KAAH,MAoC7B,IAAMwD,GAA8BxD,KAAH,MAqCjC,IAAMyD,GAA2BzD,KAAH,KAM/BQ,IAiCoCR,KAAH,KAMjCQ,IAgCC,IAAMkD,GAAkC1D,KAAH,KAMtCQ,IAgCC,IAAMmD,GAA6B3D,KAAH,MAoChC,IAAM4D,GAA6B5D,KAAH,KAMjCQ,IAgC4BR,KAAH,KAMzBY,IAgCyBZ,KAAH,KAMtBY,IAiC0BZ,KAAH,KAMvBY,IAgCC,IAAMiD,GAAgB7D,KAAH,KAMpBa,IAiCC,IAAMiD,GAAa9D,KAAH,KAMjBa,IAuBC,SAASkD,GAAW5C,GACnB,OAAOC,YAAqD0C,GAAY3C,GAQhDnB,KAAH,KAMvBa,IAgCwBb,KAAH,M,wBOv2FZgE,GAzIqC,SAAC,GAM9C,IAAD,EALJtG,EAKI,EALJA,SACAuG,EAII,EAJJA,WACAC,EAGI,EAHJA,cACAC,EAEI,EAFJA,aACAtJ,EACI,EADJA,MACI,EACgDJ,IAAMC,SAAS,MAD/D,mBACG0J,EADH,KACuBC,EADvB,KAqCEC,EAAc,UAAI5G,EAA8BE,sBAAlC,aAAG,EAA+CC,OArClE,EAsCiBpD,IAAMC,SAASG,EAAQyJ,GAtCxC,oBAyCJ,OACE,yBAAKtM,UAAU,OAAOsE,GAAI,WAAaoB,EAASpB,IAC9C,yBAAKtE,UAAU,+DACZ0F,GACC,wBAAI1F,UAAU,oBAAoBsM,EAAiB,EAAI5G,EAAS6G,kBAAoB7G,EAAS8G,cAE/F,6BACGL,GACC,kBAACjI,EAAA,EAAD,CACElE,UAAU,oFACViC,QAAS,WACPoK,EAAsB3G,EAASpB,IAC3BoB,EAASpB,KAAO8H,GAClBC,EAAsB,QAL5B,WAYDjN,QAAQsG,EAAS+G,WAChB,kBAACvI,EAAA,EAAD,CACElE,UAAU,oFACViC,QAAS,YA9DH,SAACyK,GACjB,IAAMC,EAAQ3F,SAASC,eACrB,mBAEF0F,EAAOC,YAAcF,EACrBC,EAAOE,OA0DKC,CAAUpH,EAAS+G,YAHvB,sBAWN,kBAACM,GAAA,EAAD,CAAUzF,OAAQ8E,IAAuB1G,EAASpB,IAChD,kBAAClC,EAAA,EAAD,KACE,yBACEpC,UAAU,uEACVgN,wBAAyB,CACvBC,OAAQvH,EAASwH,cAAgB,QAKxCxH,EAASyH,aACR,2BACE,uBAAGnN,UAAU,sBAAsB0F,EAASyH,cAIhD,yBACEnN,UAAU,yDACVgN,wBAAyB,CAAEC,OAAQvH,EAAS5D,SAAW,MAGxD4D,EAAS0H,OACR,yBAAKpN,UAAU,OACb,yBAAKM,IAAKZ,EAAOE,WAAa8F,EAAS0H,SAG1Cd,EAAiB,GAAK,wBAAItM,UAAU,oBAAoB0F,EAAS8G,cAClE,yBAAKxM,UAAU,QACZ0F,EAAS2H,QAAQ1K,KAAI,SAAC8E,EAAU5E,GAC/B,IAAMyK,EAAW7F,EAAIC,YAAchC,EAAS6H,OAC5C,OACE9F,EAAI+F,eACF,kBAACC,GAAA,EAAD,CACEzN,UAAS,wBACPsN,GAAYnB,GAAgB,iCAE9BrJ,IAAKD,GAEL,kBAACa,EAAA,EAAD,CACEE,KAAK,QACL3B,QAAS,YAxGL,SAACyL,EAAoBjG,GACvC,IAAMkG,EAAiB,CACrBrJ,GAAIoJ,EACJhG,UAAWD,EAAIC,WAEjB,GAA0B,IAAtBuE,EAAWpG,OACbqG,EAAc,GAAD,mBAAKD,GAAL,CAAiB0B,SACzB,CAGK1B,EAAW2B,MAAK,SAAC1L,GACzB,OAAOA,EAAEoC,KAAOoJ,MAGhBzB,EAAW4B,SAAQ,SAACC,EAAGjL,GACjBiL,EAAExJ,KAAOoJ,IACXzB,EAAWpJ,GAAX,2BACKoJ,EAAWpJ,IADhB,IAEE6E,UAAWD,EAAIC,gBAIrBwE,EAAcD,IAEdC,EAAc,GAAD,mBAAKD,GAAL,CAAiB0B,MAiFlBI,CACErI,EAASpB,GACTmD,IAGJzD,KAAM,QAAU0B,EAASpB,KACxB,IACFmD,EAAIC,UAhBP,MAgBqBD,EAAI+F,qB,2XCrHvC,IAsIeQ,GAtIqC,SAAC,GAM9C,IALLC,EAKI,EALJA,WACArJ,EAII,EAJJA,cACAqH,EAGI,EAHJA,WACAC,EAEI,EAFJA,cACAC,EACI,EADJA,aACI,EACyC1J,IAAMC,SAEjD,IAHE,mBACGqC,EADH,KACoBC,EADpB,KAIAC,EAA4D,GAC1DC,EAAc,OAAGN,QAAH,IAAGA,OAAH,EAAGA,EACnB3J,QACDkK,MAAK,SAACC,EAAGjK,GAAJ,OAAUiK,EAAEC,aAAelK,EAAEkK,gBACrC5C,IAAM6C,WAAU,WACA,OAAdJ,QAAc,IAAdA,KAAgBvC,KAAI,SAAC4C,GACnB,IAAM2I,EAAoB,2BACrB3I,EAAaG,UADQ,IAExByI,OAAQ5I,EAAa6I,KAAK9J,KAG5B,GADAW,EAAUU,KAAKuI,GACX3I,EAAaG,SAASE,eAAeC,OAAS,EAAG,CACnD,IAAMwI,EAAwB9I,EAAaG,SAASE,eAAejD,KACjE,SAACmD,GACC,OAAO,2BAAKA,GAAZ,IAAmBqI,OAAQ5I,EAAa6I,KAAK9J,QAIjDW,EAAS,sBAAOA,GAAP,YAAqBoJ,QAGlCrJ,EAAkBC,KACjB,IACH,IAAMqJ,EAAK,OAAGL,QAAH,IAAGA,OAAH,EAAGA,EAAYM,iBAQ1B,OACE,YAACtO,EAAA,EAAD,CACEmB,IAAKA,YAAF,OAWH,YAAClB,EAAA,EAAD,KACE,YAACC,EAAA,EAAD,CAAKC,GAAI+L,EAAe,KAAO,MAClB,OAAV8B,QAAU,IAAVA,OAAA,EAAAA,EAAYO,aAAc5N,EAAW6N,WACpCR,EAAWS,UACT,YAAC,KAAD,CACEpO,IAAKZ,EAAOE,WAAaqO,EAAWS,SACpC1O,UAAU,4BACV2O,UAAQ,EACRC,aAAc,aACdtK,GAAG,oBAQRgK,GACCA,EAAM3L,KAAI,SAACyL,EAAMS,GACf,IAAMC,EAAU,OAAGlK,QAAH,IAAGA,OAAH,EAAGA,EAAegJ,MAChC,SAACmB,GAAD,OAAQA,EAAGX,KAAK9J,KAAO8J,EAAKD,UAE9B,OACE,mBAAKrL,IAAK+L,GACR,mBAAK7O,UAAU,+DACb,kBAAIA,UAAU,QAAd,OAAsB8O,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAYV,KAAKY,YACpCZ,EAAKa,YAAcb,EAAKa,WAAa,GACtC,YAAC/K,EAAA,EAAD,CACElE,UAAU,oFACViC,QAAS,YAjDb,SAACyK,GACjB,IAAMC,EAAQ3F,SAASC,eACrB,mBAEF0F,EAAOC,YAAcF,EACrBC,EAAOE,OA6CeC,CAAUsB,EAAKa,cAHnB,qBAUJ,iBACEjC,wBAAyB,CACvBC,QAAkB,OAAV6B,QAAU,IAAVA,OAAA,EAAAA,EAAYV,KAAKjB,cAAe,MAG3CpI,GACCA,EAAgBpC,KACd,SACE+C,EACA7C,GAEA,OAAI6C,EAASyI,SAAWC,EAAKD,OAEzB,YAAC,GAAD,CACEzI,SAAUA,EACV7C,MAAOA,EAAQ,EACfoJ,WAAYA,EACZC,cAAeA,EACfpJ,IAAKD,EACLsJ,aAAcA,IAIb,cAOrBA,GACA,YAAChM,EAAA,EAAD,CAAKC,GAAG,KACN,YAAC,GAAD,CACEwE,cAAeA,EACfC,SAAUoH,QCrHTiD,GAlBoC,SAAC,GAA4D,IAA3DtK,EAA0D,EAA1DA,cAAeqJ,EAA2C,EAA3CA,WAAYhC,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,cAExF,OACI,yBAAKlM,UAAU,MAAMQ,MAAO,CAAE2O,SAAU,OACpC,qDACJ,kBAACjP,EAAA,EAAD,KACQ,kBAACC,EAAA,EAAD,CAAKC,GAAG,KAEJ,kBAAC,GAAD,CAAewE,cAAeA,EAAeqJ,WAAYA,EAAYhC,WAAYA,EAAYC,cAAeA,EAAeC,cAAY,KAE3I,kBAAChM,EAAA,EAAD,CAAKC,GAAG,KACJ,kBAAC,GAAD,CAAiBwE,cAAeA,EAAeC,SAAUoH,EAAYnH,UAAQ,QCkDlFsK,GApEiC,SAAC,GAAQ,eACvD,IA0CMC,EAAa,CAAC,cAAe,eAAgB,aACnD,OACI,6BAASrP,UAAU,sCACjB,wBAAIA,UAAU,eACV,uBAAGA,UAAU,2CADjB,gBAGA,wBAAIA,UAAU,8BAhDP,CACX,CACEgE,KAAM,yBACNsL,MAAO,OAET,CACEtL,KAAM,gBACNsL,MAAO,OAET,CACEtL,KAAM,iBACNsL,MAAO,OAET,CACEtL,KAAM,sBACNsL,MAAO,OAET,CACEtL,KAAM,QACNsL,MAAO,OAET,CACEtL,KAAM,QACNsL,MAAO,OAET,CACEtL,KAAM,UACNsL,MAAO,OAET,CACEtL,KAAM,SACNsL,MAAO,OAET,CACEtL,KAAM,QACNsL,MAAO,OAET,CACEtL,KAAM,OACNsL,MAAO,QAUG3M,KAAI,SAAC8E,EAAK5E,GAEd,OACE,wBAAIC,IAAKD,EAAO7C,UAAW,wEAA0EqP,EAAWxM,GAAQrC,MAAO,CAAE+O,UAAW,SACxI,6BACA,2BAAI1M,EAAQ,GADZ,KACqB4E,EAAIzD,KAAM,KAE/B,0BAAMhE,UAAU,qCACZyH,EAAI6H,MADR,WAEQ,WC6IXE,GA9LqB,SAAC,GAK9B,IAJLvB,EAII,EAJJA,WACArJ,EAGI,EAHJA,cACAqH,EAEI,EAFJA,WACAC,EACI,EADJA,cACI,EACyCzJ,IAAMC,SAEjD,IAHE,mBACGqC,EADH,KACoBC,EADpB,KAIAC,EAAqC,GACnCC,EAAc,OAAGN,QAAH,IAAGA,OAAH,EAAGA,EACnB3J,QACDkK,MAAK,SAACC,EAAGjK,GAAJ,OAAUiK,EAAEC,aAAelK,EAAEkK,gBACrC5C,IAAM6C,WAAU,WACA,OAAdJ,QAAc,IAAdA,KAAgBvC,KAAI,SAAC4C,GACnB,IAAIC,EAA0C,GAC9CP,EAAUU,KAAKJ,EAAaG,UACxBH,EAAaG,SAASE,eAAeC,OAAS,IAChDL,EAAiBD,EAAaG,SAASE,eACvCX,EAAS,sBAAOA,GAAP,YAAqBO,QAGlCR,EAAkBC,KACjB,IACH,IAAIwK,EAAc,EAClB1K,GACEA,EAAgB8I,SAAQ,SAACnI,GACvBuG,EAAW4B,SAAQ,SAAC3L,GACdwD,EAASpB,KAAOpC,EAAEoC,IAAMoB,EAAS6H,SAAWrL,EAAEwF,YAChD+H,GAA4B,SAIpC,IAAMC,GAAYD,EAAc1K,EAAgBc,QAAS8J,QAAQ,GAC3DL,EAA+B,GAAvBM,WAAWF,GACzB,OACE,oCACE,kBAACzP,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACN,kBAACF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACN,yBAAKE,IAAKC,EAAQ,KAA+BF,IAAI,MAEvD,kBAACF,EAAA,EAAD,CAAKC,GAAG,KACN,wBAAIJ,UAAU,yBAAd,OAAuCiO,QAAvC,IAAuCA,OAAvC,EAAuCA,EAAY4B,OACnD,yBAAK7P,UAAU,6BACb,uBAAGA,UAAU,uCACb,uBAAGA,UAAU,eAAb,6BAEF,yBAAKA,UAAU,6BACb,uBAAGA,UAAU,kCACb,uBAAGA,UAAU,gCAAb,iBAEF,yBAAKA,UAAU,6BACb,uBAAGA,UAAU,0CACb,uBAAGA,UAAU,gCAAb,uBAMN,yBAAKA,UAAU,+BACb,yBAAKA,UAAU,UACb,yBAAKM,IAAKC,EAAQ,KAA8BF,IAAI,MAEtD,yBAAKL,UAAU,0BACb,wBAAIA,UAAU,oBAAd,mBACA,yBAAKA,UAAU,kCACb,yBACEA,UAAU,8FACVQ,MAAO,CACL+F,MAAO,QACPC,OAAQ,QACRsJ,OAAQ,cAGV,0BAAM9P,UAAU,oBAAhB,WACA,0BAAMA,UAAU,oBAAhB,YACA,0BAAMA,UAAU,iCACbyP,EADH,IACiB1K,EAAgBc,SAInC,yBACE7F,UAAU,oGACVQ,MAAO,CACL+F,MAAO,QACPC,OAAQ,QACRsJ,OAAQ,cAGV,0BAAM9P,UAAU,yCACbsP,IAIL,yBACEtP,UAAU,8FACVQ,MAAO,CACL+F,MAAO,QACPC,OAAQ,QACRsJ,OAAQ,cAGV,0BAAM9P,UAAU,oBAAhB,cACA,0BAAMA,UAAU,iCAAhB,SACA,0BAAMA,UAAU,4BAAhB,eAKR,yBAAKA,UAAU,QACb,4BACE,uBAAGA,UAAU,gCADf,gBAGA,yBAAKA,UAAU,6BACb,uBAAGA,UAAU,6BAAb,cACc,IACZ,0BAAMA,UAAU,wDAElB,uBAAGA,UAAU,kCAAb,aACa,IACX,0BAAMA,UAAU,2DAElB,uBAAGA,UAAU,kCAAb,aACY,0BAAMA,UAAU,oBAAhB,SAGd,yBAAKA,UAAU,oBACZ+E,GACCA,EAAgBpC,KACd,SAAC+C,EAAiC7C,GAChC,IAAMkN,EAAY9D,EAAW2B,MAAK,SAAC1L,GACjC,OACEA,EAAEoC,KAAOoB,EAASpB,IAClBpC,EAAEwF,YAAchC,EAAS6H,UAG7B,OACE,yBACEzK,IAAKD,EACL7C,UAAU,4BACVQ,MAAO,CAAE+F,MAAO,QAEhB,uBACEvG,UAAU,6FACVQ,MAAO,CAAE+F,MAAO,OAAQC,OAAQ,SAE/B3D,EAAQ,GAEX,uBAAG7C,UAAU,qCACD,OAAT+P,QAAS,IAATA,OAAA,EAAAA,EAAWrI,WAAX,OACGqI,QADH,IACGA,OADH,EACGA,EAAWrI,UACX,MAAO,KACR,IACL,uBAAG1H,UAAU,0BAAb,KACA,uBAAGA,UAAU,iDACV,IACA0F,EAAS6H,QAEZ,uBAAGvN,UAAU,QACV+P,EACC,uBAAG/P,UAAU,yCAEb,uBAAGA,UAAU,wDAUjC,kBAACG,EAAA,EAAD,CAAKC,GAAG,KACN,kBAAC,GAAD,SAIN,kBAAC,GAAD,CACE6N,WAAYA,EACZrJ,cAAeA,EACfsH,cAAeA,EACfD,WAAYA,MC5JL+D,GA9B6B,SAAC,GAAmB,IAAD,EAAhBC,EAAgB,EAAhBA,UAAgB,EACzBxN,IAAMC,SAAgB,IADG,mBACtDuJ,EADsD,KAC1CC,EAD0C,KAGrDgE,EAAWC,cAAXD,OACFjC,EAAU,OAAGgC,QAAH,IAAGA,OAAH,EAAGA,EAAWrC,MAAK,SAACwC,GAAD,OAAUA,EAAK9L,KAAO4L,KAEnD1Q,EAAQuG,cAERsK,EAAmB,OAAGpC,QAAH,IAAGA,GAAH,UAAGA,EAAYrJ,qBAAf,aAAG,EAA2B3J,QACjD2J,EAAa,OAAGyL,QAAH,IAAGA,OAAH,EAAGA,EAAqBlL,MAAK,SAACC,EAAGjK,GAAJ,OAAUiK,EAAEC,aAAelK,EAAEkK,gBAE7E,OACE,oCACI,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOiL,KAAI,UAAK9Q,EAAM8Q,KAAX,YACT,kBAAC,GAAD,CACE1L,cAAeA,EACfqH,WAAYA,EACZgC,WAAYA,EACZ/B,cAAeA,KAGnB,kBAAC,IAAD,CAAOoE,KAAI,UAAK9Q,EAAM8Q,OACpB,kBAAC,GAAD,CAAe1L,cAAeA,EAAeqJ,WAAYA,EAAYhC,WAAYA,EAAYC,cAAeA,Q,+YCzBxH,IAgEeqE,GAhEyB,SAAC,GAAwC,IAAtCvQ,EAAqC,EAArCA,UAAWwQ,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,SAAe,EAC5ChO,IAAMC,SAAS,QAD6B,mBACvEgO,EADuE,KAExEC,GAFwE,KAElD,CAC1BC,KAAM,EACNC,UAAU,EACVC,cAAeC,GACfC,iBAAkB,CAChBC,oBAAqB,oBAInBC,EAAwB,CAC5BN,MAAM,EACNC,UAAU,EACVC,cAAeK,GACfH,iBAAkB,CAChBC,oBAAqB,mBAOzB,OACE,mBACEjR,UAAWA,EACXoB,IAAKA,YAAF,KACWqP,EAAW,WAAa,QAI1BA,EAAW,OAAS,QAMnBC,IAcb,YAAC,KAAD,CACEhU,QAAS8T,EAAYG,EAAsBO,EAC3C1K,OAAQgK,EAAY,IAAM,IAC1BjK,MAAO,IACP/F,MAAO,CACH4Q,WAAY,GACZC,YAAa,QCwEVC,GAzH+B,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACvCC,EAAmBrB,cAAnBqB,eACFC,EAAUC,cAChB,IAAKF,EAEH,OADAC,EAAQ9L,KAAK,SACN,qCAET,IdmoEsCwD,EcnoEhC3J,EAAQuG,cAPkD,Gd0oE1BoD,EcloEU,CAC9CwI,UAAW,CACTrN,GAAIkN,IdioEKpI,YAA+EyB,GAAyB1B,IcnoE9G9N,EARyD,EAQzDA,KAMP,GAdgE,EAQnDuW,QAOX,OAAO,kBAAC,GAAD,MAGT,IAKiB,EALXC,EAAY,OAAGxW,QAAH,IAAGA,OAAH,EAAGA,EAAMyW,gBACvBC,EAAK,OAAG1W,QAAH,IAAGA,OAAH,EAAGA,EAAMyW,gBAAgBC,QAGlBA,GAAQA,EAAMC,MAAK,SAAC9P,EAAG+P,GAAJ,OAAU/P,EAAEsM,YAAc5N,EAAW6N,WAAmB,IAANwD,OAEnFF,EAAK,UAAGA,SAAH,aAAG,EAAOG,WAGjB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO5B,KAAI,UAAK9Q,EAAM8Q,KAAX,kBACT,kBAAC6B,GAAD,CAAWlC,UAAW8B,EAAOR,WAAYA,KAE3C,kBAAC,IAAD,CAAOjB,KAAI,UAAK9Q,EAAM8Q,OACpB,kBAACrQ,EAAA,EAAD,KACE,iCACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACN,kBAACF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACN,yBACEE,IAAKC,EAAQ,KACbF,IAAI,MAGR,kBAACF,EAAA,EAAD,CAAKC,GAAG,KACN,wBAAIJ,UAAU,yBAAd,OACG6R,QADH,IACGA,OADH,EACGA,EAAcO,kBAEjB,yBAAKpS,UAAU,6BACb,uBAAGA,UAAU,uCACb,uBAAGA,UAAU,eAAb,6BAEF,yBAAKA,UAAU,6BACb,uBAAGA,UAAU,kCACb,uBAAGA,UAAU,gCAAb,iBAIF,yBAAKA,UAAU,6BACb,uBAAGA,UAAU,0CACb,uBAAGA,UAAU,gCAAb,uBAMN,yBAAKA,UAAU,QACb,kBAACqS,EAAA,EAAD,CAAOC,YAAU,EAACtS,UAAU,eAC1B,+BACE,4BACE,wBAAIA,UAAU,oBAAd,UACA,wBAAIA,UAAU,oBACZ,uBAAGA,UAAU,sCADf,aAIA,wBAAIA,UAAU,oBACZ,uBAAGA,UAAU,wCADf,aAMJ,+BACE,4BACE,wBAAIuS,MAAM,OAAV,OAAiBV,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAcO,kBAC9BL,GACCA,EAAMpP,KAAI,SAACyN,GACT,OACE,wBAAIpQ,UAAU,oBACZ,kBAAC,IAAD,CACE6H,GAAE,UAAKrI,EAAMsI,IAAX,iBAAuBsI,EAAK9L,IAC9BtE,UAAS,6CACPoQ,EAAK5B,YAAc5N,EAAW4R,QAC1B,aACA,UAHG,sCAKThS,MAAO,CACLiS,eAAgB,SARpB,sBAsBlB,kBAACtS,EAAA,EAAD,CAAKC,GAAG,KACN,kBAAC,GAAD,a,ucCtHhB,IAoEesS,GApEmC,SAAC,GAAsB,IAApBb,EAAmB,EAAnBA,aAE7CrS,EAAQuG,cAEd4M,QAAQC,IAAIpT,GAEZ,IAAMqT,EAAgBC,KAAM,OAACjB,QAAD,IAACA,OAAD,EAACA,EAAckB,WAAWC,OAAO,cAC7D,OACE,YAAC,IAAD,CACEhT,UAAU,2BAOV6H,GAAI,UAAGrI,EAAMsI,IAAT,sBAA2B+J,QAA3B,IAA2BA,OAA3B,EAA2BA,EAAcvN,IAC7ClD,IAAKA,YAAF,OAQH,YAACW,EAAA,EAAD,CAAM/B,UAAU,wBACd,YAACoC,EAAA,EAAD,KACE,YAACC,EAAA,EAAD,CAAWrC,UAAU,QAArB,OACG6R,QADH,IACGA,OADH,EACGA,EAAcO,kBAEjB,YAACa,GAAA,EAAD,CAAcjT,UAAU,sCAAxB,OACG6R,QADH,IACGA,OADH,EACGA,EAAcqB,iBAEjB,mBACE9R,IAAKA,YAAF,OASH,mBAAKpB,UAAU,6BACb,iBAAGA,UAAU,uCACb,iBAAGA,UAAU,eAAb,iBAA0C6S,IAE5C,mBAAK7S,UAAU,6BACb,iBAAGA,UAAU,kCACb,iBAAGA,UAAU,gCAAb,iBAEF,mBAAKA,UAAU,6BACb,iBAAGA,UAAU,0CACb,iBAAGA,UAAU,gCAAb,sBAGJ,YAACkE,EAAA,EAAD,CACE/E,MAAO,UACPa,UAAU,4CAFZ,iBChBKmT,GAvCmC,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,eAE5C5T,EAAQuG,cACd,OACI,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOuK,KAAI,UAAK9Q,EAAMsI,IAAX,8BACT,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOwI,KAAI,UAAK9Q,EAAMsI,MACpB,kBAAC7H,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACN,6BAASJ,UAAU,QACjB,4BACE,uBAAGA,UAAU,qEADf,gBAIA,yBAAKA,UAAU,sCACZoT,GAAkBA,EAAezQ,KAAI,SAACkP,EAAchP,GACnD,OACE,kBAAC,GAAD,CAAcC,IAAKD,EAAOgP,aAAcA,SAKhD,kBAAC,EAAD,OAGF,kBAAC1R,EAAA,EAAD,CAAKC,GAAG,KACN,kBAAC,GAAD,Y,oBCjBCiT,GApBmC,SAAC,GAAQ,eACzD,IAAMhY,EAAO,CACT,CACIwU,MAAO,OACPyD,KAAM,SAEV,CACEzD,MAAO,QACPyD,KAAM,WAGZ,OACI,kBAACC,GAAA,EAAD,KACKlY,GAAQA,EAAKsH,KAAI,SAAC8E,EAAK5E,GACrB,OAAO,kBAAC2Q,GAAA,EAAD,CAAgB1Q,IAAKD,GAAO,kBAAC,IAAD,CAAMgF,GAAIJ,EAAI6L,MAAO7L,EAAIoI,aCjB5D4D,GAAe,SAACC,GAC3B,IAAIA,EAAM,MAAO,GACjB,IAAIC,EAAOD,EAgBX,OADAC,GADAA,GADAA,GADAA,GADAA,GADAA,GADAA,GADAA,GADAA,GADAA,GADAA,GADAA,GADAA,GADAA,GADAA,EAAOA,EAAKC,QAAQ,OAAQ,KAChBA,QAAQ,8BAA+B,KACvCA,QAAQ,gCAAiC,KACzCA,QAAQ,4CAA6C,YACrDA,QAAQ,YAAa,SACrBA,QAAQ,WAAY,OACpBA,QAAQ,YAAa,UACrBA,QAAQ,WAAY,SACpBA,QAAQ,UAAW,SACnBA,QAAQ,iBAAkB,OAC1BA,QAAQ,YAAa,KACrBA,QAAQ,UAAW,KACnBA,QAAQ,OAAQ,MAChBA,QAAQ,OAAQ,MAChBA,QAAQ,QAAS,SCUhBC,GArBQ,WAAO,InB+wEgB1K,EkBxxER2K,ECU5BlQ,EAASuM,cAATvM,KADmB,GnB+wEiBuF,EmB7wEU,CACpDwI,UAAW,CACTtW,KAAM,CACJ6X,iBDd8BY,ECcSlQ,EDbtCkQ,EAAOC,OAAO,GAAGC,cAAgBF,EAAO7Y,MAAM,OlBwxExCmO,YAA2F4B,GAA+B7B,ImB9wEhI9N,EAFoB,EAEpBA,KAOP,GAT2B,EAEduW,QAQX,OAAO,kBAAC,GAAD,MAET,IAAMwB,EAAc,OAAG/X,QAAH,IAAGA,OAAH,EAAGA,EAAM4Y,kBAAkBb,eAC/C,OACE,yBAAKpT,UAAU,iBACb,kBAAC,GAAD,MACA,kBAAC,GAAD,CAAcoT,eAAgBA,M,UC0ErBc,GA1FK,WAClB,IAAMC,EAAa1R,IAAM2R,OAAuB,MAC1CC,EAAqB,CACzBzD,MAAM,EACNC,UAAU,EACVC,cAAewD,GACftD,iBAAkB,CAChBC,oBAAqB,mBAmBzB,OAhBAxO,IAAM6C,WAAU,WACd,GAAIjG,OAAOkV,WAAa,IAAK,CAC3B,IAAMC,EAAe,WACnB,IAAIC,EAAkBpV,OAAOqV,YAAc,EACvCP,EAAWQ,UACbR,EAAWQ,QAAQnU,MAAMoU,UACvB,iBAAmBH,EAAkB,UAI3C,OADApV,OAAOwV,iBAAiB,SAAUL,GAC3B,WACLnV,OAAOyV,oBAAoB,SAAUN,QAMzC,oCACE,yBAAKxU,UAAU,2BAA2B+U,eAAa,UACrD,yBACE/U,UAAU,oBACVQ,MAAO,CACLC,gBACE,OAASF,EAAQ,KAAmC,KAExDyU,IAAKb,IAEP,kBAAClU,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEM,MAAO,CACL4Q,UAAW,SAGb,kBAACjR,EAAA,EAAD,CAAKH,UAAU,oBAAoBI,GAAG,KACpC,wBAAIJ,UAAU,SAAd,kBACA,wBAAIA,UAAU,eAAd,4aAMA,6BACA,yBAAKA,UAAU,kBACb,kBAACkE,EAAA,EAAD,CACElE,UAAU,8DACVb,MAAM,GACN6C,KAAK,SACLC,QAAS,SAACC,GAAD,OAAOA,EAAEC,kBAClBiC,KAAK,MALP,2BASA,kBAACF,EAAA,EAAD,CACElE,UAAU,sBACVb,MAAM,UACN6C,KAAK,SACLC,QAAS,SAACC,GAAD,OAAOA,EAAEC,kBAClBiC,KAAK,KACL5D,MAAO,CACL+F,MAAO,cACPH,UAAW,GACX6O,WAAY,SACZC,aAAc,KAGhB,qDACA,kBAAC,KAAD,CAAQxY,QAAS2X,EAAoB9N,MAAO,GAAIC,OAAQ,GAAIhG,MAAO,CACjE2U,OAAQ,UACR/D,WAAY,c,kDCrFnBgE,GAAoB,CAC/BC,UAAW,GACX/Q,GAAI,KACJgR,SAAU,GACVtR,KAAM,GACNuR,MAAO,GACPC,KAAMzU,EAAS0U,QAEJC,GAAYjT,IAAMkT,cAA0B,IAE5CC,GAAQ,WACnB,OAAOnT,IAAMoT,WAAWH,K,6ECoBXI,GAzB4B,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,QAAS/V,EAAuB,EAAvBA,UAAWQ,EAAY,EAAZA,MAChE,OAAKuV,EAKH,yBAAK/V,UAAS,kCAA6BA,GAAaQ,MAAOA,GAC7D,0BACEA,MAAO,CACL+F,MAAO,OACPC,OAAQ,OACRG,aAAc,OACdmJ,OAAQ,gBACRjT,QAAS,OACT4J,eAAgB,SAChBC,WAAY,WARhB,KAYQ,IACR,0BAAM1G,UAAU,eAAe+V,IAlB1B,sC,kBCRLC,G,WAWJ,aAAe,0BATRC,OAAS,CACZC,YAAa,GACbC,aAAc,IAQhBC,KAAKC,O,6DALiBC,GAA8B,IAAD,OACnDC,OAAOC,KAAKF,GAAO3T,KAAI,SAACG,GAAD,OAAW,EAAaA,GAAQwT,EAAcxT,U,6CAOxC,IAAD,EAI5B,OAHAsT,KAAKK,gBAAL,eACKC,KAAKC,MAAL,UAAWC,aAAaC,QAAQ,iBAAhC,QAA6C,QAE3CT,O,6BAIPQ,aAAaE,QAAQ,SAAUJ,KAAKK,UAAUX,W,KASnCY,GALW,WAAuB,IAAD,EACrBvU,IAAMC,SAAS,IAAIsT,IAC5C,OAF8C,qBCbjCiB,GAhBQ,SAAjBA,EAAqBC,GAA4C,IAApCC,EAAmC,uDAApB,aAChD,IAAK,IAAMC,KAAYF,EACrB,GAA6B,kBAAlBA,EAAIE,IAA4BF,EAAIE,aAAqBC,KAM9DD,IAAaD,UACRD,EAAIE,OAP4D,QAEjEF,EAAYE,SACpB,IAAME,EAAUL,EAAeC,EAAIE,GAAWD,GAC9CD,EAAIE,GAAYE,EAOpB,OAAOJ,GCWIK,GAAwC,SAAC,GAG/C,IzBs7FwBpO,EyBx7F7B7B,EAEI,EAFJA,OACAkQ,EACI,EADJA,UAEMC,EAAiBT,KADnB,EAE8BvU,IAAMC,UAAS,GAF7C,mBAEGgV,EAFH,KAEcC,EAFd,OAGsClV,IAAMC,UAAS,GAHrD,mBAGGkV,EAHH,KAGkBC,EAHlB,QzBs7FyB1O,EyBl7FmB,CAAE2O,YAAa,gBzBm7FhD1O,gBAAyD0C,GAAY3C,IyBv7FhF,mBAIG4O,EAJH,KAIYC,EAJZ,OzBg5FC,SAA0B7O,GACzB,OAAOC,eAAoEyC,GAAe1C,GyB54FxE8O,GAAjBC,EALH,sBAMwCzV,IAAMC,UAAS,GANvD,mBAMGyV,EANH,KAMmBC,EANnB,KAOJ3V,IAAM6C,WAAU,WAAO,IAAD,GACpB,UAAA0S,EAAc3c,YAAd,eAAoBgd,KAAML,EAAcM,SAAWN,EAAcM,YAChE,CAACN,EAAeA,EAAcpG,UACjC,IAAM2G,EAASC,aAAU,CACvBC,oBAAoB,EACpBC,iBAAkBP,EAClBQ,eAAgBR,EAChBS,cAAe,CACbrD,MAAO,GACPsD,SAAU,IAEZC,iBAAkBC,OAAaC,MAAM,CACnCzD,MAAOwD,OAAaE,OAAO1D,QAAQ2D,WACnCL,SAAUE,OAAaI,IAAI,GAAGD,aAEhCE,SAAS,WAAD,8BAAE,WAAOC,GAAP,4BAAAjU,EAAA,+EAEe8S,EAAc,CACjCvG,UAAW,CACT4D,MAAO8D,EAAO9D,MACdsD,SAAUQ,EAAOR,YALf,OAEAtL,EAFA,QAQN,UAAIA,EAAOlS,YAAX,aAAI,EAAaie,SACf9B,GAAU,GACVC,EAAexB,OAASgB,GAAc,UAAC1J,EAAOlS,YAAR,iBAAC,EAAaie,MAAMC,yBAApB,aAAC,EAAsCtD,QAC7EwB,EAAe+B,OACfzB,KAZI,oDAgBJ,KAAE0B,eACuC,kBAAzC,eAAEA,cAAc,UAAhB,mBAAoBC,kBAApB,eAAgCC,SADhC,UAEA,KAAEF,cAAc,GAAGC,WAAWE,iBAF9B,aAEA,EAAyCC,aAlBrC,oGAAF,mDAAC,KAyBX,OACE,kBAACxS,EAAA,EAAD,CACErH,UAAU,cACV2H,eAAe,cACfL,OAAQA,EACRC,OAAQ,kBAAMiQ,GAAU,KAExB,kBAACzV,EAAA,EAAD,CAAM/B,UAAU,wBAAwB8Z,wBAAsB,IAC5D,yBAAK9Z,UAAU,uCACb,4BACE+Z,eAAa,EACb/Z,UAAU,QACViC,QAAS,kBAAMuV,GAAU,IACzB5T,KAAK,UAEL,uBAAG5D,UAAU,qCAEf,yBAAKA,UAAU,kCACb,yBAAKA,UAAU,kBACb,yBAAKK,IAAI,MAAMC,IAAKC,EAAQ,UAIlC,yBAAKP,UAAU,cACb,kBAACga,GAAA,EAAD,CAAMC,OAAO,GAAGja,UAAU,OAAOka,OAAO,IACtC,kBAAC9X,EAAA,EAAD,KACE,kBAAC+X,GAAA,EAAD,KACE,kBAAC7W,EAAA,EAAD,CACEtD,UACE0X,EACI,uCACA,sBAGN,kBAACnU,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,KACE,uBAAGzD,UAAU,mCAGjB,kBAAC0D,EAAA,EAAD,CACEC,YAAY,QACZC,KAAK,OACLI,KAAK,QACLoW,SAAU7B,EAAO8B,aACjBvW,OAAQ,SAAC5B,GACPyV,GAAa,GACbY,EAAO+B,WAAWpY,IAEpB2B,QAAS,kBAAM8T,GAAa,OAIhC,kBAAC4C,GAAD,CAAcxE,QAASwC,EAAOiC,OAAOjF,SAEvC,kBAAC4E,GAAA,EAAD,KACE,kBAAC7W,EAAA,EAAD,CACEtD,UACE4X,EACI,uCACA,sBAGN,kBAACrU,EAAA,EAAD,CAAiBC,UAAU,WACzB,kBAACC,EAAA,EAAD,KACE,uBAAGzD,UAAU,yCAIjB,kBAAC0D,EAAA,EAAD,CACEC,YAAY,cACZC,KAAK,OACLI,KAAK,WACLoW,SAAU7B,EAAO8B,aACjBxW,QAAS,kBAAMgU,GAAiB,IAChC/T,OAAQ,SAAC5B,GACPqW,EAAO+B,WAAWpY,GAClB2V,GAAiB,OAKvB,kBAAC0C,GAAD,CAAcxE,QAASwC,EAAOiC,OAAO3B,eAK7C,kBAAC4B,GAAA,EAAD,CAAaza,UAAU,eACrB,kBAACkE,EAAA,EAAD,CACEC,OAAK,EACLnE,UAAU,uBACVb,MAAM,OACN6C,KAAK,SACLC,QAAS,SAACC,GACRA,EAAEC,iBACFoW,EAAOmC,aACPtC,GAAkB,IAEpBhU,KAAK,MAVP,a,UC3IGuW,GAAgBlY,IAAMkT,cAChC,IA8EYiF,GAfqD,SAAC,GAG9D,IAFLC,EAEI,EAFJA,WACA3Z,EACI,EADJA,SAEM4Z,EAhEuB,SAAC,GAEe,EAD7CD,WAC8C,IAAD,EACfpY,IAAMC,UAAS,GADA,mBACtCqY,EADsC,KAC7BC,EAD6B,OAEPvY,IAAMC,SAAUqY,EAAyB,qBAAf,cAFnB,mBAEtCE,EAFsC,KAEzBC,EAFyB,OAGbzY,IAAMC,SAAS,QAHF,mBAGtCyY,EAHsC,KAG5BC,EAH4B,OAIP3Y,IAAMC,SAAS,IAJR,mBAItC2Y,EAJsC,KAIzBC,EAJyB,OAKT7Y,IAAMC,UAAS,GALN,mBAKtC6Y,EALsC,KAK1BC,EAL0B,OAMD/Y,IAAMC,cAA8C+Y,GANnD,mBAMtCC,EANsC,KAMtBC,EANsB,OAO3BlZ,IAAMC,SAAS,GAPY,mBAOtCkZ,EAPsC,KAOnCC,EAPmC,OAQTpZ,IAAMC,SAAS,MARN,mBAQtCoZ,EARsC,KAQ1BC,EAR0B,KASvCC,EAAmB,SAAC9Z,GACxB,IAAM7C,EAAS6C,EAAE+Z,cACbL,EAAIvc,EAAO6c,QACXH,EAAc,MACPH,EAAIvc,EAAO6c,SAClBH,EAAc,QAElBF,EAAKxc,EAAO6c,UAuCd,OApCAzZ,IAAM0Z,SAAQ,WAIZ,OAHAnV,SAASoV,KAAKC,UAAUC,IAAI,oBAC5BtV,SAASuV,gBAAgBF,UAAUG,OAAO,YAC1Cnd,OAAOwV,iBAAiB,SAAUmH,GAC3B,WACLhV,SAASoV,KAAKC,UAAUG,OAAO,oBAC/Bnd,OAAOwV,iBAAiB,SAAUmH,MAEpC,CAACJ,IAEHnZ,IAAM0Z,SAAQ,WACO,OAAfL,GACFV,EAAY,QACZF,EAAe,IACfI,EAAe,MAEjBF,EAAY,OACVF,EAAe,GAAD,OAAIH,EAAU,gBAAkB,eAC9CO,EAAe,eAGhB,CAACQ,IACuC,CACzCb,cACAC,iBACAC,WACAC,cACAC,cACAC,iBACAC,aACAC,gBACAR,aACAD,UACAW,iBACAC,qBAS4Bc,CAAuB,CACnD5B,eAGF,OACE,kBAACF,GAAc+B,SAAf,CAAwBC,MAAO7B,GAC5B5Z,ICvEM0b,GAAsD,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,SAAU7c,EAAgB,EAAhBA,UAExE8c,EAAYD,EAAS5hB,QAAQkK,MAAK,SAACC,EAAGjK,GAAJ,OAAUiK,EAAEC,aAAelK,EAAEkK,gBACrE,OACE,kBAAC0X,GAAA,EAAD,CACE/c,UAAS,oFACsEA,IAG9E8c,EAAUna,KAAI,SAACqa,EAAUna,GACxB,OACE,kBAACoa,GAAA,EAAD,CACEna,IAAKD,EACLgF,GAAE,gBAAWmV,EAAS9J,gBAAgBgK,cAApC,YAAqDF,EAASG,UAAUD,cAAxE,YAAyFF,EAAS1J,MACpGhR,IAAK8a,IACLpd,UAAW,+BAEVgd,EAASK,cAAcrJ,oBA+FrBsJ,GApFiC,SAAC,GAAkB,EAAhBC,UAAiB,IAAD,EACb9a,IAAMoT,WAAW8E,IAA7DM,EADyD,EACzDA,YAAaF,EAD4C,EAC5CA,QAASY,EADmC,EACnCA,kBADmC,EAEzBlZ,IAAMC,UAAS,GAFU,mBAE1D8a,EAF0D,KAE5CC,EAF4C,OAGzCnS,GAA0B,CAChDqG,UAAW,CACTtW,KAAM,MAFHA,EAH0D,EAG1DA,KAAMuW,EAHoD,EAGpDA,QAKP8L,EAAU,OAAGriB,QAAH,IAAGA,OAAH,EAAGA,EAAMsiB,cAAcD,WAMvC,OAJAjb,IAAM6C,WAAU,YACbsM,GAAW+J,EAAkB+B,KAC7B,CAAC9L,IAEDA,EACM,kBAAC,GAAD,CAASpB,WAAS,IAIzB,oCACGgN,EACC,yBACElZ,GAAG,YACHrC,QAAS,WACP+E,SAASuV,gBAAgBF,UAAU9U,OAAO,YAC1CkW,GAAgB,MAGlB,KACJ,kBAACG,GAAA,EAAD,CACE5d,UAAS,eAAU+a,EAAU,GAAK,aAAzB,YAAyCE,GAClD4C,OAAO,MAEP,yBAAK7d,UAAU,oBAIb,4BACEA,UAAU,gCACViC,QAAS,WACP+E,SAASuV,gBAAgBF,UAAU9U,OAAO,YAC1CkW,GAAiBD,IAEnBM,gBAAeN,EACf5Z,KAAK,UAEL,0BAAM5D,UAAU,+BAChB,0BAAMA,UAAU,kCAChB,0BAAMA,UAAU,oCAGpB,kBAAC+M,GAAA,EAAD,CACE/M,UAAU,iCACVsH,OAAQkW,EACRO,QAAM,GAEN,kBAACC,GAAA,EAAD,CAAKD,QAAM,GAAX,OACGL,QADH,IACGA,OADH,EACGA,EAAY/a,KAAI,SAAC8E,EAAK5E,GAErB,OACE,kBAACob,GAAA,EAAD,CAAsBnb,IAAKD,EAAOqb,KAAG,GACnC,kBAACC,GAAA,EAAD,CACEC,QAAO3W,EAAI4W,gBACXlf,MAAM,UACN6C,KAAK,SACLkc,KAAG,EACHjc,QAAS,SAACC,GAAD,OAAOA,EAAEC,kBAClBnC,UAAU,6EAEV,uBAAGA,UAAU,oBAAoByH,EAAI4V,gBAEtC5V,EAAI4W,iBACH,kBAAC,GAAD,CAAmBxB,SAAUpV,EAAI4W,2BCxGxCC,GAA4B,SAAC,GAAmB,IAAjBte,EAAgB,EAAhBA,UAC1C,OACE,uBAAGgC,KAAK,KACN,yBACEhC,UAAWA,EACXM,IAAKC,EAAQ,KACbF,IAAI,WA4GGke,GAhGS,WAAO,IAAD,EACgC9b,IAAMoT,WAAW8E,IAArEU,EADoB,EACpBA,YAAaE,EADO,EACPA,WAAYC,EADL,EACKA,cAAeT,EADpB,EACoBA,QAE1C1C,EAAKzC,KACLnE,EAAUC,cACV8M,EAASC,6BACf,OACE,yBAAKze,UAAS,UAAK+a,EAAU,cAAgB,GAA/B,eACZ,kBAAC6C,GAAA,EAAD,CACE5d,UAAS,UAAKqb,EAAL,sCAA+CN,EAAuB,GAAb,aAElE,yBAAK/a,UAAU,aACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,qDACb,yBAAKA,UAAU,kCACb,kBAAC,GAAD,CAAMA,UAAU,eAChB,wBAAIA,UAAU,8BAAd,mBAEF,wBAAIA,UAAU,8BACZ,kBAACie,GAAA,EAAD,CAAsBC,KAAG,EAACle,UAAU,mBAClC,kBAACme,GAAA,EAAD,CACEhf,MAAM,UACN6C,KAAK,SACLkc,KAAG,EACHjc,QAAS,WACG,OAAVoW,EAAG/T,IAAekX,GAAc,IAElCxb,UAAU,0FAEV,uBAAGA,UAAU,oBACA,OAAVqY,EAAG/T,GAAc+T,EAAGrU,KAAO,kDAEnB,OAAVqU,EAAG/T,IACF,oCACE,kBAACyY,GAAA,EAAD,CACE/c,UAAS,6EAET,kBAACid,GAAA,EAAD,CACEpV,GAAG,WACH7H,UAAW,+BAFb,WAMA,kBAACid,GAAA,EAAD,CACEjd,UAAW,8BACXiC,QAAS,WACP2U,aAAa8H,QACbF,EAAOG,aACPlN,EAAQ9L,KAAK,WALjB,gBAgBZ,kBAAC,GAAD,CAAY2B,OAAQiU,EAAY/D,UAAWgE,QAgCnD,kBAAC,GAAD,Q,kHCxHN,IAsBeoD,GAtBuB,SAAC,GAA8B,IAAD,EAA3B1d,EAA2B,EAA3BA,SAAU2Z,EAAiB,EAAjBA,WAE7CxC,EAAE,UADUtM,KACC1Q,YAAX,aAAG,EAAcgd,GAKvB,OAJKA,IACHA,EAAKjD,IAIL,YAACM,GAAUgH,SAAX,CAAoBC,MAAOtE,GACzB,YAAC,GAAD,KACE,YAAC,GAAD,MACA,mBACEjX,IAAKA,YAAF,KACcyZ,EAAa,IAAM,UAGnC3Z,M,yWCdX,IAoPe2d,GApP+B,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACvCC,EAAW5O,cAAX4O,OACFC,EAAI,OAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAWlR,MAAK,SAACzS,GAAD,OAAOA,EAAEmJ,KAAOya,KACvClM,EAAgBC,KAAM,OAACkM,QAAD,IAACA,OAAD,EAACA,EAAMjM,WAAWC,OAAO,cACrD,OACE,YAAC,IAAMiM,SAAP,KACE,mBAAKjf,UAAU,sBACb,mBAAKA,UAAU,kBACb,YAACE,EAAA,EAAD,KACE,YAACC,EAAA,EAAD,CAAKH,UAAU,8BAA8BI,GAAG,KAC9C,kBAAIJ,UAAU,SAAd,OAAuBgf,QAAvB,IAAuBA,OAAvB,EAAuBA,EAAME,aAKnC,mBAAKlf,UAAU,UACb,mBACEA,UAAU,sCACVoB,IAAKA,YAAF,OAOH,YAAC8C,EAAA,EAAD,CACElE,UAAU,0BACVb,MAAM,UACNiF,KAAK,MAEL,iBAAGpE,UAAU,oBAEf,YAACkE,EAAA,EAAD,CACElE,UAAU,0BACVb,MAAM,WACNiF,KAAK,MAEL,iBAAGpE,UAAU,4BAEf,YAACkE,EAAA,EAAD,CAAQlE,UAAU,qBAAqBb,MAAM,SAASiF,KAAK,MACzD,iBAAGpE,UAAU,oBAGjB,mBACEA,UAAU,oBACVoB,IAAKA,YAAF,OAKH,mBACEd,IAAG,UAAKZ,EAAOE,YAAP,OAAoBof,QAApB,IAAoBA,OAApB,EAAoBA,EAAM5R,QAClC/M,IAAI,SACJL,UAAU,oBAKhB,mBAAKA,UAAU,WACb,YAACC,EAAA,EAAD,KACE,mBAAK+M,wBAAyB,CAAEC,OAAM,OAAE+R,QAAF,IAAEA,OAAF,EAAEA,EAAMld,WAC9C,sBAAK+Q,IAGP,YAAC5S,EAAA,EAAD,KACE,YAACC,EAAA,EAAD,KACE,YAACC,EAAA,EAAD,CAAKH,UAAU,kBAAkBI,GAAG,KAClC,YAACF,EAAA,EAAD,KACE,YAACC,EAAA,EAAD,CAAKC,GAAG,KACN,mBAAKJ,UAAU,aAAf,QACQ,IACN,qBAAOA,UAAU,yBAAjB,eAGA,qBAAOA,UAAU,yBAAjB,WACA,qBAAOA,UAAU,oBAAjB,YAGJ,YAACG,EAAA,EAAD,CAAKC,GAAG,KACN,YAAC8D,EAAA,EAAD,CACElE,UAAU,uBACVb,MAAM,SACN6C,KAAK,SACLC,QAAS,SAACC,GAAD,OAAOA,EAAEC,mBAElB,iBAAGnC,UAAU,kBANf,QAQA,YAACkE,EAAA,EAAD,CACElE,UAAU,uBACVb,MAAM,UACN6C,KAAK,SACLC,QAAS,SAACC,GAAD,OAAOA,EAAEC,mBAElB,iBAAGnC,UAAU,mBANf,QAQA,YAACkE,EAAA,EAAD,CACElE,UAAU,uBACVb,MAAM,WACN6C,KAAK,SACLC,QAAS,SAACC,GAAD,OAAOA,EAAEC,mBAElB,iBAAGnC,UAAU,2BANf,UAUJ,8B,kkBC9FhB,ICfImf,GD8IWC,GA/H2B,SAAC,GAAkC,IAAhCN,EAA+B,EAA/BA,UAAWO,EAAoB,EAApBA,cAChD7f,EAAQuG,cACNiV,EAAevY,IAAMoT,WAAW8E,IAAhCK,WAIR,OAHAvY,IAAM6C,WAAU,WACd0V,GAAW,KACV,IAED,uBAAShb,UAAU,gBAAgB8Z,wBAAsB,QACvD,YAAC7Z,EAAA,EAAD,KACE,YAACC,EAAA,EAAD,KACE,YAACC,EAAA,EAAD,CAAKH,UAAU,kBAAkBI,GAAG,MAClC,kBAAIJ,UAAU,SAAd,OAAuBqf,QAAvB,IAAuBA,OAAvB,EAAuBA,EAAehC,eACtC,YAACnd,EAAA,EAAD,KACG4e,GACCA,EAAUjZ,OAAS,GACnBiZ,EAAUnc,KAAI,SAACqc,EAAMnc,GACnB,IAAMyc,EAAcxM,KAAOkM,EAAKjM,WAAWC,OAAO,cAClD,OAAa,IAAVnQ,EACO,YAAC,IAAMoc,SAAP,KACN,YAAC9e,EAAA,EAAD,CAAKC,GAAG,KACJ,mBAAKJ,UAAU,cACb,YAAC,IAAD,CAAM6H,GAAE,UAAKrI,EAAMsI,IAAX,YAAkBkX,EAAK1a,KAC/B,mBACEjE,IAAI,MACJL,UAAU,mCACVM,IAAKZ,EAAOE,WAAaof,EAAK5R,WAKpC,YAACjN,EAAA,EAAD,CAAKC,GAAG,KACN,kBAAIJ,UAAU,8BACXgf,EAAKO,UAAUrM,iBAElB,YAAC7Q,EAAA,EAAD,CAAWC,IAAI,MACf,YAAC,IAAD,CAAMtC,UAAU,aAAa6H,GAAE,UAAKrI,EAAMsI,IAAX,YAAkBkX,EAAK1a,KAEjD0a,EAAKE,WAGV,YAAC,EAAD,CACE/d,MAAO,EACPnB,UAAU,+BAETyT,GAAauL,EAAKld,UAErB,iBAAG9B,UAAU,UAAb,KACK,IACH,iBACEgC,KAAK,SACLC,QAAS,SAACC,GAAD,OAAOA,EAAEC,mBAElB,qBAAI6c,EAAKQ,OAAOnK,UAAY,IAAM2J,EAAKQ,OAAOlK,WANlD,KAQI,oBAAMtV,UAAU,sBAAsBsf,MAMhD,YAACnf,EAAA,EAAD,CAAKH,UAAU,OAAOI,GAAG,KACvB,YAAC2B,EAAA,EAAD,CAAM/B,UAAU,wBACd,mBAAKA,UAAU,cACb,YAAC,IAAD,CACE6H,GAAE,UAAKrI,EAAMsI,IAAX,YAAkBkX,EAAK1a,IACzBtE,UAAU,gCACVoB,IAAKA,YAAF,OAOH,mBACEf,IAAI,MACJL,UAAU,cACVM,IAAKZ,EAAOE,WAAaof,EAAK5R,MAC9BhM,IAAKA,YAAF,UAST,YAACgB,EAAA,EAAD,KACE,kBAAIpC,UAAU,yBAAyBgf,EAAKO,UAAUrM,iBACtD,YAAC7Q,EAAA,EAAD,CAAWC,IAAI,KAAKtC,UAAU,cAAcgf,EAAKE,UACjD,YAAC,EAAD,CACE/d,MAAO,EACPnB,UAAU,uCAETyT,GAAauL,EAAKld,UAErB,YAACS,EAAA,EAAD,CAAYvC,UAAU,QACpB,mBAAKA,UAAU,UAMb,6BACK,IACH,iBACEgC,KAAK,SACLC,QAAS,SAACC,GAAD,OAAOA,EAAEC,mBAElB,qBAAI6c,EAAKQ,OAAOnK,UAAY,IAAM2J,EAAKQ,OAAOlK,WANlD,KAQI,oBAAMtV,UAAU,sBAAsBsf,kBEjFzDG,GAnCQ,WACrB,IAAMhO,EAAUC,cACVlS,EAAQuG,cACN2V,EAAmBjZ,IAAMoT,WAAW8E,IAApCe,eACApI,EAASnD,cAATmD,KACHA,GACH7B,EAAQ9L,KAAK,SAEf,IAAM0Z,EAAa,OAAG3D,QAAH,IAAGA,OAAH,EAAGA,EAAgB9N,MAAK,SAAC1L,GAAD,OAAOA,EAAEoR,OAASA,KARlC,EASWpK,GAAiB,CACrDyI,UAAW,CACTtW,KAAM,CACJqkB,YAAW,OAAEL,QAAF,IAAEA,OAAF,EAAEA,EAAe/a,OAHpBqb,EATa,EASnBtkB,KAAkBuW,EATC,EASDA,QAOpBkN,EAAS,OAAGa,QAAH,IAAGA,OAAH,EAAGA,EAAYC,SAASC,MAEvC,OAAIjO,EACK,kBAAC,GAAD,MAGP,oCACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOtB,KAAI,UAAK9Q,EAAMsI,IAAX,aACT,kBAAC,GAAD,CAAYgX,UAAWA,KAEzB,kBAAC,IAAD,CAAOxO,KAAM9Q,EAAMsI,KACjB,kBAAC,GAAD,CAAUgX,UAAWA,QCZhBgB,GAvBS,WACtB,IAAMtgB,EAAQuG,cACd,OACE,kBAAC,GAAD,CAAQ8U,YAAU,GAChB,yBAAK7a,UAAU,WACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOsQ,KAAI,UAAK9Q,EAAM8Q,KAAX,sBACT,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOA,KAAI,UAAK9Q,EAAM8Q,KAAX,sBACT,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOA,KAAM9Q,EAAM8Q,MACjB,kBAAC,GAAD,MACA,kBAAC,EAAD,SAIN,kBAAC,EAAD,Q,wCC2FSyP,GAnGe,SAAC,GAAQ,qBACTtd,IAAMC,UAAS,GADP,mBAC7B4E,EAD6B,KACrBkQ,EADqB,OAEI/U,IAAMC,UAAS,GAFnB,mBAE7Bsd,EAF6B,KAEfC,EAFe,OAGVxd,IAAMC,SAAS,eAHL,mBAGtBwd,GAHsB,WAI9BC,EAAgB1d,IAAM2R,OAA0B,MAwBtD,OACE,kBAACwJ,GAAA,EAAD,CAAQze,MAAO,QAAS0e,OAAO,KAAK7d,UAAW,6BAC7C,kBAACC,EAAA,EAAD,CAAWmgB,OAAK,GACd,yBAAKpgB,UAAU,kBACb,yBAAKA,UAAU,iBACb,4BACE4D,KAAK,SACLoR,IAAKmL,EACLngB,UAAU,iBACViC,QAAS,cAET,0BAAMjC,UAAU,4BAChB,0BAAMA,UAAU,4BAChB,0BAAMA,UAAU,8BAGpB,kBAACqgB,GAAA,EAAD,CAAare,KAAK,OAEpB,kBAACse,GAAA,EAAD,CAAere,QAzCN,WAEXie,EADE5Y,EACO,cAEA,SAEXkQ,GAAWlQ,KAoCL,0BAAMtH,UAAU,oCAChB,0BAAMA,UAAU,oCAChB,0BAAMA,UAAU,qCAElB,kBAAC+M,GAAA,EAAD,CAAUzF,OAAQA,EAAQyW,QAAM,EAAC/d,UAAU,uBACzC,8BACE,kBAACsD,EAAA,EAAD,CAAYtD,UAAU,aACpB,kBAAC0D,EAAA,EAAD,CAAOC,YAAY,cACnB,kBAACJ,EAAA,EAAD,CAAiBC,UAAU,UACzB,kBAACC,EAAA,EAAD,KACE,uBAAGzD,UAAU,oCAKrB,kBAACge,GAAA,EAAD,CAAKD,QAAM,GACT,kBAACwC,GAAA,EAAD,KACE,kBAAC,IAAD,CAAM1Y,GAAG,SAAS7H,UAAU,YAC1B,uBAAGA,UAAU,oCACb,2BACE,0BAAMA,UAAU,wBAAhB,YAIN,kBAACwgB,GAAA,EAAD,CAAUtC,KAAG,EAAC5W,OAAQ0Y,EAAczY,OAAQ,WAzDpD0Y,GAAiBD,KA0DP,kBAAC7B,GAAA,EAAD,CAAgBC,OAAK,EAACF,KAAG,GACvB,uBAAGle,UAAU,gCACb,2BACE,0BAAMA,UAAU,wBAAhB,kBAGJ,kBAAC+c,GAAA,EAAD,CAAc5e,OAAK,GACjB,kBAAC8e,GAAA,EAAD,CAAc3a,IAAI,KAAlB,UACA,kBAAC2a,GAAA,EAAD,CAAc3a,IAAI,KAAlB,kBACA,kBAAC2a,GAAA,EAAD,CAAc3a,IAAI,KAAlB,yBAGJ,kBAACie,GAAA,EAAD,KACE,kBAAC,IAAD,CAAM1Y,GAAG,SAAS7H,UAAU,YAC1B,uBAAGA,UAAU,iCACb,2BACE,0BAAMA,UAAU,wBAAhB,mBCnDHygB,GA9CkC,SAAC,GAI3C,IAHLC,EAGI,EAHJA,UACAN,EAEI,EAFJA,MACApgB,EACI,EADJA,UAGE,OACE,4BACEA,UAAW,UAAY0gB,EAAY,kBAAoB,IAA5C,WAAsD1gB,IAEjE,kBAACC,EAAA,EAAD,CAAWmgB,QAAOA,GAChB,6BACE,4BACE,4BACE,uBACEpe,KAAK,4BADP,kBAMF,4BACE,uBACEA,KAAK,iBADP,eASN,yBAAKhC,UAAU,aAAf,QACU,MAAO,IAAIwE,MAAOC,cAD5B,gBACwD,IACtD,uBACEzC,KAAK,gBACL2e,IAAI,uBAFN,qB,mDJ0CGC,G,oDApEb,WAAYtK,GAAgC,IAAD,+BACzC,cAAMA,IAORuK,QAAUpe,IAAMqe,YAR2B,E,iEAUrCC,UAAUC,SAASC,QAAQ,QAAU,GAAK7K,KAAKyK,QAAQlM,UACzDwK,GAAK,IAAI+B,KAAiB9K,KAAKyK,QAAQlM,QAAS,CAC9CwM,iBAAiB,EACjBC,iBAAiB,O,6CAKjBL,UAAUC,SAASC,QAAQ,QAAU,GACvC9B,GAAGkC,Y,+BAIL,OACE,yBAAKrhB,UAAU,WACb,yBAAKA,UAAU,QACb,uBACEgC,KAAK,UACLhC,UAAU,yBAEV,yBAAKA,UAAU,YACb,yBAAKM,IAAKghB,KAAMjhB,IAAI,iBAGxB,uBACE2B,KAAK,UACLhC,UAAU,2BAFZ,kBAOF,yBAAKA,UAAU,kBAAkBgV,IAAKoB,KAAKyK,SACzC,kBAAC7C,GAAA,EAAD,KACG5H,KAAKE,MAAMiL,OAAO5e,KAAI,SAAC6e,EAAiG1e,GACvH,OAAI0e,EAAKC,SAAiB,KAExB,wBACEzhB,UAAW,GACX8C,IAAKA,GAEL,kBAAC,IAAD,CACE+E,GAAI2Z,EAAKxjB,OAASwjB,EAAKlR,KACvBtQ,UAAU,WACV0hB,gBAAgB,UAEhB,uBAAG1hB,UAAW,gBAAkBwhB,EAAKG,OACrC,2BAAIH,EAAKxd,kB,GA1DPvB,IAAMmf,W,UKsHbC,G,oDAhHb,WAAYvL,GAAQ,IAAD,+BACjB,cAAMA,IACDwL,MAAQ,CACXC,QAAS,iBAEX,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,iBALF,E,2DAQU,aAAvB7L,KAAK0L,MAAMC,QACb3L,KAAK8L,SAAS,CAAEH,QAAS,kBAEzB3L,KAAK8L,SAAS,CAAEH,QAAS,e,+BAGnB,IAAD,OACP,OACE,yBAAK/hB,UAAU,gBACb,yBAAKA,UAAWoW,KAAK0L,MAAMC,SACzB,yBAAK9f,QAASmU,KAAK4L,aACjB,uBAAGhiB,UAAU,qBAEf,wBAAIA,UAAU,sBACZ,wBAAIA,UAAU,gBAAd,sBACA,wBAAIA,UAAU,oBACZ,yBAAKA,UAAU,4BACb,0BACEA,UACyB,WAAvBoW,KAAKE,MAAM6L,QACP,mCACA,4BAENC,aAAW,SACXngB,QAAS,WACP,EAAKqU,MAAM+L,iBAAiB,aAGhC,0BACEriB,UACyB,SAAvBoW,KAAKE,MAAM6L,QACP,iCACA,0BAENC,aAAW,OACXngB,QAAS,WACP,EAAKqU,MAAM+L,iBAAiB,WAGhC,0BACEriB,UACyB,UAAvBoW,KAAKE,MAAM6L,QACP,kCACA,2BAENC,aAAW,QACXngB,QAAS,WACP,EAAKqU,MAAM+L,iBAAiB,YAGhC,0BACEriB,UACyB,WAAvBoW,KAAKE,MAAM6L,QACP,mCACA,4BAENC,aAAW,SACXngB,QAAS,WACP,EAAKqU,MAAM+L,iBAAiB,aAGhC,0BACEriB,UACyB,QAAvBoW,KAAKE,MAAM6L,QACP,gCACA,yBAENC,aAAW,MACXngB,QAAS,WACP,EAAKqU,MAAM+L,iBAAiB,YAMpC,wBAAIriB,UAAU,oBACZ,uBACEgC,KAAK,wFACL+E,OAAO,SACP/G,UAAU,uCAHZ,WAOA,uBACEgC,KAAK,oFACL+E,OAAO,SACP/G,UAAU,uCAHZ,iBAOA,uBACEgC,KAAK,uGACLhC,UAAU,oCAFZ,yB,GAnGY4hB,a,wCCyWXU,G,2KAvUX,OACE,oCAUE,yBAAKtiB,UAAU,WACb,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKoiB,GAAI,GAAIniB,GAAI,GACf,kBAAC2B,EAAA,EAAD,CAAM/B,UAAU,cACd,kBAACwiB,GAAA,EAAD,KACE,wBAAIxiB,UAAU,iBAAd,gBACA,kBAACqC,EAAA,EAAD,CAAWC,IAAI,MAAf,oBACA,kBAAC2b,GAAA,EAAD,KACE,kBAACE,GAAA,EAAD,CACEne,UAAU,yCACVb,MAAM,WAEN,uBAAGa,UAAU,8BAEf,kBAAC+c,GAAA,EAAD,CAAc5e,OAAK,GACjB,kBAAC8e,GAAA,EAAD,eACA,kBAACA,GAAA,EAAD,uBACA,kBAACA,GAAA,EAAD,4BACA,kBAACA,GAAA,EAAD,CAAcjd,UAAU,eAAxB,kBAMN,kBAACoC,EAAA,EAAD,KACE,yBAAKpC,UAAU,cACb,kBAAC,QAAD,CACE3E,KAAMD,iCAA8BC,KACpCqB,QAAStB,iCAA8BsB,YAI7C,kBAAC6F,EAAA,EAAD,KACE,yBAAKvC,UAAU,SACb,uBAAGA,UAAU,qCADf,oBAON,kBAACG,EAAA,EAAD,CAAKoiB,GAAI,GAAIniB,GAAI,GACf,kBAAC2B,EAAA,EAAD,CAAM/B,UAAU,cACd,kBAACwiB,GAAA,EAAD,KACE,wBAAIxiB,UAAU,iBAAd,cACA,kBAACqC,EAAA,EAAD,CAAWC,IAAI,MAAf,gBACA,kBAAC2b,GAAA,EAAD,KACE,kBAACE,GAAA,EAAD,CACEne,UAAU,yCACVb,MAAM,WAEN,uBAAGa,UAAU,8BAEf,kBAAC+c,GAAA,EAAD,CAAc5e,OAAK,GACjB,kBAAC8e,GAAA,EAAD,eACA,kBAACA,GAAA,EAAD,uBACA,kBAACA,GAAA,EAAD,4BACA,kBAACA,GAAA,EAAD,CAAcjd,UAAU,eAAxB,kBAMN,kBAACoC,EAAA,EAAD,KACE,yBAAKpC,UAAU,cACb,kBAAC,QAAD,CACE3E,KAAMiD,6BAA0BjD,KAChCqB,QAAS4B,6BAA0B5B,YAIzC,kBAAC6F,EAAA,EAAD,KACE,yBAAKvC,UAAU,SACb,uBAAGA,UAAU,qCADf,oBAON,kBAACG,EAAA,EAAD,CAAKoiB,GAAI,GAAIniB,GAAI,GACf,kBAAC2B,EAAA,EAAD,CAAM/B,UAAU,cACd,kBAACwiB,GAAA,EAAD,KACE,wBAAIxiB,UAAU,iBAAd,oBACA,kBAACqC,EAAA,EAAD,CAAWC,IAAI,MAAf,yBAEF,kBAACF,EAAA,EAAD,KACE,yBAAKpC,UAAU,cACb,kBAAC,OAAD,CACE3E,KAAMkD,oCAAiClD,KACvCqB,QAAS6B,oCAAiC7B,YAIhD,kBAAC6F,EAAA,EAAD,KACE,yBAAKvC,UAAU,SACb,uBAAGA,UAAU,iCADf,oBAOR,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKoiB,GAAI,GAAIniB,GAAI,GACf,kBAAC2B,EAAA,EAAD,CAAM/B,UAAU,cACd,kBAACwiB,GAAA,EAAD,KACE,wBAAIxiB,UAAU,iBAAd,uBACA,kBAACqC,EAAA,EAAD,CAAWC,IAAI,MAAf,UAEF,kBAACF,EAAA,EAAD,KACE,yBAAKpC,UAAU,qCACb,kBAACqS,EAAA,EAAD,KACE,+BACE,4BACE,4BACE,kBAAC8H,GAAA,EAAD,CAAWsI,OAAK,GACd,kBAAChV,GAAA,EAAD,CAAOgV,OAAK,GACV,kBAAC/e,EAAA,EAAD,CAAOgf,gBAAc,EAAC9e,KAAK,aAC3B,0BAAM5D,UAAU,uBAItB,wBAAIA,UAAU,aAAd,iEAIA,wBAAIA,UAAU,yBACZ,kBAACkE,EAAA,EAAD,CACElE,UAAU,+CACVb,MAAM,OACNmF,GAAG,mBACHV,KAAK,UAEL,uBAAG5D,UAAU,mCAEf,kBAAC2iB,GAAA,EAAD,CACEC,MAAO,EACP7b,OAAO,oBAFT,aAMA,kBAAC7C,EAAA,EAAD,CACElE,UAAU,+CACVb,MAAM,SACNmF,GAAG,mBACHV,KAAK,UAEL,uBAAG5D,UAAU,qCAEf,kBAAC2iB,GAAA,EAAD,CACEC,MAAO,EACP7b,OAAO,oBAFT,YAQJ,4BACE,4BACE,kBAACoT,GAAA,EAAD,CAAWsI,OAAK,GACd,kBAAChV,GAAA,EAAD,CAAOgV,OAAK,GACV,kBAAC/e,EAAA,EAAD,CAAOE,KAAK,aACZ,0BAAM5D,UAAU,uBAItB,wBAAIA,UAAU,aAAd,iEAIA,wBAAIA,UAAU,yBACZ,kBAACkE,EAAA,EAAD,CACElE,UAAU,+CACVb,MAAM,OACNmF,GAAG,mBACHV,KAAK,UAEL,uBAAG5D,UAAU,mCAEf,kBAAC2iB,GAAA,EAAD,CACEC,MAAO,EACP7b,OAAO,oBAFT,aAMA,kBAAC7C,EAAA,EAAD,CACElE,UAAU,+CACVb,MAAM,SACNmF,GAAG,mBACHV,KAAK,UAEL,uBAAG5D,UAAU,qCAEf,kBAAC2iB,GAAA,EAAD,CACEC,MAAO,EACP7b,OAAO,oBAFT,YAQJ,4BACE,4BACE,kBAACoT,GAAA,EAAD,CAAWsI,OAAK,GACd,kBAAChV,GAAA,EAAD,CAAOgV,OAAK,GACV,kBAAC/e,EAAA,EAAD,CAAOgf,gBAAc,EAAC9e,KAAK,aAC3B,0BAAM5D,UAAU,uBAItB,wBAAIA,UAAU,aAAd,wHAKA,wBAAIA,UAAU,yBACZ,kBAACkE,EAAA,EAAD,CACElE,UAAU,+CACVb,MAAM,OACNmF,GAAG,mBACHV,KAAK,UAEL,uBAAG5D,UAAU,mCAEf,kBAAC2iB,GAAA,EAAD,CACEC,MAAO,EACP7b,OAAO,oBAFT,aAMA,kBAAC7C,EAAA,EAAD,CACElE,UAAU,+CACVb,MAAM,SACNmF,GAAG,mBACHV,KAAK,UAEL,uBAAG5D,UAAU,qCAEf,kBAAC2iB,GAAA,EAAD,CACEC,MAAO,EACP7b,OAAO,oBAFT,gBAYZ,kBAACxE,EAAA,EAAD,KACE,6BACA,yBAAKvC,UAAU,SACb,uBAAGA,UAAU,qCADf,6BAON,kBAACG,EAAA,EAAD,CAAKoiB,GAAI,GAAIniB,GAAI,GACf,kBAAC2B,EAAA,EAAD,KACE,kBAACygB,GAAA,EAAD,KACE,wBAAIxiB,UAAU,iBAAd,oBACA,kBAACqC,EAAA,EAAD,CAAWC,IAAI,MAAf,oBAEF,kBAACF,EAAA,EAAD,KACE,kBAACiQ,EAAA,EAAD,CAAO/U,YAAU,GACf,2BAAO0C,UAAU,gBACf,4BACE,oCACA,uCACA,oCACA,wBAAIA,UAAU,cAAd,YAGJ,+BACE,4BACE,2CACA,qCACA,4CACA,wBAAIA,UAAU,cAAd,YAEF,4BACE,8CACA,0CACA,2CACA,wBAAIA,UAAU,cAAd,YAEF,4BACE,8CACA,2CACA,uCACA,wBAAIA,UAAU,cAAd,YAEF,4BACE,4CACA,sCACA,yDACA,wBAAIA,UAAU,cAAd,YAEF,4BACE,4CACA,qCACA,0CACA,wBAAIA,UAAU,cAAd,wB,GA3TAyC,IAAMmf,W,gIC5C9B,IAkBeiB,GAlBiC,SAAC,GAI1C,IAHL3hB,EAGI,EAHJA,SACAlB,EAEI,EAFJA,UAEI,IADJwG,cACI,MADK,MACL,EACJ,OACE,mBACExG,UAAS,wEAAmEA,GAC5EoB,IAAKA,YAAF,KACoB,SAAXoF,EAAoBA,EAASA,EAAS,OAIjDtF,I,mBCnBM4hB,GAAkB,SAC7B9e,GAII,IAHJiW,EAGG,uDAHM,UACTrW,EAEG,uDAFI,UACPlH,EACG,uDADO,GAEJqmB,EAAsC,2BACvCrmB,GADuC,IAE1CmT,MAAO,WACPkG,QAAQ,UAAD,OAAYkE,EAAZ,YAAsBjW,EAAtB,YACPJ,KAAMA,EACNof,OAAQ,MACRC,UAAW,YACXC,YAAa,CAAC,WAAY,UAC1BC,aAAc,CAAC,WAAY,WAC3BC,QAAS,CACPC,SAAU,IACVC,cAAc,KAGlB,OAAOP,G,mBCmBOQ,GAhC0C,SAAC,GAAsD,IAArDC,EAAoD,EAApDA,eAAgBC,EAAoC,EAApCA,aAAcjd,EAAsB,EAAtBA,OAAW8P,EAAW,2DAG3G,OACE,kBAAC,KAAD,eACEoN,OAAO,mDACPC,aAAa,mDACbC,KAAM,CACJpd,OAAQA,GAAU,IAClBqd,SAAS,EACTC,QAAS,CACP,iEACA,6CACA,wDAEFC,QACE,4SAOJP,eAAgBA,EAChBC,aAAcA,GAGVnN,KCJA0N,GAA4B,CACvC,CACErH,MAAO,GACP5gB,MAAO,sBAET,CACE4gB,MAAOhc,EAAuBsjB,MAC9BloB,MAAO4E,EAAuBsjB,OAEhC,CACEtH,MAAOhc,EAAuBujB,MAC9BnoB,MAAO4E,EAAuBujB,OAEhC,CACEvH,MAAOhc,EAAuBwjB,WAC9BpoB,MAAO,yCAET,CACE4gB,MAAOhc,EAAuByjB,aAC9BroB,MAAO,qCAET,CACE4gB,MAAOhc,EAAuB0jB,KAC9BtoB,MAAO,oBAET,CACE4gB,MAAOhc,EAAuB2jB,QAC9BvoB,MAAO,0BAIEwoB,GAAoB,CAC/B,CACE5H,MAAO,GACP5gB,MAAO,uBAET,CACE4gB,MAAO/b,EAAW4R,QAClBzW,MAAO6E,EAAW4R,SAEpB,CACEmK,MAAO/b,EAAW6N,UAClB1S,MAAO6E,EAAW6N,YAyMP+V,GArM0C,WAAO,IACtDrW,EAAWgC,cAAXhC,OACJ4U,EAAeD,GAAgB,QAC/B3U,IACF4U,EAAeD,GAAgB,OAAQ,YAJoB,I1Co3C3B3Z,E0Cp3C2B,EAMH1G,IAAMC,SAC9DshB,GAA0B,IAPiC,mBAMtDS,EANsD,KAM/BC,EAN+B,OASfjiB,IAAMC,SAClD6hB,GAAkB,IAVyC,mBAStDI,EATsD,KASrCC,EATqC,KAYzDhM,EAA8B,CAChC5J,SAAU,GACV7B,YAAa,GACb+F,gBAAiB8Q,GAA0B,GACxCrH,MACHnO,UAAW+V,GAAkB,GAAG5H,OAjB2B,E1Cq3C9CvT,gBAAmEI,GAAiBL,G0Cr3CtC,mBAmBtD0b,EAnBsD,KAmBxCC,EAnBwC,KA+B7D,GAVAriB,IAAM6C,WAAU,WACT6I,GAGL0W,EAAa,CACXlT,UAAW,CACTrN,GAAI6J,OAGP,CAACA,IACA2W,EAAgBzpB,KAAM,CAAC,IAAD,EACQypB,EAAgBzpB,KAAK+S,KAA9B/S,GADC,EAChB0pB,WADgB,gCAExBnM,EAAgBvd,EAElBoH,IAAM6C,WAAU,WACVwf,EAAgBzpB,OAClBkpB,GAAkB3W,MAAK,SAAC4T,EAAM1e,GACxB0e,EAAK7E,QAAU/D,EAAcpK,WAC/BoW,EAAmBL,GAAkBzhB,OAGzCkhB,GAA0BpW,MAAK,SAAC4T,EAAM1e,GAChC0e,EAAK7E,QAAU/D,EAAc1F,iBAC/BwR,EAAyBV,GAA0BlhB,UAIxD,CAACgiB,IAhDyD,M1C60CxD,SAA+B3b,GAC9B,OAAOC,eAA8EG,GAAoBJ,G0C7xC1F6b,GAAdC,EAjDsD,sB1C4+CxD,SAA+B9b,GAC9B,OAAOC,eAA8EO,GAAoBR,G0C37C1F+b,GAAdC,EAlDsD,sBAmDjB1iB,IAAMC,UAAS,GAnDE,mBAmDtDyV,EAnDsD,KAmDtCC,EAnDsC,KAoDvDG,EAASC,aAAU,CACvBC,oBAAoB,EACpBC,iBAAkBP,EAClBQ,eAAgBR,EAChBS,cAAeA,EACfE,iBAAkBC,OAAaC,MAAM,CACnChK,SAAU+J,OAAaG,SAAS,iCAChC/L,YAAa4L,OAAaG,SAAS,mCACnChG,gBAAiB6F,OAEdG,SAAS,wCACZ1K,UAAWuK,OAAaG,SAAS,oCAEnCE,SAAS,WAAD,8BAAE,WAAOC,GAAP,sBAAAjU,EAAA,0DACJ+I,EADI,gCAEegX,EAAW,CAC9BxT,UAAW,CACTtW,KAAMge,KAJJ,OAEA9L,EAFA,QAON,UAAIA,EAAOlS,YAAX,aAAI,EAAa8pB,cACfC,QAAMC,gBAAgBtC,GACtB+B,EAAgBxM,SAAWwM,EAAgBxM,WATvC,uCAYe2M,EAAW,CAC9BtT,UAAW,CACTtW,KAAMge,KAdJ,OAYA9L,EAZA,QAiBN,UAAIA,EAAOlS,YAAX,aAAI,EAAa4pB,cACfG,QAAMC,gBAAgBtC,GACtBxK,EAAO+M,aAnBH,4CAAF,mDAAC,KA0BX,OACE,oCACE,kBAACtL,GAAA,EAAD,CAAMZ,SAAUb,EAAOgN,cACrB,kBAACrlB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC4B,EAAA,EAAD,KACE,kBAACygB,GAAA,EAAD,CAAYxiB,UAAU,qDACpB,wBAAIA,UAAU,SAAUmO,EAAyB,cAAhB,eACjC,6BACE,kBAACjK,EAAA,EAAD,CACEN,KAAK,SACL5D,UAAU,mCACViC,QAAS,WACPsW,EAAOmC,aACPtC,GAAkB,KALtB,UAUA,kBAAC,IAAD,CACEvQ,GAAE,oBACF7H,UAAU,0CAFZ,YAQJ,kBAACoC,EAAA,EAAD,KACE,kBAAClC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKH,UAAU,OAAOI,GAAG,KACvB,kBAAC+Z,GAAA,EAAD,KACE,4CACA,kBAACzW,EAAA,EAAD,CACEC,YAAY,YACZK,KAAK,WACLJ,KAAK,OACLwW,SAAU7B,EAAO8B,aACjBvW,OAAQyU,EAAO+B,WACfqC,MAAOpE,EAAOc,OAAOrK,SACrBhP,UAAWuY,EAAOiC,OAAOxL,UAAY,gBAGvC,kBAACuL,GAAD,CAAcxE,QAASwC,EAAOiC,OAAOxL,aAGzC,kBAAC7O,EAAA,EAAD,CAAKC,GAAG,IAAIJ,UAAU,QACpB,kBAACma,GAAA,EAAD,KACE,+CACA,kBAAC,KAAD,CACEna,UAAU,oCACVoa,SAAU,SAACoL,GACTd,EAAyBc,GACzBjN,EAAOkN,cAAc,kBAAmBD,EAAI7I,QAE9CA,MAAO8H,EACPiB,gBAAgB,eAChB/hB,YAAY,qBACZK,KAAK,kBACLtH,QAASsnB,KAEX,kBAACzJ,GAAD,CAAcxE,QAASwC,EAAOiC,OAAOtH,oBAGzC,kBAAC/S,EAAA,EAAD,CAAKC,GAAG,IAAIJ,UAAU,QACpB,kBAACma,GAAA,EAAD,KACE,wCACA,kBAAC,KAAD,CACEna,UAAU,oCACVoa,SAAU,SAACoL,GACTZ,EAAmBY,GACnBjN,EAAOkN,cAAc,YAAaD,EAAI7I,QAExC+I,gBAAgB,eAChB/hB,YAAY,gBACZgZ,MAAOgI,EACP3gB,KAAK,YACLtH,QAAS6nB,KAEX,kBAAChK,GAAD,CAAcxE,QAASwC,EAAOiC,OAAOhM,eAI3C,kBAACtO,EAAA,EAAD,CAAKF,UAAU,QACb,kBAACG,EAAA,EAAD,CAAKH,UAAU,OAAOI,GAAG,KACvB,kBAAC+Z,GAAA,EAAD,KACE,8CACA,kBAAC,GAAD,CACEsJ,aAAa,cACbD,eAAgB,SAACthB,GACfqW,EAAOkN,cAAc,cAAevjB,IAEtCya,MAAOpE,EAAOc,OAAOlM,cAEvB,kBAACoN,GAAD,CAAcxE,QAASwC,EAAOiC,OAAOrN,wB,+BC5K5CwY,I,OA1EiC,SAAC,GAQ1C,IAPL/hB,EAOI,EAPJA,KACAkE,EAMI,EANJA,IACA8d,EAKI,EALJA,YACAC,EAII,EAJJA,QAII,IAHJC,qBAGI,SAFJC,EAEI,EAFJA,mBACAzV,EACI,EADJA,KACI,EAC0B7N,IAAMC,UAAS,GADzC,mBACGkP,EADH,KACYoU,EADZ,OAEkCvjB,IAAMC,SAAS,IAFjD,mBAEGujB,EAFH,KAEgBC,EAFhB,KAGJzjB,IAAM6C,WAAU,WACdwC,GAAOoe,EAAepe,KACrB,CAACA,IACJ,IAAMqe,EAAiB,yCAAG,WAAOjkB,EAAQkkB,GAAf,gBAAAhhB,EAAA,6DAClB/J,EAAO,IAAIgrB,UACZC,OAAO,OAAQpkB,EAAE,IACtB7G,EAAKirB,OAAO,OAAQpkB,EAAE,GAAG8B,MACzB3I,EAAKirB,OAAO,OAAQpkB,EAAE,GAAG0B,MACzBvI,EAAKirB,OAAO,aAAc1iB,EAAKsZ,eAC/B8I,GAAW,GANa,SAQlBO,MAAM7mB,EAAOG,aAAe,QAAS,CACzCqa,OAAQ,OACRkC,KAAM/gB,EACNmrB,YAAa,cACbC,QAAS,CACPC,OAAQ,sBAETC,MAAK,SAACC,GAAD,OACNA,EAASC,OAAOF,MAAK,SAACG,GAChBA,EAAIC,UACNf,GAAW,GACXH,GAAWA,EAAQiB,EAAIzrB,KAAKiV,MAC5B4V,EAAexmB,EAAOE,WAAaknB,EAAIzrB,KAAKiV,aApB1B,2CAAH,wDA0BvB,OACE,yBAAKtQ,UAAU,yCACb,kBAAC,KAAD,CACEA,UAAS,wBAAmB+lB,GAC5BiB,UAAU,EACVC,WAAU,UAAK3W,GAAQxI,EAAM,OAAS,iBACtCsS,SAAU,SAAClY,EAAGkkB,GACZD,EAAkBjkB,EAAGkkB,IAEvBc,aAAc,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,SAC/CC,YAAa,QACbvB,YAAaA,IAEdE,GAAiB,kBAAC,IAAM7G,SAAP,KACfrN,GAAW,kBAACwV,GAAA,EAAD,CAASjoB,MAAM,aACzByS,GAAWqU,GACX,yBAAKjmB,UAAU,iCACb,yBAAKA,UAAU,MAAMM,IAAK2lB,EAAa5lB,IAAI,KAC3C,0BACEL,UAAU,oBACViC,QAAS,WACPikB,EAAe,IACfL,GAAWA,EAAQ,MAJvB,UC5CCwB,GAAkB5kB,IAAMkT,cAAgC,IAgDtD2R,GANyD,SAAC,GAAmC,IAAjCpmB,EAAgC,EAAhCA,SACjEqmB,EAzCkB,SAAC,GAEyB,IADlDrU,EACiD,EADjDA,gBACiD,EACM9I,KADN,mBAC1Cod,EAD0C,KACtBC,EADsB,OAErBhlB,IAAMC,SAAS,IAFM,mBAE1CyL,EAF0C,KAElCuZ,EAFkC,OAGXjlB,IAAMC,UAAS,GAHJ,mBAG1CilB,EAH0C,KAG7BC,EAH6B,OAIiBnlB,IAAMC,UAAS,GAJhC,mBAI1CmlB,EAJ0C,KAIfC,EAJe,OAKGrlB,IAAMC,UAAS,GALlB,mBAK1CqlB,EAL0C,KAKtBC,EALsB,OAMGvlB,IAAMC,UAAS,GANlB,mBAM1CulB,EAN0C,KAMtBC,EANsB,OAOmBzlB,IAAMC,UAAS,GAPlC,mBAO1CylB,EAP0C,KAOdC,EAPc,OAQH3lB,IAAMC,SAAS,IARZ,mBAQ1C2lB,EAR0C,KAQzBC,EARyB,OASnB7lB,IAAMC,WATa,mBAS1C6lB,EAT0C,KASjCC,EATiC,KAmCjD,OAzBA/lB,IAAM6C,WAAU,YACXuiB,GAA6BS,EAAmB,MACnD,CAACT,IAEuC,CACtCD,iBACAD,cACAzU,kBACA2U,4BACAC,+BACA3Z,SACAuZ,YACAW,kBACAC,qBACAP,qBACAC,wBACAO,UACAC,aACAhB,qBACAC,2BACAQ,qBACAC,wBACAC,6BACAC,iCAM4BK,CAAoB,CAAEvV,gBADiD,EAAtBA,kBAGjF,OAAO,kBAACmU,GAAgB3K,SAAjB,CAA0BC,MAAO4K,GAA0BrmB,ICpEzDwnB,GAAsC,SAAC,GAG3C,IAFLzmB,EAEI,EAFJA,QACA0R,EACI,EADJA,KAEA,OACE,6BACE,kBAACzP,EAAA,EAAD,CACElE,UAAU,0BACVb,MAAM,UACNiF,KAAK,KACLR,KAAK,SACL3B,QAAS,WACPA,GAAWA,MAGb,uBAAGjC,UAAU,kCAEf,0BAAMA,UAAU,4BAA4B2T,GAAI,SC+BzCgV,GA7CiC,SAAC,GAK1C,IAJLrhB,EAII,EAJJA,OACAshB,EAGI,EAHJA,SACAhX,EAEI,EAFJA,QACAiX,EACI,EADJA,QAEA,OACE,kBAACxhB,EAAA,EAAD,CACErH,UAAU,cACV2H,eAAe,cACfL,OAAQA,EACRM,UAAQ,EACRL,OAAQ,kBAAMshB,GAAWA,GAAQ,KAEjC,yBAAK7oB,UAAU,uCACb,4BACE+Z,eAAa,EACb/Z,UAAU,QACViC,QAAS,kBAAM4mB,GAAWA,GAAQ,IAClCjlB,KAAK,UAEL,uBAAG5D,UAAU,qCAEf,yBAAKA,UAAU,kCAAf,kBAEF,yBAAKA,UAAU,eACf,kBAACya,GAAA,EAAD,CAAaza,UAAU,eACrB,kBAACkE,EAAA,EAAD,CACElE,UAAU,6BACVb,MAAM,OACN8C,QAAS,WACP2mB,IACAC,GAAWA,GAAQ,IAErBjlB,KAAK,SACLQ,KAAK,KACL0kB,SAAUlX,GAETA,EAAU,aAAe,aCMhCmX,GAAe,CACjB,CACEpM,MAAO,IACP5gB,MAAO,eAGLitB,GAA6B,CACjC,CACEthB,UAAW,IACX8F,cAAe,IAEjB,CACE9F,UAAW,IACX8F,cAAe,IAEjB,CACE9F,UAAW,IACX8F,cAAe,IAEjB,CACE9F,UAAW,IACX8F,cAAe,KAGbyb,GAAkE,SAAC,GAMlE,IAAD,EALJC,EAKI,EALJA,MACA1a,EAII,EAJJA,UACA2a,EAGI,EAHJA,sBACAC,EAEI,EAFJA,qBACAC,EACI,EADJA,YACI,EACoB5mB,IAAMC,SAAwB,MADlD,mBACG4N,EADH,KACSuV,EADT,OAE8CpjB,IAAMC,UAAS,GAF7D,mBAEG4mB,EAFH,KAEsBC,EAFtB,OAMAtf,KANA,mBAIFuf,EAJE,KAKFC,EALE,OAQ4BhnB,IAAMC,SAAS,IAR3C,mBAQGgnB,EARH,KAQaC,EARb,KAgBEC,EAAgC,CACpC,CACEliB,UAAW,IACX8F,cAAe,IAEjB,CACE9F,UAAW,IACX8F,cAAe,IAEjB,CACE9F,UAAW,IACX8F,cAAe,IAEjB,CACE9F,UAAW,IACX8F,cAAe,KAGbqc,EAAkBpnB,IAAMoT,WAAWwR,IAEzC5kB,IAAM6C,WAAU,WACdiT,GAAOkN,cAAc,QAASnV,KAC7B,CAACA,IAtCA,IAwCI5C,EAAeyC,cAAfzC,WAxCJ,EAyCyCjL,IAAMC,SAASknB,GAzCxD,mBAyCGE,EAzCH,KAyCoBC,EAzCpB,KA2CAhH,EAAeD,GAAgB,YAC7BkH,EAAkBtc,GAEpBmc,EAAgBxB,gBAChB2B,IACFjH,EAAeD,GAAgB,WAAY,YAhDzC,I/Cy5C+B3Z,E+Cz5C/B,EAmDsD1G,IAAMC,SAC9DshB,GAA0B,IApDxB,mBAmDGS,EAnDH,KAmD0BC,EAnD1B,OAsD0CjiB,IAAMC,SAClD6hB,GAAkB,IAvDhB,oBAsDGI,GAtDH,MAsDoBC,GAtDpB,SA0DgCniB,IAAMC,SAASqmB,GAAa,IA1D5D,qBA0DGkB,GA1DH,MA0DeC,GA1Df,S/C05CW9gB,gBAAqEK,GAAkBN,G+C15ClG,qBA2DGghB,GA3DH,MA4DE7b,GAAK,UA5DP,MA4DwBjT,YAAjB,aAAG,EAAoB+uB,SAAS9b,MAC3C7L,IAAM6C,WAAU,WACd6kB,GAAW,CACTxY,UAAW,CACTtW,KAAM,CACJ6X,gBAAiBuR,EAAsB9H,UAI7CoM,GAAe,CACb,CACEpM,MAAO,IACP5gB,MAAO,eAGPuS,IACFA,GACG+b,QAAO,SAACjc,GAAD,OAAUA,EAAKI,YAAcmW,GAAgBhI,SACpDha,KAAI,SAACyL,GACJ,IAAMkc,EAAa,CACjB3N,MAAOvO,EAAK9J,GACZvI,MAAOqS,EAAKY,UAGd,OADA+Z,GAAY,sBAAOA,IAAP,CAAqBuB,IAC1Blc,OAGZ,CAACqW,EAAuBE,GAAiBrW,KAE5C,IAAIsK,GAAkC,CACpCpM,aAAc,GACdU,aAAc,GACdT,SAAU,EACV8d,WAAY,EACZC,aAAc3pB,EAAa4pB,aAC3B3oB,QAAS,GACTuL,QAAS2b,GACT9V,gBAAiB2W,EAAgB3W,gBACjC1E,UAAWA,GAEN+V,GAAkB,GAAG5H,MAC1BpP,OAAQ,GACRH,MAAO,GACPD,YAAa,GACb+C,OAAM,OAAEiZ,QAAF,IAAEA,OAAF,EAAEA,EAAuBjZ,OAC/B/B,OAAM,OAAEgb,QAAF,IAAEA,OAAF,EAAEA,EAAuBhb,OAC/B5B,kBAAmB,IA1GjB,GA4G0C9J,IAAMC,SAClDkW,GAAcrL,QA7GZ,qBA4GGmd,GA5GH,MA4GoBC,GA5GpB,S/C6nDC,SAAiCxhB,GAC9B,OAAOC,gBAA2EU,GAAqBX,G+C/gDhEyhB,GA/G3C,qBA+GGC,GA/GH,MA+GqBC,GA/GrB,MAiHJroB,IAAM6C,WAAU,WACT0kB,GAGLa,GAAiB,CACflZ,UAAW,CACTrN,GAAI0lB,OAGP,CAACA,IAGJvnB,IAAM6C,WAAU,WAAO,IAAD,GACpB,UAAAmkB,EAA6BpuB,YAA7B,eAAmC0vB,iBACjC3B,GACAA,MACD,CAACK,EAA6B7X,UAjI7B,IA8IAvE,GACA2d,GA/IA,GAmI4CvoB,IAAMC,SAEpD,IArIE,qBAmIGuoB,GAnIH,MAmIqBC,GAnIrB,MAsIEC,GAA4B,SAAC7mB,IAC7BoJ,GAAcwb,KAChBK,GAAqB,GACrBjlB,GAAMqlB,EAAYrlB,IAEpB4mB,GAAoB,YAAID,GAAiBZ,QAAO,SAACjlB,GAAD,OAAOA,EAAEd,KAAOA,QAE9D8mB,GAAqB,GAGzB,GAAIN,GAAmBzvB,KAAM,CAAC,IAAD,GAOvByvB,GAAmBzvB,KAAKqK,SAJ1BE,IAHyB,GAEzBmf,WAFyB,GAGzBnf,gBACAylB,GAJyB,GAIzBA,mBACAC,GALyB,GAKzBA,QACGjwB,GANsB,gFAQ3B2vB,GAAY,2BAAQ3vB,IAAR,IAAcuK,kBAAgBylB,sBAAoBC,aAE9Dje,GAAUhS,GAAKgS,QAAQ1K,KAAI,SAAC4oB,GACYA,EAA9BxG,WACR,OAFqC,aACCwG,EADD,mBAIvCH,GAAa1rB,EAAOE,WAAavE,GAAK+R,MAEtCwL,GAAa,2BACRvd,IADQ,IAEXgS,aAGJ5K,IAAM0Z,SAAQ,WAAO,IAAD,EAClB,aAAI6O,UAAJ,aAAI,EAAcplB,eAAgB,CAChC,IAAM4lB,EAAqBR,GAAaplB,eAAejD,KAAI,SAACmD,GAC1D,MAAO,CACLuH,QAASvH,EAAMuH,QAAQ1K,KAAI,SAAC4oB,GACYA,EAA9BxG,WACR,OAFqC,aACCwG,EADD,mBAIvCjnB,GAAIwB,EAAMxB,GACVmnB,MAAO3lB,EAAMulB,mBACble,YAAarH,EAAMqH,YACnBI,OAAQzH,EAAMyH,OACdf,aAAc1G,EAAM0G,aACpBU,aAAcpH,EAAMoH,iBAGxBge,GAAoBM,MAErB,CAACV,GAAmBzvB,OAEvBoH,IAAM6C,WAAU,WACVwlB,GAAmBzvB,OACrBkpB,GAAkB3W,MAAK,SAAC4T,EAAM1e,GAI5B,OAHI0e,EAAK7E,QAAU/D,GAAcpK,WAC/BoW,GAAmBL,GAAkBzhB,IAEhC0e,KAETwC,GAA0BpW,MAAK,SAAC4T,EAAM1e,GAIpC,OAHI0e,EAAK7E,QAAU/D,GAAc1F,iBAC/BwR,EAAyBV,GAA0BlhB,IAE9C0e,KAETmJ,GAAmBG,GAAmBzvB,KAAKqK,SAAS6H,QACpDwc,EAAkB1c,OAEnB,CAACyd,KA1MA,O/CgjDC,SAAmC3hB,GAClC,OAAOC,eAAsFQ,GAAwBT,G+Ct2ClGuiB,GAAlBC,GA3MH,wB/CslDC,SAAmCxiB,GAClC,OAAOC,eAAsFS,GAAwBV,G+C34ClGyiB,GAAlBC,GA5MH,wBA8MwCppB,IAAMC,UAAS,GA9MvD,qBA8MGyV,GA9MH,MA8MmBC,GA9MnB,MAgNEG,GAASC,aAAU,CACvBC,oBAAoB,EACpBG,cAAeA,GACfF,iBAAkBP,GAClBQ,eAAgBR,GAChBW,iBAAkBC,OAAaC,MAAM,CACnCxM,aAAcuM,OAAaG,SAAS,iCACpChG,gBAAiB6F,OAEdG,SAAS,wCACZ1K,UAAWuK,OAAaG,SAAS,kCACjC3L,OAAQwL,OAAaG,SAAS,8BAC9BzM,SAAUsM,OAAaG,SAAS,kCAElCE,SAAS,WAAD,8BAAE,WAAOC,GAAP,wBAAAjU,EAAA,0DACJ4kB,EADI,gCAEe6B,GAAe,CAClCla,UAAW,CACTtW,KAAK,2BACAge,GADD,IAEFhM,QAASyc,EACTgC,aAAcb,QAPd,OAEA1d,EAFA,QAWN,UAAIA,EAAOlS,YAAX,aAAI,EAAawwB,kBACfzG,QAAMC,gBAAgBtC,GACtB+H,GAAmBxS,SAAWwS,GAAmBxS,UACjD8Q,GAAwBA,KAdpB,uCAiBeuC,GAAe,CAClCha,UAAW,CACTtW,KAAK,2BACAge,GADD,IAEFhM,QAASyc,EACTgC,aAAcb,QAtBd,OAiBA1d,EAjBA,QA0BN,UAAIA,EAAOlS,YAAX,aAAI,EAAaswB,kBACfvG,QAAMC,gBAAgBtC,GACtBsG,GAAeA,EAAYruB,SAAQ,UAACuS,EAAOlS,YAAR,aAAC,EAAaswB,eAAernB,KAChEylB,EAAkBH,GAClBR,GAAwBA,KA9BpB,4CAAF,mDAAC,KAoCX,OACE,6BACE,kBAACpP,GAAA,EAAD,CAAMZ,SAAUb,GAAOgN,cACrB,kBAACrlB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC4B,EAAA,EAAD,KACE,kBAACygB,GAAA,EAAD,CAAYxiB,UAAS,4DAAuDkpB,GAAS,iCACnF,wBAAIlpB,UAAU,SACV0N,GAAewb,EAA4B,kBAApB,mBAE3B,6BACE,kBAAChlB,EAAA,EAAD,CACEN,KAAK,SACL5D,UAAU,mCACViC,QAAS,WACPsW,GAAOmC,aACPtC,IAAkB,KALtB,WAUE8Q,GACA,kBAAC,IAAD,CACErhB,GAAE,yBACF7H,UAAU,0CAFZ,YASN,kBAACoC,EAAA,EAAD,KACE,kBAAClC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKH,UAAU,OAAOI,GAAG,KACvB,kBAAC+Z,GAAA,EAAD,KACE,gDACA,kBAACzW,EAAA,EAAD,CACEC,YAAY,gBACZK,KAAK,eACLJ,KAAK,OACLwW,SAAU7B,GAAO8B,aACjBvW,OAAQyU,GAAO+B,WACfqC,MAAOpE,GAAOc,OAAO7M,gBAGzB,kBAAC+N,GAAD,CAAcxE,QAASwC,GAAOiC,OAAOhO,gBAEvC,kBAACrM,EAAA,EAAD,CAAKH,UAAU,OAAOI,GAAG,KACvB,kBAAC+Z,GAAA,EAAD,KACE,sDACA,kBAACzW,EAAA,EAAD,CACEC,YAAY,gBACZK,KAAK,oBACLJ,KAAK,OACLwW,SAAU7B,GAAO8B,aACjBvW,OAAQyU,GAAO+B,WACfqC,MAAOpE,GAAOc,OAAO9M,mBAAqB,MAG9C,kBAACgO,GAAD,CAAcxE,QAASwC,GAAOiC,OAAOjO,qBAEvC,kBAAC7I,EAAA,EAAD,CAAOE,KAAK,SAASI,KAAK,aAE1BklB,GACA,kBAAChpB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,IAAIJ,UAAU,QACpB,kBAACma,GAAA,EAAD,KACE,+CACA,kBAAC,KAAD,CACEna,UAAU,oCACVoa,SAAU,SAACoL,GACT0E,GAAcnB,GAAa,IAC3BrE,EAAyBc,GACzBjN,GAAOkN,cAAc,kBAAmBD,EAAI7I,QAE9CA,MAAO8H,EACPiB,gBAAgB,eAChB/hB,YAAY,qBACZK,KAAK,kBACLtH,QAASsnB,KAEX,kBAACzJ,GAAD,CAAcxE,QAASwC,GAAOiC,OAAOtH,oBAGzC,kBAAC/S,EAAA,EAAD,CAAKC,GAAG,IAAIJ,UAAU,aACpB,kBAACma,GAAA,EAAD,KACE,wCACA,kBAAC,KAAD,CACEna,UAAU,oCACVoa,SAAU,SAACoL,GACT0E,GAAcnB,GAAa,IAC3BnE,GAAmBY,GACnBjN,GAAOkN,cAAc,YAAaD,EAAI7I,QAExC+I,gBAAgB,eAChB/hB,YAAY,gBACZgZ,MAAOgI,GACP3gB,KAAK,YACLtH,QAAS6nB,KAEX,kBAAChK,GAAD,CAAcxE,QAASwC,GAAOiC,OAAOhM,cAGzC,kBAACrO,EAAA,EAAD,CAAKC,GAAG,IAAIJ,UAAU,QACpB,kBAACma,GAAA,EAAD,KACE,uCACA,kBAAC,KAAD,CACEna,UAAU,oCACVoa,SAAU,SAACoL,GACT0E,GAAc1E,GACdjN,GAAOkN,cAAc,SAAUD,EAAI7I,QAErC+I,gBAAgB,eAChB/hB,YAAY,gBACZgZ,MAAOsN,GACPjmB,KAAK,SACLtH,QAASqsB,KAEX,kBAACxO,GAAD,CAAcxE,QAASwC,GAAOiC,OAAOrM,YAK7C,kBAACjO,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKH,UAAU,QAAQI,GAAG,KACxB,kBAAC+Z,GAAA,EAAD,KACE,+CACA,kBAACzW,EAAA,EAAD,CACEC,YAAY,eACZK,KAAK,WACLJ,KAAK,SACLwW,SAAU7B,GAAO8B,aACjBvW,OAAQyU,GAAO+B,WACfqC,MAAOpE,GAAOc,OAAO5M,YAGzB,kBAAC8N,GAAD,CAAcxE,QAASwC,GAAOiC,OAAO/N,YAEvC,kBAACtM,EAAA,EAAD,CAAKH,UAAU,QAAQI,GAAG,KACxB,kBAAC+Z,GAAA,EAAD,KACE,uDACA,kBAACzW,EAAA,EAAD,CACEC,YAAY,uBACZK,KAAK,aACLJ,KAAK,SACLwW,SAAU7B,GAAO8B,aACjBvW,OAAQyU,GAAO+B,WACfqC,MAAOpE,GAAOc,OAAOkR,cAGzB,kBAAChQ,GAAD,CAAcxE,QAASwC,GAAOiC,OAAO+P,eAGzC,kBAACrqB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKH,UAAU,GAAGI,GAAG,MACnB,kBAAC+Z,GAAA,EAAD,KACE,0CACA,kBAAC,GAAD,CACEsJ,aAAa,UACbD,eAAgB,SAACthB,GACfqW,GAAOkN,cAAc,UAAWvjB,IAElCya,MAAOpE,GAAOc,OAAOvX,WAGzB,kBAACyY,GAAD,CAAcxE,QAASwC,GAAOiC,OAAO1Y,YAGzC,kBAAC5B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKH,UAAU,GAAGI,GAAG,MACnB,kBAAC+Z,GAAA,EAAD,KACE,+CACA,kBAAC,GAAD,CACEsJ,aAAa,eACbD,eAAgB,SAACthB,GACfqW,GAAOkN,cAAc,eAAgBvjB,IAEvCya,MAAOpE,GAAOc,OAAOnM,gBAGzB,kBAACqN,GAAD,CAAcxE,QAASwC,GAAOiC,OAAOtN,iBAIzC,kBAAChN,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKH,UAAU,OAAOI,GAAG,KACvB,kBAAC+Z,GAAA,EAAD,CAAWna,UAAU,kCACnB,8CACA,2BAAOA,UAAU,qBAAjB,SAEE,kBAACua,GAAD,CACE/Z,MAAO,CACLtD,SAAU,WACVgB,KAAM,OACNE,IAAK,OACL2tB,SAAU,QACVC,WAAY,UAEdjW,QAASwC,GAAOiC,OAAOjN,WAI5Bqc,EAAcjnB,KACb,SAAC4oB,EAAsB1oB,GACrB,OACE,oCACE,kBAACsX,GAAA,EAAD,CACEna,UAAU,4BACV8C,IAAKD,GAEL,2BAAO7C,UAAU,QAAQurB,EAAO7jB,WAChC,yBAAK1H,UAAU,SACb,kBAAC0D,EAAA,EAAD,CACEE,KAAK,OACLqoB,QAAS,SAACzG,GACR,IAAMsB,EAAMgD,EAAgBnnB,KAAI,SAACyC,GAI/B,OAHIA,EAAEsC,YAAc6jB,EAAO7jB,YACzBtC,EAAEoI,cAAgBgY,EAAIze,OAAO4V,OAExBvX,KAET2kB,EAAkBjD,IAEpBhjB,OAAQyU,GAAO+B,WACftW,KAAK,UACLkoB,aACE3T,GAAOc,OAAOhM,QAAQxK,GACnB2K,eAAiB,KAGvB+K,GAAOiC,OAAOnN,SACb,kBAACkN,GAAD,CACExE,QACEwC,GAAOiC,OAAOnN,QAAQxK,MAK9B,kBAACspB,GAAA,EAAD,CACEvoB,KAAK,QACL5D,UAAU,YACVsE,GAAE,gBAAWinB,EAAO7jB,WACpBiV,MAAO4O,EAAO7jB,UACd1D,KAAK,SACLooB,QAASb,EAAO7jB,YAAcgjB,GAC9BtQ,SAAU,SAAClY,GACTqW,GAAO8B,aAAanY,GACpByoB,GAAmBY,EAAO7jB,YAE5B5D,OAAQyU,GAAO+B,mBAQ7B,kBAACna,EAAA,EAAD,CAAKH,UAAU,YAAYI,GAAG,KAC5B,kBAACsD,EAAA,EAAD,CACEC,YAAY,aACZK,KAAK,QACLJ,KAAK,WAEP,kBAAC,GAAD,CACEA,KAAM5C,EAAUqrB,MAChBxG,QAASA,EACT/d,IAAKsjB,GACLxF,aAAW,IAEb,kBAACrL,GAAD,CAAcxE,QAASwC,GAAOiC,OAAOpN,UAGzC,kBAAClN,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,MACN,6BACG6qB,GAAiBtoB,KAAI,SAACyC,EAAGknB,GACxB,OACE,yBAAKxpB,IAAKwpB,EAAStsB,UAAU,wBAC3B,kBAACma,GAAA,EAAD,CAAWna,UAAU,mEACnB,yBAAKA,UAAU,SACb,kBAAC0D,EAAA,EAAD,CACEC,YAAY,sBACZyW,SAAU,SAAClY,GACTgpB,GACED,GAAiBtoB,KAAI,SAAC8E,GACpB,OAAIA,EAAInD,KAAOc,EAAEd,GACR,2BACFmD,GADL,IAEE+E,aAActK,EAAE6E,OAAO4V,QAGpBlV,OAIbykB,aAAc9mB,EAAEoH,cAAgB,MAGpC,kBAACtI,EAAA,EAAD,CACElE,UAAU,iCACVb,MAAM,SACNiF,KAAK,KACLR,KAAK,SACL3B,QAAO,yCAAE,WAAOC,GAAP,UAAAkD,EAAA,sDACPlD,EAAEC,iBACFgpB,GAA0B/lB,EAAEd,IAFrB,2CAAF,uDAKP,uBAAGtE,UAAU,sCAGjB,kBAACma,GAAA,EAAD,CAAWna,UAAU,0BACnB,2BAAOA,UAAU,cAAjB,eACA,kBAAC,GAAD,CACEyjB,aAAY,qBAAgB6I,GAC5B9I,eAAgB,SAACthB,GACfgpB,GACED,GAAiBtoB,KAAI,SAAC8E,GACpB,OAAIA,EAAInD,KAAOc,EAAEd,GACR,2BACFmD,GADL,IAEE0F,YAAajL,IAGVuF,OAIbkV,MAAOvX,EAAE+H,aAAe,GACxB3G,OAAQ,OAGZ,kBAAC2T,GAAA,EAAD,CAAWna,UAAU,0BACnB,2BAAOA,UAAU,cAAjB,gBACA,kBAAC,GAAD,CACEyjB,aAAY,sBAAiB6I,GAC7B9I,eAAgB,SAACthB,GACfgpB,GACED,GAAiBtoB,KAAI,SAAC8E,GACpB,OAAIA,EAAInD,KAAOc,EAAEd,GACR,2BACFmD,GADL,IAEEyF,aAAchL,IAGXuF,OAIbkV,MAAOvX,EAAE8H,cAAgB,GACzB1G,OAAQ,OAGXpB,EAAEiI,SACD,yBAAKrN,UAAU,QACZoF,EAAEiI,QAAQ1K,KACT,SAAC4oB,EAAsB1oB,GACrB,OACE,oCACE,kBAACsX,GAAA,EAAD,CACEna,UAAU,4BACV8C,IAAKD,GAEL,2BAAO7C,UAAU,QACdurB,EAAO7jB,WAEV,yBAAK1H,UAAU,SACb,kBAAC0D,EAAA,EAAD,CACEE,KAAK,OACLqoB,QAAS,SAACzG,GAAc,IAAD,EACfsG,EAAeb,GAAiBrd,MACpC,SAAC1L,GAAD,OAAOA,EAAEoC,KAAOc,EAAEd,MAEdwiB,EAAG,OAAGgF,QAAH,IAAGA,GAAH,UAAGA,EAAcze,eAAjB,aAAG,EAAuB1K,KACjC,SAAC4pB,GAQC,OANEA,EAAG7kB,YACH6jB,EAAO7jB,YAEP6kB,EAAG/e,cACDgY,EAAIze,OAAO4V,OAER4P,KAGXzF,GACEgF,GACAZ,GACED,GAAiBtoB,KACf,SAAC8E,GACC,OAAIA,EAAInD,KAAOc,EAAEd,GACR,2BACFmD,GADL,IAEE4F,QAASyZ,IAGNrf,OAKjBzD,KAAK,eACLkoB,aACEX,EAAO/d,eAAiB,MAI9B,kBAAC2e,GAAA,EAAD,CACEvoB,KAAK,QACL5D,UAAU,YACVsE,GAAE,uBACAgoB,EAAUzpB,EADV,YAEE0oB,EAAO7jB,WACXiV,MAAO4O,EAAO7jB,UACd0kB,QACEb,EAAO7jB,YAActC,EAAEmI,OAEzB6M,SAAU,WACR8Q,GACED,GAAiBtoB,KAAI,SAAC8E,GACpB,OAAIA,EAAInD,KAAOc,EAAEd,GACR,2BACFmD,GADL,IAEE8F,OAAQge,EAAO7jB,YAGZD,cAStB,WAQjB,kBAACtH,EAAA,EAAD,CAAKC,GAAG,MACN,kBAAC,GAAD,CACE6B,QAAS,WACP,IAAMuqB,EAAqC,CACzCf,MAAOR,GAAiBplB,OAAS,EACjCwH,QAASuc,EACTtlB,IAAK2mB,GAAiBplB,OAAS,GAAG4mB,WAClCC,OAAO,GAETxB,GAAoB,GAAD,mBACdD,IADc,CAEjBuB,MAGJ7Y,KAAK,wBASrB,kBAAC,GAAD,CACErM,OAAQgiB,EACRT,QAASU,EACTX,SA9sBqB,WACzBY,EAAuB,CACrB7X,UAAW,CACTrN,GAAIolB,MA4sBJ9X,QAAS6X,EAA6B7X,YA0B/B+a,GArBqD,SAAC,GAK9D,IAJLzD,EAII,EAJJA,MACA1a,EAGI,EAHJA,UACA2a,EAEI,EAFJA,sBACAC,EACI,EADJA,qBACI,EAC4B3mB,IAAMC,SAAS,GAD3C,mBACGkqB,EADH,KACavD,EADb,KAEJ,OACE,6BACE,kBAAC,GAAD,CACEvmB,IAAK8pB,EACL1D,MAAOA,EACP1a,UAAWA,EACX2a,sBAAuBA,EACvBC,qBAAsBA,EACtBC,YAAaA,M,6JCpzBrB,IAqCewD,GArC2B,SAAC,GAMpC,IALL7sB,EAKI,EALJA,UACA8sB,EAII,EAJJA,aACA5rB,EAGI,EAHJA,SACA6rB,EAEI,EAFJA,aACAnb,EACI,EADJA,QAEMob,EAAUvqB,IAAM2R,OAAuB,MAa7C,OACE,mBACEY,IAAKgY,EACLhtB,UAAS,UAAKA,EAAL,gCACToB,IAAKA,YAAF,KAEE2rB,EAAsC,gBAAvB,sBAGpBE,SArBiB,WAEnB,IAAMC,EAAOF,EAAQrY,QACrB,GAAKuY,EAAL,CACA,IAAM7uB,EACJ8uB,KAAKC,MAAMF,EAAKG,aAAeH,EAAKI,aAAeJ,EAAKK,aACxD5a,QAAQC,IAAI,QAASvU,GACnBA,GAEFyuB,GAAgBA,OAcflb,GAAW,YAAC,GAAD,CAASnB,UAAQ,IAC5BvP,ICXDssB,GAAgB,CACpB,CACE7Q,MAAO,KACP5gB,MAAO,OAET,CACE4gB,MAAO/b,EAAW4R,QAClBzW,MAAO6E,EAAW4R,SAEpB,CACEmK,MAAO/b,EAAW6N,UAClB1S,MAAO6E,EAAW6N,YAmQPT,GAhQqC,SAAC,GAO9C,IAAD,EjDmsD+B7E,EiDzsDnCskB,EAMI,EANJA,aACAvE,EAKI,EALJA,MACA1a,EAII,EAJJA,UACA2a,EAGI,EAHJA,sBACAuE,EAEI,EAFJA,eACAC,EACI,EADJA,kBACI,EAC8ClrB,IAAMC,UAAS,GAD7D,mBACG4mB,EADH,KACsBC,EADtB,KAEE/pB,EAAQuG,cAFV,EAGsCtD,IAAMC,SAAS8L,GAHrD,mBAGGof,EAHH,KAGkBC,EAHlB,OAOA5jB,KAPA,mBAKFuf,EALE,KAMFC,EANE,OAQ4BhnB,IAAMC,SAAS,IAR3C,mBAQGgnB,EARH,KAQaC,EARb,KASEoB,EAAc,yCAAG,uBAAA3lB,EAAA,sEACfokB,EAAuB,CAC3B7X,UAAW,CACTrN,GAAIolB,KAHa,2CAAH,qDAThB,EAiBgCjnB,IAAMC,SAAS,IAjB/C,mBAiBGorB,EAjBH,KAiBeC,EAjBf,KAkBEC,EAA2CvrB,IAAM0Z,SAAQ,WAC7D,MAAO,CACLjJ,gBAAiBvS,EAAuBsjB,MACxCzV,UAAWof,EACX1d,OAAM,OAAEiZ,QAAF,IAAEA,OAAF,EAAEA,EAAuBjZ,OAC/BL,MAAOie,KAER,CAACF,EAAezE,EAAuB2E,IAGpCG,GjDuqD6B9kB,EiDvqDS,CAC1CwI,UAAW,CACTtW,KAAM2yB,IjDsqDG5kB,YAAyEW,GAAsBZ,IiDlqD5G1G,IAAM6C,WAAU,WAAO,IAAD,GACpB,UAAGmkB,EAA6BpuB,YAAhC,aAAG,EAAmC0vB,iBACpCkD,EAAe3V,YAEhB,CAAC2V,EAAgBxE,EAA6BpuB,OAEjD,IAAM6yB,EAAqBzrB,IAAM0rB,aAAY,WAAa,IAAD,GAErDF,EAAerc,SACdqc,EAAe5yB,MACf4yB,EAAe5yB,KAAK4J,WACpBgpB,EAAe5yB,KAAK4J,UAAUmpB,YAGjCH,EAAeI,UAAU,CACvB1c,UAAW,CACTtW,KAAK,2BACA2yB,GADD,IAEFlnB,OACEmnB,EAAe5yB,OAAf,UAAuB4yB,EAAe5yB,KAAK4J,iBAA3C,aAAuB,EAA+BmpB,eAG5DE,YAAa,SAACC,EAAMC,GAAU,IAAD,MAC3B,OAAO,2BACFD,GADL,IAEEtpB,UAAU,2BACLspB,EAAKtpB,WADD,IAEPA,UAAU,GAAD,mBACJspB,EAAKtpB,UAAUA,WADX,YAEHupB,EAAKC,gBACLD,EAAKC,gBAAgBxpB,UAAUA,UAC/B,KAENmpB,WAAU,iBAAEI,QAAF,IAAEA,GAAF,UAAEA,EAAMC,uBAAR,iBAAE,EAAuBxpB,iBAAzB,aAAE,EAAkCmpB,kBAApC,QAAkD,cAKnE,CAACJ,EAAiBC,IAErBxrB,IAAM6C,WAAU,WACdmoB,GAAgBA,EAAa,aAC7BQ,EAAe3V,UACfqV,GACEA,EAAkB,CAChBxf,OAAM,OAAEgb,QAAF,IAAEA,OAAF,EAAEA,EAAuBhb,OAC/BugB,YAAa,OAEhB,IAGH,IAAMzpB,EAAS,UAAGgpB,EAAe5yB,YAAlB,aAAG,EAAqB4J,UAAUA,UACjD,OACE,qCACIikB,GACA,kBAAC1G,GAAA,EAAD,KACE,yBAAKxiB,UAAU,kCACb,kBAACqC,EAAA,EAAD,CAAWC,IAAI,MAAf,qBACA,kBAAC,KAAD,CACE8X,SAAU,SAACoL,GACTqI,EAAiBrI,EAAI7I,QAEvBhZ,YAAY,SACZ3D,UAAU,uBACV0lB,gBAAgB,eAChBhpB,QAAS8wB,OAKjB,kBAAC,GAAD,CACET,eAAc7D,EACdlpB,UAAU,MACV8sB,aAAcoB,EACdtc,QAASqc,EAAerc,SAExB,yBAAK5R,UAAU,2BACb,kBAAC0D,EAAA,EAAD,CACEC,YAAY,iBACZyW,SAAU,SAAClY,GACT6rB,EAAc7rB,EAAE6E,OAAO4V,WAI7B,kBAACtK,EAAA,EAAD,CAAO/U,YAAU,GACf,2BAAO0C,UAAU,gBACf,4BACGkpB,GACC,wBACElpB,UAAU,8BACVQ,MAAO,CAAE+F,MAAO,OAEhB,kBAACkH,GAAA,EAAD,CAAOgV,OAAK,GACV,kBAAC/e,EAAA,EAAD,CAAOgf,gBAAgB,EAAO5U,GAAC,EAAClK,KAAK,aACrC,0BAAM5D,UAAU,uBAIpBkpB,GACA,wBAAIlpB,UAAU,aAAaQ,MAAO,CAAE+F,MAAO,QAE7C,wBAAIvG,UAAU,8BAAd,iBACA,wBAAIA,UAAU,gCAAd,eACA,wBAAIA,UAAU,gCAAd,SACA,wBAAIA,UAAU,gCAAd,kBACEkpB,GACA,wBAAIlpB,UAAU,gCAAd,aAIN,+BACGiF,GACCA,EACGtC,KAAI,SAACgsB,EAAG9rB,GACP,OACE,wBAAIC,IAAKD,GACNqmB,GACC,wBAAIlpB,UAAU,+BACZ,kBAACyN,GAAA,EAAD,CAAOgV,OAAK,GACV,kBAAC/e,EAAA,EAAD,CACEE,KAAK,WACLwW,SAAQ,yCAAE,WAAOlY,GAAP,kBAAAkD,EAAA,yDACHsoB,EADG,iDAIJxrB,EAAE6E,OAAOqlB,UACLwC,EACJlB,EAAegB,aACH/oB,KAAKgpB,EAAErqB,IACrBqpB,GACEA,EAAkB,2BACbD,GADY,IAEfgB,YAAaE,OAGXA,EACJlB,EAAegB,YACjBf,GACEA,EAAkB,2BACbD,GADY,IAEfgB,YAAaE,EAAcvE,QACzB,SAACjlB,GAAD,OAAOA,IAAMupB,EAAErqB,UApBf,2CAAF,wDA0BV,0BAAMtE,UAAU,uBAIpBkpB,GAAS,4BAAKrmB,EAAQ,GACxB,wBAAI7C,UAAU,8BACX2uB,EAAEniB,cAEL,wBAAIxM,UAAU,eACX2uB,EAAEzb,kBAAoBvS,EAAuBsjB,MAC5C,kBAAC4K,GAAA,EAAD,CAAO1vB,MAAM,WAAWwvB,EAAEzb,iBAE1B,kBAAC2b,GAAA,EAAD,CAAO1vB,MAAM,SAASwvB,EAAEzb,kBAG5B,wBAAIlT,UAAU,eACX2uB,EAAEngB,YAAc5N,EAAW4R,QAC1B,kBAACqc,GAAA,EAAD,CAAO1vB,MAAM,WAAWwvB,EAAEngB,WAE1B,kBAACqgB,GAAA,EAAD,CAAO1vB,MAAM,QAAQwvB,EAAEngB,YAG3B,wBAAIxO,UAAU,gCACX2uB,EAAEnE,eAEHtB,GACA,wBAAIlpB,UAAU,eACZ,kBAACkE,EAAA,EAAD,CACElE,UAAU,0BACVb,MAAM,OACNiF,KAAK,KACLR,KAAK,UAEL,uBAAG5D,UAAU,kCAEf,kBAAC,IAAD,CACEA,UAAU,iDACV6H,GAAE,UAAKrI,EAAMsI,IAAX,YAAkB6mB,EAAErqB,GAApB,UAEF,uBAAGtE,UAAU,mCAEf,kBAACkE,EAAA,EAAD,CACElE,UAAU,qBACVb,MAAM,SACNiF,KAAK,KACLR,KAAK,SACL3B,QAAS,WAAO0nB,EAAYgF,EAAErqB,IAAKilB,GAAqB,KAExD,uBAAGvpB,UAAU,4CASjC,kBAAC,GAAD,CACEsH,OAAQgiB,EACRT,QAASU,EACTX,SAAUmC,EACVnZ,QAAS6X,EAA6B7X,aClNjCkd,GA/D+C,SAAC,GAIxD,IAAD,ElD4qF6C3lB,EkD/qFjDqF,EAGI,EAHJA,UACA2a,EAEI,EAFJA,sBACAC,EACI,EADJA,qBAEMS,EAAkBpnB,IAAMoT,WAAWwR,IADrC,EAEwC5kB,IAAMC,WAF9C,mBAEGgrB,EAFH,KAEmBC,EAFnB,OlD6qFSvkB,eAAwGsC,GAAiCvC,GkD7qFlJ,mBAGG4lB,EAHH,KAGoCC,EAHpC,KAWJ,OAPAvsB,IAAM6C,WAAU,WAAO,IAAD,GACpB,UAAG0pB,EAAsC3zB,YAAzC,aAAG,EAA4C4zB,2BAC7C7F,GAAwBA,IACxBS,EAAgBjC,gBAAe,MAEjC,CAACoH,EAAsCpd,UAGvC,oCACE,kBAACvK,EAAA,EAAD,CACErH,UAAU,oBACVkvB,iBAAiB,QACjB9qB,KAAK,KACLwD,UAAQ,EACRN,OAAQuiB,EAAgBlC,YACxBpgB,OAAQ,kBAAMsiB,EAAgBjC,gBAAe,KAE7C,yBAAK5nB,UAAU,uCACb,4BACEA,UAAU,QACV4D,KAAK,SACL3B,QAAS,kBAAM4nB,EAAgBjC,gBAAe,KAE9C,uBAAG5nB,UAAU,qCAEf,wBAAIA,UAAU,kBAAd,sBAEF,kBAACwH,EAAA,EAAD,CAAWxH,UAAU,mBACnB,kBAAC,GAAD,CAAekpB,OAAK,EAAC1a,UAAWA,EAAW2a,sBAAuBA,EAAuBuE,eAAgBA,EAAgBC,kBAAmBA,KAE9I,yBAAK3tB,UAAU,gBACb,kBAACkE,EAAA,EAAD,CACElE,UAAU,UACVb,MAAM,OACNyE,KAAK,SACLklB,YAAwB,OAAd4E,QAAc,IAAdA,OAAA,EAAAA,EAAgBgB,eAA6B,OAAdhB,QAAc,IAAdA,GAAA,UAAAA,EAAgBgB,mBAAhB,eAA6B7oB,QAAS,GAC/E5D,QAAO,wBAAE,uBAAAmD,EAAA,8DACPsoB,GAAkBA,EAAegB,aAAehB,EAAegB,YAAY7oB,OAAS,GAD7E,qCACwFkpB,EAAgC,CAC7Hpd,UAAW,CACTtW,KAAM,CACJ6U,OAAQiZ,EAAsBjZ,OAC9Bif,0BAA2B,CAACzB,OAL3B,4CAWPsB,EAAsCpd,QAA4B,kBAACwV,GAAA,EAAD,CAASjoB,MAAM,YAAjC,qBCvEjDiwB,GAA4D,SAAC,GAEjE,IADLjhB,EACI,EADJA,OAEM0b,EAAkBpnB,IAAMoT,WAAWwR,IACzC,OACE,6BACE,kBAACnjB,EAAA,EAAD,CACElE,UAAU,0BACVb,MAAM,UACNiF,KAAK,KACLR,KAAK,SACL3B,QAAS,WACP4nB,EAAgB/B,8BAA6B,GAC7C+B,EAAgBnC,UAAUvZ,KAG5B,uBAAGnO,UAAU,kCAEf,0BAAMA,UAAU,4BAAhB,qB,qBC0EOqvB,GArFiC,SAAC,GAK1C,IAJLzrB,EAII,EAJJA,KACAkE,EAGI,EAHJA,IACAsS,EAEI,EAFJA,SACAnY,EACI,EADJA,QACI,EAC0BQ,IAAMC,UAAS,GADzC,mBACGkP,EADH,KACYoU,EADZ,OAEkCvjB,IAAMC,WAFxC,mBAEGujB,EAFH,KAEgBC,EAFhB,KAGJzjB,IAAM6C,WAAU,WACd4gB,EAAepe,KACf,CAACA,IAEH,IAAMuS,EAAY,yCAAG,WAAOnY,GAAP,kBAAAkD,EAAA,yDACbkqB,EAAOptB,EAAE6E,OAAOwoB,MAAM,GADT,wDAKbl0B,EAAO,IAAIgrB,UACZC,OAAO,OAAQgJ,GACpBj0B,EAAKirB,OAAO,OAAZ,OAAoBgJ,QAApB,IAAoBA,OAApB,EAAoBA,EAAMtrB,MAC1B3I,EAAKirB,OAAO,OAAZ,OAAoBgJ,QAApB,IAAoBA,OAApB,EAAoBA,EAAM1rB,MAC1BvI,EAAKirB,OAAO,aAAc1iB,EAAKsZ,eAC/B8I,GAAW,GAVQ,UAYbO,MAAM7mB,EAAOG,aAAe,QAAS,CACzCqa,OAAQ,OACRkC,KAAM/gB,EACNmrB,YAAa,cACbC,QAAS,CACPC,OAAQ,sBAETC,MAAK,SAACC,GAAD,OACNA,EAASC,OAAOF,MAAK,SAACG,GAChBA,EAAIC,UACNf,GAAW,GACXE,EAAeY,EAAIzrB,KAAKiV,MACxB8J,EAAS0M,EAAIzrB,KAAKiV,aAxBL,4CAAH,sDA8BlB,OACI,oCACF,yBAAKtQ,UAAU,+CACb,2BACEA,UAAU,gBACV4D,KAAK,OACLwW,SAAUC,EACVmV,OAAO,YAET,kBAACtrB,EAAA,EAAD,CAAQlE,UAAU,yDAAyDimB,EAAc,gBAAkB,iBAI5GrU,GAAW,kBAACwV,GAAA,EAAD,CAASjoB,MAAM,aACzByS,GAAWqU,GACT,yBAAKjmB,UAAU,qBACf,kBAAC,KAAD,CACEM,IAAKZ,EAAOE,YAAckI,GAAYme,GACtCjmB,UAAU,OACV2O,UAAQ,EACRC,aAAc,aACdtK,GAAG,oBAEL,uBAAGrC,QAAS,WACRikB,EAAe,IACfjkB,KACDjC,UAAU,kEAAkEQ,MAAO,CAClFmG,aAAc,OACdJ,MAAO,OACPC,OAAQ,OACRrI,MAAO,QACPC,IAAK,OACLqxB,UAAW,SACXC,SAAU,OACVC,WAAY,MACZ7oB,OAAQ,YAZZ,QCxEK8oB,GAAkD,SAAC,GAEvD,eACL,IAAM/F,EAAkBpnB,IAAMoT,WAAWwR,IACzC,OACE,6BACE,kBAACnjB,EAAA,EAAD,CACElE,UAAU,qCACVb,MAAM,UACNiF,KAAK,KACLR,KAAK,SACL3B,QAAS,WACP4nB,EAAgB7B,uBAAsB,KAIxC,uBAAGhoB,UAAU,kCAEf,0BAAMA,UAAU,4CAAhB,c,4JCLR,IA+Oe6vB,GA/OsC,SAAC,GAI/C,ItDyvFuC1mB,EsD5vF5ClE,EAGI,EAHJA,UACAkJ,EAEI,EAFJA,OACAib,EACI,EADJA,qBACI,EAC8C3mB,IAAMC,UAAS,GAD7D,mBACG4mB,EADH,KACsBC,EADtB,KAEEM,EAAkBpnB,IAAMoT,WAAWwR,IACnCtE,EAAeD,GAAgB,WAAY,WAH7C,EtD0vFS1Z,eAA8FwC,GAA4BzC,GsD1vFnI,mBAKF2mB,EALE,KAMFC,EANE,OtDmtFC,SAAuC5mB,GACtC,OAAOC,eAA8FuC,GAA4BxC,GsDzsFnI6mB,GAXA,mBASFC,EATE,KAUFC,EAVE,OAa4BztB,IAAMC,SAAS,IAb3C,mBAaGgnB,EAbH,KAaaC,EAbb,KAqCJ,OAfAlnB,IAAM6C,WAAU,WAAO,IAAD,IACpB,aAAI4qB,EAAiC70B,YAArC,aAAI,EAAuC80B,mBAAoB,CAC7D/G,GAAwBA,IACxB,IAAMgH,EAAgBtN,GAAgB,WAAY,UAAW,UAC7DsC,QAAMC,gBAAgB+K,IAExB,UAAIL,EAAiC10B,YAArC,aAAI,EAAuCg1B,sBACzCjH,GAAwBA,IACxBhE,QAAMC,gBAAgBtC,MAEvB,CACDmN,EAAiCte,QACjCme,EAAiCne,UAIjC,YAAC,IAAMqN,SAAP,KACE,mBAAKjf,UAAU,0DACb,oBACEQ,MAAO,CAAE+F,MAAO,OAChBvG,UAAU,qDAFZ,SAMA,oBACEQ,MAAO,CAAE+F,MAAO,OAChBvG,UAAU,qDAFZ,iBAMA,oBACEQ,MAAO,CAAE+F,MAAO,OAChBvG,UAAU,qDAFZ,eAMA,oBACEQ,MAAO,CAAE+F,MAAO,OAChBvG,UAAU,qDAFZ,iBAMA,oBACEQ,MAAO,CAAE+F,MAAO,OAChBvG,UAAU,qDAFZ,WAOF,uBACE,YAAC,IAAMif,SAAP,KACGha,GACCA,EAAUtC,KAAI,SAACgsB,EAAG2B,GAChB,IAAIC,EAAU5B,EAAEtpB,aAEhB,GAAIspB,EAAEvgB,KAAK9J,KAAO6J,EAChB,OACE,YAAC,IAAM8Q,SAAP,KACE,mBACEjf,UAAU,yDACV8C,IAAKwtB,GAEL,oBACE9vB,MAAO,CAAE+F,MAAO,OAChBvG,UAAU,4DAEV,YAAC0D,EAAA,EAAD,CACEZ,IAAK6rB,EAAErqB,GACP4nB,aAAcyC,EAAEtpB,aAChBzB,KAAK,SACLwW,SAAU,SAAClY,GACTquB,EAAUv1B,SAASkH,EAAE6E,OAAO4V,UAGhC,YAACzY,EAAA,EAAD,CACElE,UAAU,+BACVb,MAAM,OACNiF,KAAK,KACLR,KAAK,SACL3B,QAAO,yCAAE,WAAOC,GAAP,UAAAkD,EAAA,6DACPlD,EAAEC,iBADK,SAED2tB,EAA2B,CAC/Bne,UAAW,CACTtW,KAAM,CACJiJ,GAAIqqB,EAAErqB,GACNe,aAAckrB,MANb,2CAAF,uDAYP,iBAAGvwB,UAAU,8BAGjB,oBACEQ,MAAO,CAAE+F,MAAO,OAChBvG,UAAU,qDAET2uB,EAAEjpB,SAAS8G,cAEd,oBAAMhM,MAAO,CAAE+F,MAAO,OAASvG,UAAU,eACtC2uB,EAAEjpB,SAASwN,kBACZvS,EAAuBsjB,MACrB,YAAC4K,GAAA,EAAD,CAAO1vB,MAAM,WACVwvB,EAAEjpB,SAASwN,iBAGd,YAAC2b,GAAA,EAAD,CAAO1vB,MAAM,SACVwvB,EAAEjpB,SAASwN,kBAIlB,oBACE1S,MAAO,CAAE+F,MAAO,OAChBvG,UAAU,oCAET2uB,EAAEjpB,SAAS8kB,aAAc,IACzBmE,EAAEjpB,SAASE,eAAeC,OAAS,GAClC,oBAAM7F,UAAU,oBAAhB,YAGJ,mBACEA,UAAU,gCACVQ,MAAO,CAAE+F,MAAO,QAEhB,YAACrC,EAAA,EAAD,CACElE,UAAU,iDACViC,QAAS,WACP4nB,EAAgBvB,mBAAmBqG,EAAEjpB,SAASpB,IAC9CulB,EAAgB/B,8BAA6B,KAG/C,iBAAG9nB,UAAU,mCAEf,YAACkE,EAAA,EAAD,CACElE,UAAU,iCACVb,MAAM,SACNiF,KAAK,KACLR,KAAK,SACL3B,QAAS,WACP0nB,EAAYgF,EAAErqB,IACdilB,GAAqB,KAGvB,iBAAGvpB,UAAU,uCAIlB2uB,EAAEjpB,SAASE,eAAeC,OAAS,GAClC,mBACE7F,UAAU,OACVoB,IAAKA,YAAF,OAIFutB,EAAEjpB,SAASE,eAAejD,KAAI,SAAC6tB,EAASC,GACvC,OACE,mBACEzwB,UAAU,yDACV8C,IAAK,QAAU2tB,GAEf,oBAAMjwB,MAAO,CAAE+F,MAAO,MAAOC,OAAQ,SACnC,mBAAKxG,UAAU,iEAEjB,oBACEQ,MAAO,CAAE+F,MAAO,OAChBvG,UAAU,qDAETwwB,EAAQhkB,cAEX,oBACEhM,MAAO,CAAE+F,MAAO,OAChBvG,UAAU,eAETwwB,EAAQtd,kBACTvS,EAAuBsjB,MACrB,YAAC4K,GAAA,EAAD,CAAO1vB,MAAM,WACVqxB,EAAQtd,iBAGX,YAAC2b,GAAA,EAAD,CAAO1vB,MAAM,SACVqxB,EAAQtd,kBAIf,oBACE1S,MAAO,CAAE+F,MAAO,OAChBvG,UAAU,oCAETwwB,EAAQhG,cAEX,oBAAMhqB,MAAO,CAAE+F,MAAO,mBAW5C,YAAC,GAAD,CACEe,OAAQgiB,EACRT,QAASU,EACTX,SArNmB,WACzBqH,EAA2B,CACzBte,UAAW,CACTrN,GAAIolB,MAmNF9X,QAASse,EAAiCte,WAEvC,MCcE8e,GApOmB,SAAC,GAM5B,IALLC,EAKI,EALJA,UACAniB,EAII,EAJJA,UACAvJ,EAGI,EAHJA,UACAmkB,EAEI,EAFJA,qBACAwH,EACI,EADJA,SAEM/G,EAAkBpnB,IAAMoT,WAAWwR,IACnCtE,EAAeD,GAAgB,OAAQ,UAFzC,EAGkDrgB,IAAMC,SAE1D,IALE,mBAGGmuB,EAHH,KAGwBC,EAHxB,KASAC,EAAoD,GACxDtuB,IAAM6C,WAAU,YACd,OAAIsrB,QAAJ,IAAIA,OAAJ,EAAIA,EAAUriB,oBAEZwiB,EAA0B,OAAGH,QAAH,IAAGA,OAAH,EAAGA,EAAUriB,iBAAiB5L,KAAI,SAACyjB,GAC3BA,EAAxBrB,WACR,OAFiE,aACjCqB,EADiC,oBAKrE0K,EAAuBC,KACtB,CAACJ,IACJ,IAAI/X,EAA8B,CAChCtU,GAAE,OAAEssB,QAAF,IAAEA,OAAF,EAAEA,EAAUtsB,GACd4O,gBAAe,OAAE0d,QAAF,IAAEA,OAAF,EAAEA,EAAU1d,gBAC3BhG,cAAsB,OAAR0jB,QAAQ,IAARA,OAAA,EAAAA,EAAU1jB,eAAgB,GACxC8jB,SAAQ,OAAEJ,QAAF,IAAEA,OAAF,EAAEA,EAAUI,SACpBxiB,UAAS,OAAEoiB,QAAF,IAAEA,OAAF,EAAEA,EAAUpiB,UACrBD,iBACEsiB,EAAoBhrB,OAAS,EACzBgrB,EACAE,EACNriB,SAAQ,OAAEkiB,QAAF,IAAEA,OAAF,EAAEA,EAAUliB,UAEhB6J,EAASC,aAAU,CACvBC,oBAAoB,EACpBG,cAAeA,EACfE,iBAAkBC,OAAaC,MAAM,CACnCgY,SAAUjY,OAAaG,SAAS,mCAElCE,SAAS,WAAD,8BAAE,WAAOC,GAAP,kBAAAjU,EAAA,sEACaykB,EAAgBrC,mBAAmB,CACtD7V,UAAW,CACTtW,KAAMge,KAHF,OACF9L,EADE,QAMR,UAAIA,EAAOlS,YAAX,aAAI,EAAa41B,cACf7L,QAAMC,gBAAgBtC,GACtB8N,EAAoB1rB,MAAK,SAACC,EAAGjK,GAAJ,OAAUiK,EAAEC,aAAgBlK,EAAEkK,gBACvDyrB,EAAuBD,IATjB,2CAAF,mDAAC,KAcX,OACE,kBAAC7W,GAAA,EAAD,CAAMZ,SAAUb,EAAOgN,cACrB,kBAACrlB,EAAA,EAAD,KAEE,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACP,yBAAKJ,UAAU,uDACb,kBAACma,GAAA,EAAD,CAAWna,UAAU,QACnB,4CACA,kBAAC0D,EAAA,EAAD,CACEC,YAAY,YACZK,KAAK,WACLJ,KAAK,OACLwW,SAAU7B,EAAO8B,aACjBvW,OAAQyU,EAAO+B,WACfqC,MAAOpE,EAAOc,OAAO2X,UAAY,GACjChxB,UAAWuY,EAAOiC,OAAOwW,UAAY,gBAEvC,kBAACzW,GAAD,CAAcxE,QAASwC,EAAOiC,OAAOwW,YAGvC,6BACE,kBAAC9sB,EAAA,EAAD,CACEN,KAAK,SACL5D,UAAU,oCAFZ,UAMA,kBAAC,IAAD,CACE6H,GAAE,qBACF7H,UAAU,0CAFZ,cAUR,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,yBAAKH,UAAU,oBAEb,kBAACma,GAAA,EAAD,KACE,wCACA,kBAACzW,EAAA,EAAD,CAAOC,YAAY,aAAaK,KAAK,WAAWJ,KAAK,WACrD,kBAAC,GAAD,CACEA,KAAM5C,EAAUkwB,MAChBppB,IAAG,OAAE8oB,QAAF,IAAEA,OAAF,EAAEA,EAAUliB,SACf0L,SAAU,SAAClY,GACTqW,EAAOkN,cAAc,WAAYvjB,IAEnCD,QAAS,WACPsW,EAAOkN,cAAc,WAAY,WAQ7C,kBAACvlB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,wBAAIH,UAAU,wBACX6wB,GACCA,EAAoBluB,KAAI,SAACyjB,EAAGvjB,GACxB,IAAMuL,EACJuiB,GAAaA,EAAU/iB,MAAK,SAACQ,GAAD,OAAUA,EAAK9J,KAAO8hB,EAAEjY,UACtD,OACE,yBAAKrL,IAAKD,GACR,wBAAI7C,UAAU,gEACZ,wBAAIA,UAAU,uBAAd,OACGoO,QADH,IACGA,OADH,EACGA,EAAMY,UAET,yBAAKhP,UAAU,0CACZwO,IAAc5N,EAAW6N,WACxB,kBAAC0L,GAAA,EAAD,CAAWna,UAAU,sEACnB,2BAAOA,UAAU,sBAAjB,iBAGA,kBAAC0D,EAAA,EAAD,CACEC,YAAY,UACZC,KAAK,SACLwW,SAAQ,yCAAE,WAAOlY,GAAP,gBAAAkD,EAAA,sDAER0hB,GADIA,EAAMqK,KAAEC,UAAUP,IACZluB,KAAI,SAAC0uB,GAIb,OAHIA,EAAGljB,SAAWiY,EAAEjY,SAClBkjB,EAAGpiB,WAAajU,SAASkH,EAAE6E,OAAO4V,QAE7B0U,KAETP,EAAuBhK,GACvBvO,EAAOkN,cACL,mBACAoL,GAXM,2CAAF,sDAcRlU,MACEkU,EAAoBhuB,GAAOoM,YAAc,EAE3CnL,OAAQyU,EAAO+B,WACfta,UAAS,yBAIf,kBAACma,GAAA,EAAD,CAAWna,UAAU,2DACnB,2BAAOA,UAAU,sBAAjB,SACA,kBAAC0D,EAAA,EAAD,CACEC,YAAY,QACZC,KAAK,SACLwW,SAAQ,yCAAE,WAAOlY,GAAP,gBAAAkD,EAAA,sDAER0hB,GADIA,EAAMqK,KAAEC,UAAUP,IACZluB,KAAI,SAAC0uB,GAIb,OAHIA,EAAGljB,SAAWiY,EAAEjY,SAClBkjB,EAAGhsB,aAAerK,SAASkH,EAAE6E,OAAO4V,QAE/B0U,KAETP,EAAuBhK,GACvBvO,EAAOkN,cACL,mBACAoL,GAXM,2CAAF,sDAcRlU,MACEkU,EAAoBhuB,GAAOwC,cAAgB,EAE7CvB,OAAQyU,EAAO+B,WACfta,UAAS,8BAGb,kBAACkE,EAAA,EAAD,CACElE,UAAU,iCACVb,MAAM,SACNiF,KAAK,KACLR,KAAK,SACL3B,QAAO,yCAAE,WAAOC,GAAP,gBAAAkD,EAAA,6DACPlD,EAAEC,iBACI2kB,EAAM+J,EAAoBxG,QAC9B,SAACgH,GAAD,OAAQA,EAAGljB,SAAWiY,EAAEjY,UAE1B2iB,EAAuBhK,GALhB,SAMD+C,EAAgBrC,mBAAmB,CACvC7V,UAAW,CACTtW,KAAM,CACJkT,iBAAkBuY,EAClBxiB,GAAE,OAAEssB,QAAF,IAAEA,OAAF,EAAEA,EAAUtsB,OAVb,2CAAF,uDAgBP,uBAAGtE,UAAU,uCAInB,kBAAC,GAAD,CAAsBmO,OAAQiY,EAAEjY,SAEhC,kBAAC,GAAD,CAAkBlJ,UAAWA,EAAWkJ,OAAQiY,EAAEjY,OAASib,qBAAsBA,QAI3F,yBAAKppB,UAAU,0EACb,kBAAC,GAAD,YCpNCsxB,GAnCiD,SAAC,GAI1D,IAHL9iB,EAGI,EAHJA,UACA4a,EAEI,EAFJA,qBACAD,EACI,EADJA,sBAEMU,EAAkBpnB,IAAMoT,WAAWwR,IACzC,OACE,oCACE,kBAAChgB,EAAA,EAAD,CACErH,UAAU,qBACVkvB,iBAAiB,QACjB9qB,KAAK,KACLwD,UAAQ,EACRN,OAAQuiB,EAAgBhC,0BACxBtgB,OAAQ,kBAAMsiB,EAAgB/B,8BAA6B,IAC3DhlB,IAAK+mB,EAAgBhC,0BAA0B4E,YAE/C,yBAAKzsB,UAAU,uCACb,4BACEA,UAAU,QACV4D,KAAK,SACL3B,QAAS,kBAAM4nB,EAAgB/B,8BAA6B,KAE5D,uBAAG9nB,UAAU,qCAEf,wBAAIA,UAAU,kBAAd,sBAEF,kBAACwH,EAAA,EAAD,KACE,kBAAC,GAAD,CAAuB2hB,sBAAuBA,EAAuBD,OAAK,EAACE,qBAAsBA,EAAuB5a,UAAWA,QCwI9H+iB,GAlJ2B,SAAC,GAMpC,IAAD,EzDs8C2BpoB,EyD38C/BskB,EAKI,EALJA,aACAvE,EAII,EAJJA,MACA1a,EAGI,EAHJA,UACAgjB,EAEI,EAFJA,eACAC,EACI,EADJA,kBAEMjyB,EAAQuG,cACR8jB,EAAkBpnB,IAAMoT,WAAWwR,IACnCqK,EAA+B,CACnCxe,gBAAiBvS,EAAuBsjB,MACxCzV,YACA+Z,SACE,UAAAsB,EAAgBtB,eAAhB,eAAyBoJ,IAAI9rB,QAAU,EAAIgkB,EAAgBtB,QAAU,MAPrE,GzDs8C2Bpf,EyD57CqB,CAClDwI,UAAW,CACTtW,KAAMq2B,IzD27CGtoB,YAAiEK,GAAkBN,IyD77CxF9N,EAVJ,EAUIA,KAAMuW,EAVV,EAUUA,QAAS0G,EAVnB,EAUmBA,QAMvB7V,IAAM6C,WAAU,WACdmoB,GAAgBA,EAAa,QAC7BnV,MACC,IACH,IAAMhK,EAAK,OAAGjT,QAAH,IAAGA,OAAH,EAAGA,EAAM+uB,SAAS9b,MAC7B,OACE,qCACI4a,GACA,kBAAC1G,GAAA,EAAD,KACE,kBAACngB,EAAA,EAAD,CAAWC,IAAI,MAAf,kBAGJ,kBAAC,GAAD,CACEyqB,eAAc7D,EACdlpB,UAAU,MACV8sB,aAAcxU,EACd1G,QAASA,GAET,kBAACS,EAAA,EAAD,CAAO/U,YAAU,GACf,2BAAO0C,UAAU,wBACf,4BACGkpB,GACC,wBACElpB,UAAU,8BACVQ,MAAO,CAAE+F,MAAO,OAEhB,kBAACkH,GAAA,EAAD,CAAOgV,OAAK,GACV,kBAAC/e,EAAA,EAAD,CAAOgf,gBAAgB,EAAO5U,GAAC,EAAClK,KAAK,aACrC,0BAAM5D,UAAU,uBAIpBkpB,GACA,wBAAIlpB,UAAU,aAAaQ,MAAO,CAAE+F,MAAO,QAE7C,wBAAIvG,UAAU,gCAAd,aACA,wBAAIA,UAAU,gCAAd,eACA,wBAAIA,UAAU,gCAAd,SACA,wBAAIA,UAAU,gCAAd,aAGJ,+BACGsO,GACCA,EAAM3L,KAAI,SAACyL,EAAMvL,GACf,OACE,wBAAIC,IAAKD,GACNqmB,GACC,wBAAIlpB,UAAU,+BACZ,kBAACyN,GAAA,EAAD,CAAOgV,OAAK,GACV,kBAAC/e,EAAA,EAAD,CACEE,KAAK,WACLwW,SAAQ,yCAAE,WAAOlY,GAAP,gBAAAkD,EAAA,sDACJlD,EAAE6E,OAAOqlB,SACL/wB,EAA4B,CAChC8S,OAAQC,EAAK9J,GACb2K,WAAY,EACZ5J,aAAc,GAEhBosB,EAAiB,sBAAMD,GAAN,CAAuBn2B,MAExCo2B,EACED,EAAgBnH,QACd,SAACuH,GAAD,OAAOA,EAAEzjB,SAAWC,EAAK9J,OAXvB,2CAAF,wDAiBV,0BAAMtE,UAAU,uBAIpBkpB,GAAS,4BAAKrmB,EAAQ,GACxB,wBAAI7C,UAAU,8BACXoO,EAAKY,UAER,wBAAIhP,UAAU,eACXoO,EAAK8E,kBAAoBvS,EAAuBsjB,MAC/C,kBAAC4K,GAAA,EAAD,CAAO1vB,MAAM,WAAWiP,EAAK8E,iBAE7B,kBAAC2b,GAAA,EAAD,CAAO1vB,MAAM,SAASiP,EAAK8E,kBAG/B,wBAAIlT,UAAU,eACXoO,EAAKI,YAAc5N,EAAW4R,QAC7B,kBAACqc,GAAA,EAAD,CAAO1vB,MAAM,WAAWiP,EAAKI,WAE7B,kBAACqgB,GAAA,EAAD,CAAO1vB,MAAM,QAAQiP,EAAKI,YAG9B,wBAAIxO,UAAU,eACZ,kBAACkE,EAAA,EAAD,CACElE,UAAU,0BACVb,MAAM,OACNiF,KAAK,KACLR,KAAK,UAEL,uBAAG5D,UAAU,kCAEf,kBAAC,IAAD,CACEA,UAAU,iDACV6H,GAAE,UAAKrI,EAAMsI,IAAX,YAAkBsG,EAAK9J,GAAvB,UAEF,uBAAGtE,UAAU,mCAEf,kBAACkE,EAAA,EAAD,CACElE,UAAU,qBACVb,MAAM,SACNiF,KAAK,KACLR,KAAK,UAEL,uBAAG5D,UAAU,+CCpDtB6xB,GA1F6B,SAAC,GAOtC,IANLrjB,EAMI,EANJA,UAGAD,GAGI,EALJoiB,UAKI,EAJJpI,QAII,EAHJha,kBACA2B,EAEI,EAFJA,OAGM2Z,GADF,EADJiI,YAEwBrvB,IAAMoT,WAAWwR,KADrC,EAEwC5kB,IAAMC,SAAgC,IAF9E,mBAEG8uB,EAFH,KAEmBC,EAFnB,KA8BJ,OA1BAhvB,IAAM6C,WAAU,WAEd,GADAqN,QAAQC,IAAI,mBAAoBrE,GAC5BA,IAAoC,OAAhBA,QAAgB,IAAhBA,OAAA,EAAAA,EAAkB1I,QAAS,EAAG,CACpD,IAAIksB,EAAgC,GACpCxjB,EAAiB5L,KAAI,SAACyjB,GACYA,EAAxBrB,WADmB,IACJ1pB,EADG,aACM+qB,EADN,gBAE1B2L,EAAMpsB,KAAKtK,MAEbo2B,EAAkBM,MAEpB,CAACxjB,IAYH9L,IAAM6C,WAAU,WACdukB,EAAgB7B,uBAAsB,KACtC,CAAC6B,EAAgBpC,yBAAyB7V,UAG1C,oCACE,kBAACvK,EAAA,EAAD,CACErH,UAAU,oBACVkvB,iBAAiB,QACjB9qB,KAAK,KACLwD,UAAQ,EACRN,OAAQuiB,EAAgB9B,mBACxBxgB,OAAQ,kBAAMsiB,EAAgB7B,uBAAsB,KAEpD,yBAAKhoB,UAAU,uCACb,4BACEA,UAAU,QACV4D,KAAK,SACL3B,QAAS,kBAAM4nB,EAAgB7B,uBAAsB,KAErD,uBAAGhoB,UAAU,qCAEf,wBAAIA,UAAU,kBAAd,kBAEF,kBAACwH,EAAA,EAAD,KACE,kBAAC,GAAD,CAAU0hB,OAAK,EAAC1a,UAAWA,EAAWgjB,eAAgBA,EAAgBC,kBAAmBA,KAE3F,yBAAKzxB,UAAU,gBACb,kBAACkE,EAAA,EAAD,CACElE,UAAU,UACVb,MAAM,OACNyE,KAAK,SACLklB,WAAU0I,EAAe3rB,OAAS,GAClC5D,QAAO,wBAAE,uBAAAmD,EAAA,sDACLosB,EAAe3rB,OAAS,GACxBgkB,EAAgBrC,mBAAmB,CACjC7V,UAAW,CACTtW,KAAM,CACJkT,iBAAkBijB,EAClBltB,GAAI4L,MANL,4CAYP2Z,EAAgBpC,yBAAyB7V,QAGzC,kBAACwV,GAAA,EAAD,CAASjoB,MAAM,YAFf,iBCgDC6yB,GAvH6C,SAAC,GAAS,IAAD,6BACnE,I3Di8DkC7oB,E2Dr7D9BynB,EAZE/G,EAAkBpnB,IAAMoT,WAAWwR,IACjC/iB,EAAO6L,cAAP7L,GAF2D,E3Dm8DpD8E,gBAAmEmB,GAAiBpB,G2Dn8DhC,mBAI5D8oB,EAJ4D,KAI9CC,EAJ8C,KAMnEzvB,IAAM6C,WAAU,WACdhB,GAAM2tB,EAAa,CACjBtgB,UAAW,CACTrN,UAGH,CAACA,IAEA4tB,EAAgB72B,OAClBu1B,EAAWsB,EAAgB72B,KAAK+U,MAElC,IAAM+Y,EAA6C,CACjDjZ,OAAQ0gB,GAAYA,EAAStsB,GAC7B6J,OAAQ0b,EAAgB1b,QAnByC,E3D8lF9D,SAAsChF,GACnC,OAAOC,gBAAqFqC,GAA0BtC,G2DxkF1EgpB,GAvBe,mBAuB5DC,EAvB4D,KAuBxCC,EAvBwC,O3Du/C9D,SAAqClpB,GAClC,OAAOC,gBAAmFM,GAAyBP,G2Dh+ClFmpB,GAxB0B,mBAwB5DnI,EAxB4D,KAwBhDoI,EAxBgD,KAyB7DC,EAAwB,CAC5BtiB,OAAQ5L,GAEV7B,IAAM6C,WAAU,WAAO,IAAD,EAIpB,GAHAukB,EAAgBrB,WAAW,CACzBmJ,IAAK,KAEJf,IAAQ,UAAIA,EAASriB,wBAAb,aAAI,EAA2B1I,QAAO,CAC/C,IAAM8rB,EAAgB,GACtBf,EAASriB,iBAAiB5L,KAAI,SAACyjB,GAC7BuL,EAAIhsB,KAAKygB,EAAEjY,QACX0b,EAAgBrB,WAAW,CACzBmJ,cAIN,WAACO,EAAgB72B,YAAjB,aAAC,EAAsB+U,OAEzB3N,IAAM6C,WAAU,WACdmtB,MACA,CAAC5I,EAAgBpC,yBAAyBpsB,OAC5CoH,IAAM6C,WAAU,WAAO,IAAD,KACpB,UAAAukB,EAAgBtB,eAAhB,eAAyBoJ,OAAO,UAAA9H,EAAgBtB,eAAhB,eAAyBoJ,IAAI9rB,QAAS,GAAKskB,EAAW,CACpFxY,UAAW,CACTtW,KAAMwuB,EAAgBtB,aAG1B,WAACsB,EAAgBtB,eAAjB,aAAC,EAAyBoJ,IAAI9rB,SAChCpD,IAAM6C,WAAU,WACVsrB,GAGJwB,EAAmB,CACjBzgB,UAAW6gB,MAEZ,CAAC5B,IACJ,IAAMxH,EAAuB,WAC3BiJ,EAAsB/Z,SAAW+Z,EAAsB/Z,QAAQka,IAE3DC,EAAe,WACnBP,EAAgB5Z,SAAW4Z,EAAgB5Z,QAAQ,CAAChU,QAMhDM,EAAa,UAAGytB,EAAsBh3B,YAAzB,aAAG,EAA4Bq3B,iBAClD,GAAIR,EAAgBtgB,QAClB,OAAO,oCAAG,cAEZ,IAAMpD,EAAS,UAAGoiB,SAAH,aAAG,EAAUpiB,UACtBmiB,EAAS,UAAG4B,EAAmBl3B,YAAtB,aAAG,EAAyBs3B,gBACrCpkB,EAAgB,UAAGqiB,SAAH,aAAG,EAAUriB,iBACnC,OACE,kBAACxM,EAAA,EAAD,KACE,kBAACygB,GAAA,EAAD,CAAYxiB,UAAU,qDACpB,wBAAIA,UAAU,SAAd,eAAmCwO,IAErC,kBAACpM,EAAA,EAAD,KACE,kBAAClC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKyyB,GAAG,MACN,kBAAC,GAAD,CACEjC,UAAWA,EACXniB,UAAWA,EACXvJ,UAAWL,EACXwkB,qBAAsBA,EACtBwH,SAAUA,EACV6B,YAAaA,OAKrB,kBAAC,GAAD,CACEjkB,UAAWA,EACX4a,qBAAsBA,EACtBD,sBAAuBA,IAEzB,kBAAC,GAAD,CACE3a,UAAWA,EACX4a,qBAAsBA,EACtBD,sBAAuBA,IAEzB,kBAAC,GAAD,CACE3a,UAAWA,EACXmiB,UAAWA,EACXpI,QAASsB,EAAgBtB,QACzBha,iBAAkBA,EAClBujB,YA5Cc,WAClBS,EAAmBja,SAAWia,EAAmBja,QAAQ,CAACjd,KAAMwuB,EAAgBtB,WA4C5ErY,OAAM,UAAE0gB,SAAF,aAAE,EAAUtsB,OC8GXuuB,GA/N2B,SAAC,GAMpC,IAAD,E5DwgE2B1pB,E4D7gE/BskB,EAKI,EALJA,aACAvE,EAII,EAJJA,MACA4J,EAGI,EAHJA,WACAC,EAEI,EAFJA,QACAC,EACI,EADJA,cACI,EAC8CvwB,IAAMC,UAAS,GAD7D,mBACG4mB,EADH,KACsBC,EADtB,OAEmC9mB,IAAMC,SAAS,IAFlD,mBAEGuwB,EAFH,KAEkBC,EAFlB,KAGEC,G5DqgEyBhqB,E4DrgEK,CAClCwI,UAAW,CACTtW,KAAM,CACJ6X,gBAAiBvS,EAAuBsjB,MACxC8O,QAAS,CACPpB,IAAKqB,GAAiB,O5DigEjB5pB,YAAiEqB,GAAkBtB,I4DzgE5F,EAgBAiB,KAhBA,mBAcFod,EAdE,KAeFC,EAfE,KAiBJhlB,IAAM6C,WAAU,WACdmoB,GAAgBA,EAAa,SAC7B0F,EAAW7a,YACV,IApBC,M5Dg+DC,SAA+BnP,GAC9B,OAAOC,eAA8EoB,GAAoBrB,G4Dx8D3GiqB,GAzBA,mBAuBFC,EAvBE,KAwBFC,EAxBE,KA2BEC,EAAU,yCAAG,uBAAAnuB,EAAA,sEACXiuB,EAAmB,CACvB1hB,UAAW,CACTrN,GAAI2uB,KAHS,2CAAH,qDAQVO,EAAiB/wB,IAAM0rB,aAAY,WAAa,IAAD,GAEjDgF,EAAWvhB,SACVuhB,EAAW93B,MACX83B,EAAW93B,KAAKo4B,UAChBN,EAAW93B,KAAKo4B,SAASrF,YAG5B+E,EAAW9E,UAAU,CACnB1c,UAAW,CACTtW,KAAM,CACJ6X,gBAAiBvS,EAAuBsjB,MACxC8O,QAAS,CACPpB,IAAKqB,GAAiB,IAExBlsB,OAAQqsB,EAAW93B,OAAX,UAAmB83B,EAAW93B,KAAKo4B,gBAAnC,aAAmB,EAA0BrF,cAGzDE,YAAa,SAACC,EAAMC,GAAU,IAAD,MAC3B,OAAO,2BACFD,GADL,IAEEkF,SAAS,2BACJlF,EAAKkF,UADF,IAEN1hB,MAAM,GAAD,mBACAwc,EAAKkF,SAAS1hB,OADd,YAECyc,EAAKC,gBACLD,EAAKC,gBAAgBgF,SAAS1hB,MAC9B,KAENqc,WAAU,iBAAEI,QAAF,IAAEA,GAAF,UAAEA,EAAMC,uBAAR,iBAAE,EAAuBgF,gBAAzB,aAAE,EAAiCrF,kBAAnC,QAAiD,cAKlE,CAAC4E,EAAeG,IAEnB1wB,IAAM6C,WAAU,WAAO,IAAD,IACnB,UAAAmiB,EAAyBpsB,YAAzB,eAA+B41B,aAC9BqC,EAAyBj4B,OACzB83B,EAAW7a,YACZ,CACDmP,EAAyB7V,QACzB0hB,EAAyB1hB,QACzB6V,EAAyBpsB,KACzBi4B,EAAyBj4B,KACzB83B,IAEF,IAAMphB,EAAK,UAAGohB,EAAW93B,YAAd,aAAG,EAAiBo4B,SAAS1hB,MACxC,OACE,qCACImX,GACA,kBAAC1G,GAAA,EAAD,KACE,kBAACngB,EAAA,EAAD,CAAWC,IAAI,MAAf,kBAGJ,kBAAC,GAAD,CAAUtC,UAAU,MAAM8sB,aAAc0G,EAAgB5hB,QAASuhB,EAAWvhB,SAC1E,kBAACS,EAAA,EAAD,CAAO/U,YAAU,GACf,2BAAO0C,UAAU,wBACf,4BACE,wBAAIA,UAAU,aAAaQ,MAAO,CAAE+F,MAAO,QAC3C,wBAAIvG,UAAU,gCAAd,aACA,wBAAIA,UAAU,gCAAd,eACA,wBAAIA,UAAU,gCAAd,SACA,wBAAIA,UAAU,gCAAd,UACA,wBAAIA,UAAU,gCAAd,aAGJ,+BACG+R,GACCA,EAAMpP,KAAI,SAACyN,EAAMvN,GACf,OACE,wBAAIC,IAAKD,GACNqmB,GACC,wBAAIlpB,UAAU,+BACZ,kBAACyN,GAAA,EAAD,CAAOgV,OAAK,GACV,kBAAC/e,EAAA,EAAD,CACEE,KAAK,WACLwW,SAAQ,yCAAE,WAAOlY,GAAP,gBAAAkD,EAAA,sDACJlD,EAAE6E,OAAOqlB,QACX2G,GACED,GACAA,EAAW,CACTnB,IAAI,GAAD,mBAAMoB,EAAQpB,KAAd,CAAmBvhB,EAAK9L,QAGzBwiB,EADD,OACOiM,QADP,IACOA,OADP,EACOA,EAASpB,IAAItH,QACvB,SAACqJ,GAAD,OAAOA,IAAMtjB,EAAK9L,QAGlBwuB,GACAA,EAAW,CACTnB,IAAK7K,IAdH,2CAAF,wDAmBV,0BAAM9mB,UAAU,uBAIpBkpB,GAAS,4BAAKrmB,EAAQ,GACxB,wBAAI7C,UAAU,8BACZ,kBAAC,IAAD,CACE6H,GAAE,4BAAuBuI,EAAK5B,UAAU0O,cAAtC,YACA9M,EAAK9L,KAGN8L,EAAK4gB,WAGV,wBAAIhxB,UAAU,eACXoQ,EAAK8C,kBAAoBvS,EAAuBsjB,MAC/C,kBAAC4K,GAAA,EAAD,CAAO1vB,MAAM,WAAWiR,EAAK8C,iBAE7B,kBAAC2b,GAAA,EAAD,CAAO1vB,MAAM,SAASiR,EAAK8C,kBAG/B,wBAAIlT,UAAU,eACXoQ,EAAK5B,YAAc5N,EAAW4R,QAC7B,kBAACqc,GAAA,EAAD,CAAO1vB,MAAM,WAAWiR,EAAK5B,WAE7B,kBAACqgB,GAAA,EAAD,CAAO1vB,MAAM,QAAQiR,EAAK5B,YAG9B,wBAAIxO,UAAU,gCACXoQ,EAAKujB,YAAc,YAAc,SAEpC,wBAAI3zB,UAAU,eACZ,kBAACkE,EAAA,EAAD,CACElE,UAAU,0BACVb,MAAM,OACNiF,KAAK,KACLR,KAAK,SACL3B,QAAO,wBAAE,uBAAAmD,EAAA,sEACDoiB,EAAmB,CACvB7V,UAAW,CACTtW,KAAM,CACJiJ,GAAI8L,EAAK9L,GACTqvB,aAAcvjB,EAAKujB,YACnB3C,SAAU5gB,EAAK4gB,aANd,4CAYT,uBAAGhxB,UAAU,kCAEf,kBAAC,IAAD,CACEA,UAAU,iDACV6H,GAAE,4BAAuBuI,EAAK5B,UAA5B,YAAyC4B,EAAK9L,KAEhD,uBAAGtE,UAAU,mCAEf,kBAACkE,EAAA,EAAD,CACElE,UAAU,qBACVb,MAAM,SACNiF,KAAK,KACLR,KAAK,SACL3B,QAAS,WACPixB,EAAc9iB,EAAK9L,IACnBilB,GAAqB,KAGvB,uBAAGvpB,UAAU,4CAQ7B,kBAAC,GAAD,CACEsH,OAAQgiB,EACRT,QAASU,EACTX,SAAU2K,EACV3hB,QAAS0hB,EAAyB1hB,aCnC7BgiB,GA7L2C,SAAC,GAEpD,IAAD,E7DstEoCzqB,E6DvtExCskB,EACI,EADJA,aACI,EAC8ChrB,IAAMC,UAAS,GAD7D,mBACG4mB,EADH,KACsBC,EADtB,KAEEsK,G7DotEkC1qB,E6DptEc,CACpDwI,UAAW,CACTtW,KAAM,CACJ6X,gBAAiBvS,EAAuBsjB,S7DktEjC7a,YAAmF2B,GAA2B5B,I6DvtEvH,EAaAyB,KAbA,mBAWFkpB,EAXE,KAYFC,EAZE,O7D8qEC,SAAuC5qB,GACtC,OAAOC,eAA8F0B,GAA4B3B,G6D9pEnI6qB,GAjBA,mBAeFC,EAfE,KAgBFC,EAhBE,KAmBEC,EAA0B1xB,IAAM0rB,aAAY,WAAa,IAAD,GAE1D0F,EAAoBjiB,SACnBiiB,EAAoBx4B,MACpBw4B,EAAoBx4B,KAAK4Y,mBACzB4f,EAAoBx4B,KAAK4Y,kBAAkBma,YAG9CyF,EAAoBxF,UAAU,CAC5B1c,UAAW,CACTtW,KAAM,CACJ6X,gBAAiBvS,EAAuBsjB,MACxCnd,OACE+sB,EAAoBx4B,OAApB,UACAw4B,EAAoBx4B,KAAK4Y,yBADzB,aACA,EAA4Cma,cAGlDE,YAAa,SAACC,EAAMC,GAAU,IAAD,MAC3B,OAAO,2BACFD,GADL,IAEEta,kBAAkB,2BACbsa,EAAKta,mBADO,IAEfb,eAAe,GAAD,mBACTmb,EAAKta,kBAAkBb,gBADd,YAERob,EAAKC,gBACLD,EAAKC,gBAAgBxa,kBAAkBb,eACvC,KAENgb,WAAU,iBACRI,QADQ,IACRA,GADQ,UACRA,EAAMC,uBADE,iBACR,EAAuBxa,yBADf,aACR,EAA0Cma,kBADlC,QACgD,cAKjE,CAACyF,IArDA,EAuDsDpxB,IAAMC,SAAS,IAvDrE,mBAuDG0xB,EAvDH,KAuD0BC,EAvD1B,KAwDEC,EAAkB,yCAAG,uBAAAlvB,EAAA,sEACnB6uB,EAA2B,CAC/BtiB,UAAW,CACTrN,GAAI8vB,KAHiB,2CAAH,qDAOxB3xB,IAAM6C,WAAU,WACdmoB,EAAa,mBACboG,EAAoBvb,YACnB,IAEH7V,IAAM6C,WAAU,WAAO,IAAD,KACpB,UAAAyuB,EAAiC14B,YAAjC,eAAuCk5B,qBACrCV,EAAoBvb,WACtB,UAAI4b,EAAiC74B,YAArC,aAAI,EAAuCi5B,sBACzCT,EAAoBvb,UACpBiR,GAAqB,MAEtB,CACDwK,EAAiCniB,QACjCsiB,EAAiCtiB,QACjCmiB,EAAiC14B,KACjC64B,EAAiC74B,KACjCw4B,IAEF,IAAMzgB,EAAc,UAClBygB,EAAoBx4B,YADF,aAClB,EAA0B4Y,kBAAkBb,eAC9C,OACE,oCACE,kBAACoP,GAAA,EAAD,KACE,kBAACngB,EAAA,EAAD,CAAWC,IAAI,MAAf,kBAEF,kBAAC,GAAD,CAAUtC,UAAU,MAAM8sB,aAAcqH,EAAyBviB,QAASiiB,EAAoBjiB,SAC5F,kBAACS,EAAA,EAAD,CAAO/U,YAAU,GACf,2BAAO0C,UAAU,wBACf,4BACE,wBAAIA,UAAU,aAAaQ,MAAO,CAAE+F,MAAO,QAC3C,wBAAIvG,UAAU,gCAAd,aACA,wBAAIA,UAAU,gCAAd,eACA,wBAAIA,UAAU,gCAAd,UACA,wBAAIA,UAAU,gCAAd,aAGJ,+BACGoT,GACCA,EAAezQ,KAAI,SAACkP,EAAchP,GAChC,OACE,wBAAIC,IAAKD,GACP,4BAAKA,EAAQ,GACb,wBAAI7C,UAAU,8BACZ,kBAAC,IAAD,CACE6H,GAAE,+BAA0BgK,EAAaqB,gBAAgBgK,cAAvD,YACArL,EAAavN,KAGduN,EAAaO,mBAGlB,wBAAIpS,UAAU,eACX6R,EAAaqB,kBACdvS,EAAuBsjB,MACrB,kBAAC4K,GAAA,EAAD,CAAO1vB,MAAM,WACV0S,EAAaqB,iBAGhB,kBAAC2b,GAAA,EAAD,CAAO1vB,MAAM,SACV0S,EAAaqB,kBAIpB,wBAAIlT,UAAU,gCACX6R,EAAa8hB,YAAc,YAAc,SAE5C,wBAAI3zB,UAAU,eACZ,kBAACkE,EAAA,EAAD,CACElE,UAAU,0BACVb,MAAM,OACNiF,KAAK,KACLR,KAAK,SACL3B,QAAO,wBAAE,uBAAAmD,EAAA,sEACD0uB,EAA2B,CAC/BniB,UAAW,CACTtW,KAAM,CACJiJ,GAAIuN,EAAavN,GACjBqvB,aAAc9hB,EAAa8hB,YAC3BvhB,iBAAkBP,EAAaO,qBAN9B,4CAYT,uBAAGpS,UAAU,kCAEf,kBAAC,IAAD,CACEA,UAAU,iDACV6H,GAAE,+BAA0BgK,EAAaqB,gBAAgBgK,cAAvD,YACArL,EAAavN,KAGf,uBAAGtE,UAAU,mCAEf,kBAACkE,EAAA,EAAD,CACElE,UAAU,qBACVb,MAAM,SACNiF,KAAK,KACLR,KAAK,SACL3B,QAAO,wBAAE,uBAAAmD,EAAA,sDACPivB,EAAyBxiB,EAAavN,IACtCilB,GAAqB,GACrB5W,QAAQC,IAAI,oBAAqB0W,GAH1B,4CAMT,uBAAGtpB,UAAU,4CAQ7B,kBAAC,GAAD,CACEsH,OAAQgiB,EACRV,SAAU0L,EACV1iB,QAASsiB,EAAiCtiB,aChBrC4iB,GAvKgB,WAC7B,I9DizDoCrrB,E8DjzD9B3J,EAAQuG,cADqB,EAEDtD,IAAMC,SAAS,iBAFd,mBAE5B+xB,EAF4B,KAEjBhH,EAFiB,O9DmzDtBrkB,eAA8Ec,GAAoBf,G8DnzD5E,mBAG5BurB,EAH4B,KAGRC,EAHQ,O9DgkE9B,SAAuCxrB,GACtC,OAAOC,eAA8FsB,GAA4BvB,G8D7jEhFyrB,GAJpB,mBAI5BC,EAJ4B,KAIRC,EAJQ,KAK7BC,GAAO,IAAIvwB,MAAOwwB,UAClBC,EAAgC,CACpCjE,SAAU,gBAAkB+D,EAC5BpB,aAAa,EACbjlB,SAAU,GACVvB,YAAa,GACbD,aAAc,GACdgG,gBAAiBvS,EAAuBsjB,OAEpCiR,EAA2C,CAC/C9iB,iBAAkB,yBAA2B2iB,EAC7C7hB,gBAAiBvS,EAAuBsjB,MACxC0P,aAAa,GAETliB,EAAUC,cACVyjB,EAAe,yCAAG,WAAO3mB,GAAP,UAAApJ,EAAA,sEAChBsvB,EAAmB,CACvB/iB,UAAW,CACTtW,KAAK,2BACA45B,GADD,IAEFzmB,iBALgB,2CAAH,sDAUf4mB,EAAuB,yCAAG,uBAAAhwB,EAAA,sEACxByvB,EAAmB,CACvBljB,UAAW,CACTtW,KAAM65B,KAHoB,2CAAH,qDAsB7B,OAfAzyB,IAAM6C,WAAU,WACd,GAAGqvB,EAAyBt5B,KAAK,CAC/B,IAAMiJ,EAAKqwB,EAAyBt5B,KAAKg6B,WAAW/wB,GAC9CgM,EAAI,UAAM9Q,EAAMsI,IAAZ,8BAAqC6sB,EAAyBt5B,KAAKg6B,WAAW7mB,UAAU0O,cAAxF,YAAyG5Y,GACnHmN,EAAQ9L,KAAK2K,MAEf,CAACqkB,EAAyBt5B,OAE5BoH,IAAM6C,WAAU,WACd,GAAGwvB,EAAyBz5B,KAAK,CAC/B,IAAMiJ,EAAKwwB,EAAyBz5B,KAAKw5B,mBAAmBvwB,GACtDgM,EAAI,UAAM9Q,EAAMsI,IAAZ,iCAAwCxD,GAClDmN,EAAQ9L,KAAK2K,MAEf,CAACwkB,EAAyBz5B,OAE1B,kBAAC6E,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACP,yBAAKJ,UAAU,+CACf,uBAAGA,UAAU,0BACTiC,QAAO,yCAAE,WAAOC,GAAP,UAAAkD,EAAA,6DACPlD,EAAEC,iBADK,SAEDizB,IAFC,2CAAF,uDADX,wBAQE,uBAAGp1B,UAAU,0BACXiC,QAAO,yCAAE,WAAOC,GAAP,UAAAkD,EAAA,6DACPlD,EAAEC,iBADK,SAEDgzB,EAAgBv0B,EAAW4R,SAF1B,2CAAF,uDADT,uBAQA,uBAAGxS,UAAU,0BACXiC,QAAO,yCAAE,WAAOC,GAAP,UAAAkD,EAAA,6DACPlD,EAAEC,iBADK,SAEDgzB,EAAgBv0B,EAAW6N,WAF1B,2CAAF,uDADT,yBAQA,kBAAC,IAAD,CAAMzO,UAAU,eAAe6H,GAAE,UAAKrI,EAAMsI,IAAX,uBAAjC,eAGA,kBAAC,IAAD,CACE9H,UAAU,eACV6H,GAAE,UAAKrI,EAAMsI,IAAX,2BAFJ,qBAQJ,kBAAC3H,EAAA,EAAD,CAAKH,UAAU,QACb,kBAAC+B,EAAA,EAAD,KACE,kBAACygB,GAAA,EAAD,KACE,kBAACxE,GAAA,EAAD,CAAKhe,UAAU,yBAAyBwV,KAAK,UAAU8f,MAAI,GACzD,kBAAC/U,GAAA,EAAD,KACE,kBAAC,IAAD,CACEvgB,UAAS,UAAmB,oBAAdy0B,EAAkC,SAAW,GAAlD,aACT5sB,GAAE,UAAKrI,EAAM8Q,KAAX,oBACFrO,QAAS,SAACC,GACRurB,EAAa,qBAGf,uBAAGztB,UAAU,qCAPf,kBAWF,kBAACugB,GAAA,EAAD,KACA,kBAAC,IAAD,CACIvgB,UAAS,UAAmB,UAAdy0B,EAAwB,SAAW,GAAxC,aACT5sB,GAAE,UAAKrI,EAAM8Q,KAAX,UACFrO,QAAS,SAACC,GACRurB,EAAa,WAGf,uBAAGztB,UAAU,+BAPjB,SAWA,kBAACugB,GAAA,EAAD,KACE,kBAAC,IAAD,CACEvgB,UAAS,UAAmB,SAAdy0B,EAAuB,SAAW,GAAvC,aACT5sB,GAAE,UAAKrI,EAAM8Q,KAAX,SACFrO,QAAS,SAACC,GACRurB,EAAa,UAGf,uBAAGztB,UAAU,+BAPf,SAWF,kBAACugB,GAAA,EAAD,KACA,kBAAC,IAAD,CACIvgB,UAAS,UAAmB,cAAdy0B,EAA4B,SAAW,GAA5C,aACT5sB,GAAE,UAAKrI,EAAM8Q,KAAX,cACFrO,QAAS,SAACC,GACRurB,EAAa,UAGf,uBAAGztB,UAAU,+BAPjB,gBAaJ,kBAACoC,EAAA,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOkO,KAAI,UAAK9Q,EAAM8Q,KAAX,UACT,kBAAC,GAAD,CAAUmd,aAAcA,KAE1B,kBAAC,IAAD,CAAOnd,KAAI,UAAK9Q,EAAM8Q,KAAX,eACT,kBAAC,GAAD,CAAemd,aAAcA,KAE/B,kBAAC,IAAD,CAAOnd,KAAI,UAAK9Q,EAAM8Q,KAAX,WACT,kBAAC,GAAD,CAAUmd,aAAcA,KAE1B,kBAAC,IAAD,CAAOnd,KAAI,UAAK9Q,EAAM8Q,KAAX,qBACT,kBAAC,GAAD,CAAkBmd,aAAcA,WC1KnC8H,GAAkD,SAAC,GAEvD,eACL,IAAM1L,EAAkBpnB,IAAMoT,WAAWwR,IACzC,OACE,6BACE,kBAACnjB,EAAA,EAAD,CACElE,UAAU,qCACVb,MAAM,UACNiF,KAAK,KACLR,KAAK,SACL3B,QAAS,WACP4nB,EAAgB3B,uBAAsB,KAGxC,uBAAGloB,UAAU,kCAEf,0BAAMA,UAAU,4CAAhB,cCqFOw1B,GA7F6B,SAAC,GAItC,IhE83DgCrsB,EgEj4DrCqI,EAGI,EAHJA,eACAikB,EAEI,EAFJA,oBACA1jB,EACI,EADJA,MAEM8X,EAAkBpnB,IAAMoT,WAAWwR,IADrC,EAG0B5kB,IAAMC,SAAuB,CAAEivB,IAAK,KAH9D,mBAGGoB,EAHH,KAGYD,EAHZ,OAIsCrwB,IAAMC,SAAmB,IAJ/D,mBAIGswB,EAJH,KAIkB0C,EAJlB,OhE+3DStsB,eAAgFiB,GAAqBlB,GgE/3D9G,mBAMFwsB,EANE,KAOFC,EAPE,KA4BJ,OAnBAnzB,IAAM6C,WAAU,WACdukB,EAAgB5B,oBAAsB6K,EAAW,CAAEnB,IAAK,OACvD,CAAC9H,EAAgB5B,qBAEpBxlB,IAAM6C,WAAU,WACd,IAAMuwB,EACJ9jB,GACAA,EAAMpP,KAAI,SAAC+wB,GACT,OAAOA,EAAEpvB,MAEbuxB,GAAkBH,EAAiBG,KAClC,CAAC9jB,IAEJtP,IAAM6C,WAAU,WAAO,IAAD,GACpB,UAAIswB,EAA0Bv6B,YAA9B,aAAI,EAAgCy6B,eAClCL,GAAuBA,IACvB5L,EAAgB3B,uBAAsB,MAEvC,CAAC0N,EAA0BhkB,UAE5B,oCACE,kBAACvK,EAAA,EAAD,CACErH,UAAU,oBACVkvB,iBAAiB,QACjB9qB,KAAK,KACLwD,UAAQ,EACRN,OAAQuiB,EAAgB5B,mBACxB1gB,OAAQ,kBAAMsiB,EAAgB3B,uBAAsB,IACpD6N,OAAQ,MAER,yBAAK/1B,UAAU,uCACb,4BACEA,UAAU,QACV4D,KAAK,SACL3B,QAAS,kBAAM4nB,EAAgB3B,uBAAsB,KAErD,uBAAGloB,UAAU,qCAEf,wBAAIA,UAAU,kBAAd,kBAEF,kBAACwH,EAAA,EAAD,KACE,kBAAC,GAAD,CACE0hB,OAAK,EACL4J,WAAYA,EACZC,QAASA,EACTC,cAAeA,KAGnB,yBAAKhzB,UAAU,gBACb,kBAACkE,EAAA,EAAD,CACElE,UAAU,UACVb,MAAM,OACNyE,KAAK,SACLklB,WAAUiK,GAAWA,EAAQpB,IAAI9rB,OAAS,GAC1C5D,QAAO,wBAAE,uBAAAmD,EAAA,8DACPoM,GACEuhB,GACAA,EAAQpB,IAAI9rB,OAAS,GAHhB,qCAIE8vB,EAAoB,CACzBhkB,UAAW,CACTtW,KAAM,CACJmW,iBACAuhB,cARD,4CAcP6C,EAA0BhkB,QAG1B,kBAACwV,GAAA,EAAD,CAASjoB,MAAM,YAFf,iB,0KCtFd,IA2Ce62B,GA3C6C,SAAC,GAItD,IAHL/zB,EAGI,EAHJA,QACAqR,EAEI,EAFJA,KACA1B,EACI,EADJA,QAEMqkB,EAAmB,CACvBrlB,MAAM,EACNC,UAAU,EACVC,cAAeolB,GACfllB,iBAAkB,CAChBC,oBAAqB,mBAGzB,OACE,mBACE7P,IAAKA,YAAF,OAOH,YAAC8C,EAAA,EAAD,CACEN,KAAK,SACL5D,UAAU,mCACViC,QAASA,EACT6mB,SAAUlX,GAETA,EAAU,YAAC,KAAD,CAAQlV,QAASu5B,IAAuB,UAErD,YAAC,IAAD,CACEh0B,QAAS,SAACC,GACR0P,GAAW1P,EAAEC,kBAEf0F,GAAIyL,EACJtT,UAAU,0CALZ,YC1COm2B,GAAe,SAAC7iB,GAK3B,OAJoB8iB,GAAc9iB,EAAK4J,eACVtJ,QAAQ,eAAgB,IAClDA,QAAQ,OAAQ,KAChBA,QAAQ,MAAO,MASPwiB,GAAgB,SAAC9iB,GAC5B,IAAM+iB,EAA0B,CAC9BC,UAAW,IAg0Bb,OA9zBAD,EAASC,UAAY,CACnx2C,EAAKM,QAAQ,uBAAuB,SAAUxO,GACxD,OAAOixB,EAASC,UAAUlxB,IAAMA,MC7yB9B2kD,GAAUxpD,EAAQ,KAKXypD,GAA8D,CACzE,CACErtC,MAAO,KACP5gB,MAAO,qBAILkuD,GAAmB,CACvB,CACEttC,MAAO,GACP5gB,MAAO,cAET,CACE4gB,MAAOjc,EAAUmT,KACjB9X,MAAO,QAET,CACE4gB,MAAOjc,EAAU+e,KACjB1jB,MAAO,QAET,CACE4gB,MAAOjc,EAAUwpD,QACjBnuD,MAAO,YAiSIouD,GA7RuD,SAAC,GAEhE,IAAD,EnEmhFyChhD,EmEphF7CihD,EACI,EADJA,eAEQ1qC,EAAgBvP,cAAhBuP,YADJ,EAE8Cjd,IAAMC,UAAS,GAF7D,mBAEG2nD,EAFH,KAEsBC,EAFtB,OnEohFSlhD,eAAgGoC,GAA6BrC,GmEjhFnIohD,EAHH,oBAIExnC,EAAeD,GACnB,aADkC,UAE/BpD,EAAc,UAAY,KAN3B,EnE08EC,SAAsCvW,GACnC,OAAOC,gBAAqFmC,GAA0BpC,GmEn8E5EqhD,GAR9C,mBAQGC,EARH,KAQsBC,EARtB,KASJjoD,IAAM6C,WAAU,WACdoa,GACE+qC,EAAkB,CAChB94C,UAAW,CACTrN,GAAIob,OAGT,CAAC+qC,EAAmB/qC,IAhBnB,MAoBAjd,IAAMC,SAASunD,GAAiB,IApBhC,mBAkBFU,EAlBE,KAmBFC,EAnBE,OAqB8CnoD,IAAMC,SACtDsnD,GAAiB,IAtBf,mBAqBGa,EArBH,KAqBsBC,EArBtB,OAwBsDroD,IAAMC,SAC9DshB,GAA0B,IAzBxB,mBAwBGS,EAxBH,KAwB0BC,EAxB1B,KA2BErF,EAAa,UAAGqrC,EAAqBrvD,YAAxB,aAAG,EAA2B0vD,aACjDtoD,IAAM0Z,SAAQ,WACZ,GAAIkD,EAAe,CACjB,IAAM2rC,EAAQ,OAAGZ,QAAH,IAAGA,OAAH,EAAGA,EAAgBx8C,MAC/B,SAAC8lB,GAAD,OAAOA,EAAEpvB,KAAO+a,EAAc4rC,YAEhCt4C,QAAQC,IAAI,gBAAiByM,GAC7B2rC,GACEF,EAAqB,CACnBnuC,MAAOquC,EAAS1mD,GAChBvI,MAAOivD,EAAS3tC,gBAEpButC,EAA4B,CAC1BjuC,MAAO0C,EAAclC,UACrBphB,MAAOsjB,EAAclC,YAEvB6G,GAA0BpW,MAAK,SAAC4T,EAAM1e,GAIpC,OAHI0e,EAAK7E,SAAL,OAAe0C,QAAf,IAAeA,OAAf,EAAeA,EAAenM,kBAChCwR,EAAyBV,GAA0BlhB,IAE9C,WAGV,CAACuc,IAlDA,MnEgwEC,SAAoClW,GACnC,OAAOC,eAAwF6B,GAAyB9B,GmE1sE1H+hD,GAvDA,mBAqDFC,EArDE,KAsDFC,EAtDE,OA2DAjgD,KA3DA,mBAyDFkgD,EAzDE,KA0DFC,EA1DE,OA6DoD7oD,IAAMC,SAC5DsnD,IA9DE,mBA6DGuB,EA7DH,KA6DyBC,EA7DzB,KAiEA5yC,GAAmC,CACrCyE,eAA4B,OAAbgC,QAAa,IAAbA,OAAA,EAAAA,EAAehC,gBAAiB,GAC/C/J,MAAmB,OAAb+L,QAAa,IAAbA,OAAA,EAAAA,EAAe/L,OAAQ,GAC7B6J,WAAwB,OAAbkC,QAAa,IAAbA,OAAA,EAAAA,EAAelC,YAAazc,EAAUmT,KACjDo3C,UAAuB,OAAb5rC,QAAa,IAAbA,OAAA,EAAAA,EAAe4rC,WAAY,KACrC/3C,iBACe,OAAbmM,QAAa,IAAbA,OAAA,EAAAA,EAAenM,kBAAmBvS,EAAuBsjB,MAC3D5e,cAA2B,OAAbga,QAAa,IAAbA,OAAA,EAAAA,EAAeha,eAAgB,GAG/C5C,IAAM0Z,SAAQ,WACZ,IAAKiuC,EACH,OAAOJ,GAETwB,EAAwB,GAAD,OAClBxB,GADkB,YAElBI,EAAeznD,KAAI,SAAC8oD,GAKrB,MAJa,CACX9uC,MAAO8uC,EAAGnnD,GACVvI,MAAO0vD,EAAGpuC,uBAKf,CAAC+sC,IAzFA,OA2FwC3nD,IAAMC,UAAS,GA3FvD,qBA2FGyV,GA3FH,MA2FmBC,GA3FnB,MA4FEG,GAASC,aAAU,CACvBC,oBAAoB,EACpBC,iBAAkBP,GAClBQ,eAAgBR,GAChBS,iBACAE,iBAAkBC,OAAaC,MAAM,CACnCqE,cAAetE,OAEZG,SAAS,uCACZ5F,KAAMyF,OAAaE,OAAOC,SAAS,4BACnChG,gBAAiB6F,OAEdG,SAAS,oCACZiE,UAAWpE,OAAaE,OAAOC,SAAS,mCAE1CE,SAAS,WAAD,8BAAE,WAAOC,GAAP,gCAAAjU,EAAA,6DACAkO,EAA2B+F,EAA3B/F,KAASo4C,EADT,aAC2BryC,EAD3B,UAEFsyC,EAAWr4C,EAAK2F,OAFd,SAGUsxC,EAA4B,CAC5C54C,UAAW,CACT2B,KAAMq4C,EACNrnD,GAAIob,KANA,UAGFoH,EAHE,mBASJA,EAAIzrB,YATA,aASJ,EAAUuwD,qBATN,uBAUNrzC,GAAOszC,UAAU,CACfv4C,KAAM,iDAXF,8BAeJoM,EAfI,kCAgBe2rC,EAAwB,CAC3C15C,UAAW,CACTtW,KAAK,aAAGiJ,GAAIob,EAAapM,KAAMq4C,GAAaD,MAlB1C,QAgBAn+C,EAhBA,QAqBN,UAAIA,EAAOlS,YAAX,aAAI,EAAaywD,kBACf1mC,QAAMC,gBAAgBtC,GAtBlB,yCAyBeooC,EAAwB,CAC3Cx5C,UAAW,CACTtW,KAAK,aAAGiY,KAAMq4C,GAAaD,MA3BzB,QAyBAn+C,EAzBA,QA8BN,UAAIA,EAAOlS,YAAX,aAAI,EAAa0wD,mBACf3mC,QAAMC,gBAAgBtC,GACtBxK,GAAO+M,aAhCH,4CAAF,mDAAC,KAqCX,OAAIolC,EAAqB94C,QAChB,kBAAC,GAAD,MAIP,oCACE,kBAACoI,GAAA,EAAD,CAAMZ,SAAUb,GAAOgN,cACrB,kBAACrlB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC4B,EAAA,EAAD,KACE,kBAACygB,GAAA,EAAD,CAAYxiB,UAAU,qDACpB,wBAAIA,UAAU,SACV0f,EAAoC,oBAAtB,qBAElB,kBAACssC,GAAD,CACE/pD,QAAS,WACPsW,GAAOmC,aACPtC,IAAkB,IAEpB9E,KAAI,oBACJ1B,QACEw5C,EAAwBx5C,SACxB05C,EAAuB15C,WAI7B,kBAACxP,EAAA,EAAD,KACE,kBAAClC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKH,UAAU,OAAOI,GAAG,KACvB,kBAAC+Z,GAAA,EAAD,KACE,kDACA,kBAACzW,EAAA,EAAD,CACEC,YAAY,kBACZK,KAAK,gBACLJ,KAAK,OACLwW,SAAU,SAAClY,GACTqW,GAAO8B,aAAanY,GACpB,IAAM+pD,EAAgB91B,GAAaj0B,EAAE6E,OAAO4V,OAC5C0tC,GACE9xC,GAAOkN,cAAc,OAAQwmC,IAEjCnoD,OAAQyU,GAAO+B,WACfqC,MAAOpE,GAAOc,OAAOgE,eAAiB,GACtCrd,UAAWuY,GAAOiC,OAAO6C,eAAiB,gBAG5C,kBAAC9C,GAAD,CAAcxE,QAASwC,GAAOiC,OAAO6C,kBAGzC,kBAACld,EAAA,EAAD,CAAKC,GAAG,IAAIJ,UAAU,QACpB,kBAACma,GAAA,EAAD,KACE,8CACA,kBAAC,KAAD,CACEna,UAAU,oCACVoa,SAAU,SAACoL,GACTjN,GAAOkN,cAAc,WAAYD,EAAI7I,OACrCmuC,EAAqBtlC,IAEvB7I,MAAOkuC,EACPnlC,gBAAgB,eAChB/hB,YAAY,qBACZK,KAAK,WACLtH,QAAS6uD,IAEX,kBAAChxC,GAAD,CAAcxE,QAASwC,GAAOiC,OAAOywC,aAIzC,kBAAC9qD,EAAA,EAAD,CAAKC,GAAG,IAAIJ,UAAU,QACpB,kBAACma,GAAA,EAAD,KACE,uCACA,kBAAC,KAAD,CACEna,UAAU,oCACVoa,SAAU,SAACoL,GACTjN,GAAOkN,cAAc,YAAaD,EAAI7I,OACtCiuC,EAA4BplC,IAE9B7I,MAAOguC,EACPjlC,gBAAgB,eAChB/hB,YAAY,qBACZK,KAAK,YACLtH,QAASutD,KAEX,kBAAC1vC,GAAD,CAAcxE,QAASwC,GAAOiC,OAAO2C,cAIzC,kBAAChd,EAAA,EAAD,CAAKC,GAAG,IAAIJ,UAAU,QACpB,kBAACma,GAAA,EAAD,KACE,6CACA,kBAAC,KAAD,CACEna,UAAU,oCACVoa,SAAU,SAACoL,GACTd,EAAyBc,GACzBjN,GAAOkN,cAAc,kBAAmBD,EAAI7I,QAE9CA,MAAO8H,EACPiB,gBAAgB,eAChB/hB,YAAY,qBACZK,KAAK,kBACLtH,QAASsnB,KAEX,kBAACzJ,GAAD,CAAcxE,QAASwC,GAAOiC,OAAOtH,oBAGzC,kBAAC/S,EAAA,EAAD,CAAKH,UAAU,OAAOI,GAAG,KACvB,kBAAC+Z,GAAA,EAAD,KACE,uCACA,yBAAKna,UAAU,6BACb,kBAAC0D,EAAA,EAAD,CACEC,YAAY,OACZK,KAAK,OACLJ,KAAK,OACLwW,SAAU7B,GAAO8B,aACjBvW,OAAQyU,GAAO+B,WACfqC,MAAOpE,GAAOc,OAAO/F,MAAQ,GAC7BtT,UAAWuY,GAAOiC,OAAOlH,MAAQ,cACjCwV,SAAUuhC,IAEZ,0BACErqD,UAAU,sBACViC,QAAS,kBAAMqoD,GAAqB,KAEpC,yBAAKjqD,IAAI,UAAUC,IAAKypD,OAG5B,kBAACxvC,GAAD,CAAcxE,QAASwC,GAAOiC,OAAOlH,iBCsC5C44C,GA3U6D,WAAO,IAAD,YpEunEtC/iD,EoEllEtCihD,EApCErnC,EAAeD,GAAgB,gBAAiB,UAC9Cxe,EAAO6L,cAAP7L,GAFwE,EpEwnEjE8E,gBAAmFyB,GAAyB1B,GoExnE3C,mBAI9EgjD,EAJ8E,KAK9EC,EAL8E,OAOnDxhD,KAAtB2pB,EAPyE,sBAW5EnqB,KAX4E,mBAS9Eod,EAT8E,KAU9EC,EAV8E,OpE84D3E,SAAkCte,GACjC,OAAOC,eAAoFkB,GAAuBnB,GoEh4DpHkjD,GAf4E,mBAa9EC,EAb8E,KAc9EC,EAd8E,KAiB1EC,EAAqBlhD,GAA0B,CACnDqG,UAAW,CACTtW,KAAM,CACJoxD,eAAgB3rD,EAAe4rD,IAC/BvvC,UAAWzc,EAAUmT,KACrB84C,gBAAgB,MAtB0D,EA2BhDlqD,IAAMC,SAAS,IA3BiC,mBA2BzEgnB,EA3ByE,KA2B/DC,EA3B+D,KA6BhFlnB,IAAM6C,WAAU,WACdhB,GACE6nD,EAAqB,CACnBx6C,UAAW,CACTrN,UAGL,CAAC6nD,EAAsB7nD,IAEtBkoD,EAAmBnxD,OACrB+uD,EAAiBoC,EAAmBnxD,KAAKsiB,cAAcD,YAGzD,IAeIwO,EAEA0gC,EAjBErB,EAAuB9oD,IAAM0Z,SAAQ,WACzC,OAAKiuC,EAGC,GAAN,mBACKJ,IADL,YAEKI,EAAeznD,KAAI,SAAC8oD,GAKrB,MAJa,CACX9uC,MAAO8uC,EAAGnnD,GACVvI,MAAO0vD,EAAGpuC,oBAPP2sC,KAYR,CAACI,IAIAgC,EAAwB/wD,OAC1BuxD,EAAmBR,EAAwB/wD,KAAKyW,gBAChDoa,EAAeq/B,EAAqB39C,MAClC,SAAC1L,GAAD,eAAOA,EAAEya,SAAF,UAAYiwC,SAAZ,iBAAY,EAAkBrtC,iBAA9B,aAAY,EAA6Bjb,QAGpD,IAAMyN,EAAQof,KAAEC,UAAF,UAAYw7B,SAAZ,aAAY,EAAkB76C,OACtC0jB,EAAsB,WAC1B22B,EAAwB9zC,SAAW8zC,EAAwB9zC,WAE7D7V,IAAM6C,WAAU,YACVmiB,EAAyBpsB,MAAQkxD,EAAgClxD,QACnEo6B,IACA82B,EAAgClxD,MAC9BsuB,EAAY4iC,EAAgClxD,KAAKwxD,cAAcvoD,OAElE,CACDmjB,EAAyB7V,QACzB26C,EAAgC36C,UAElC,IAAIgH,EAAsC,CACxCtU,GAAE,UAAEsoD,SAAF,aAAE,EAAkBtoD,GACtB4O,gBAAe,UAAE05C,SAAF,aAAE,EAAkB15C,gBACnCd,iBAAgB,UAAEw6C,SAAF,aAAE,EAAkBx6C,kBAEhCmG,EAASC,aAAU,CACvBC,oBAAoB,EACpBG,cAAeA,EACfE,iBAAkBC,OAAaC,MAAM,CACnC5G,iBAAkB2G,OAEfG,SAAS,4CAEdE,SAAS,WAAD,8BAAE,WAAOC,GAAP,kBAAAjU,EAAA,sEACamvB,EAAmB,CACtC5iB,UAAW,CACTtW,KAAMge,KAHF,OACF9L,EADE,QAMR,UAAIA,EAAOlS,YAAX,aAAI,EAAak5B,qBACfnP,QAAMC,gBAAgBtC,GAPhB,2CAAF,mDAAC,KAYX,OAAIqpC,EAAwBx6C,QACnB,oCAAG,cAIV,kBAAC7P,EAAA,EAAD,KACE,kBAACygB,GAAA,EAAD,CAAYxiB,UAAU,qDACpB,wBAAIA,UAAU,SAAd,yBAEF,kBAACoC,EAAA,EAAD,KACE,kBAAC4X,GAAA,EAAD,CAAMZ,SAAUb,EAAOgN,cACrB,kBAACrlB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKyyB,GAAG,MACN,yBAAK5yB,UAAU,uDACb,kBAACma,GAAA,EAAD,CAAWna,UAAU,QACnB,qDACA,kBAAC0D,EAAA,EAAD,CACEC,YAAY,qBACZK,KAAK,mBACLJ,KAAK,OACLwW,SAAU7B,EAAO8B,aACjBvW,OAAQyU,EAAO+B,WACfqC,MAAOpE,EAAOc,OAAOjH,kBAAoB,GACzCpS,UAAWuY,EAAOiC,OAAOpI,kBAAoB,gBAE/C,kBAACmI,GAAD,CAAcxE,QAASwC,EAAOiC,OAAOpI,oBAGvC,6BACE,kBAAClO,EAAA,EAAD,CACEN,KAAK,SACL5D,UAAU,oCAFZ,UAMA,kBAAC,IAAD,CACE6H,GAAE,+BACF7H,UAAU,0CAFZ,aASN,kBAACG,EAAA,EAAD,CAAKC,GAAG,IAAIJ,UAAU,IACpB,kBAACma,GAAA,EAAD,CAAWna,UAAU,QACnB,6CACA,kBAAC,KAAD,CACEA,UAAU,oCACVoa,SAAU,SAACoL,GACTjN,EAAOkN,cAAc,cAAeD,EAAI7I,QAE1CuP,aAAcA,EACdxG,gBAAgB,eAChB/hB,YAAY,2BACZK,KAAK,cACLtH,QAAS6uD,IAEX,kBAAChxC,GAAD,CAAcxE,QAASwC,EAAOiC,OAAOkF,gBAGzC,kBAACvf,EAAA,EAAD,CAAKyyB,GAAG,MACN,yBAAK5yB,UAAU,aACb,yBAAKA,UAAU,+DACb,0BACEQ,MAAO,CAAE+F,MAAO,OAChBvG,UAAU,qDAFZ,SAMA,0BACEQ,MAAO,CAAE+F,MAAO,OAChBvG,UAAU,qDAFZ,aAMA,0BACEQ,MAAO,CAAE+F,MAAO,OAChBvG,UAAU,qDAFZ,SAMA,0BACEQ,MAAO,CAAE+F,MAAO,OAChBvG,UAAU,qDAFZ,eAMA,0BACEQ,MAAO,CAAE+F,MAAO,OAChBvG,UAAU,qDAFZ,WAOF,6BACE,oCACG+R,GACCA,EACG5M,MAAK,SAACC,EAAGjK,GAAJ,OAAUiK,EAAEC,aAAelK,EAAEkK,gBAClC1C,KAAI,SAAC+wB,EAAGo5B,GACP,OACE,yBACE9sD,UAAU,8DACV8C,IAAKgqD,GAEL,0BACEtsD,MAAO,CAAE+F,MAAO,OAChBvG,UAAU,qDAEV,kBAAC0D,EAAA,EAAD,CACEwoB,aAAcwH,EAAEruB,aAChBzB,KAAK,SACLwW,SAAU,SAAClY,GACTwxB,EAAEruB,aAAerK,SAASkH,EAAE6E,OAAO4V,WAIzC,0BACEnc,MAAO,CAAE+F,MAAO,OAChBvG,UAAU,wCAEV,kBAAC,IAAD,CACE6H,GAAE,yCAAoC6rB,EAAEllB,UAAU0O,cAAhD,YACAwW,EAAEpvB,IAEJtE,UAAU,gBAET0zB,EAAE1C,WAGP,0BACExwB,MAAO,CAAE+F,MAAO,OAChBvG,UAAU,eAET0zB,EAAEllB,YAAc5N,EAAW4R,QAC1B,kBAACqc,GAAA,EAAD,CAAO1vB,MAAM,WAAWu0B,EAAEllB,WAE1B,kBAACqgB,GAAA,EAAD,CAAO1vB,MAAM,QAAQu0B,EAAEllB,YAG3B,0BACEhO,MAAO,CAAE+F,MAAO,OAChBvG,UAAU,eAET0zB,EAAExgB,kBACHvS,EAAuBsjB,MACrB,kBAAC4K,GAAA,EAAD,CAAO1vB,MAAM,WACVu0B,EAAExgB,iBAGL,kBAAC2b,GAAA,EAAD,CAAO1vB,MAAM,SACVu0B,EAAExgB,kBAIT,yBAAKlT,UAAU,UACb,kBAACkE,EAAA,EAAD,CACElE,UAAU,0BACVb,MAAM,OACNiF,KAAK,KACLR,KAAK,SACL3B,QAAO,yCAAE,WAAOC,GAAP,UAAAkD,EAAA,6DACPlD,EAAEC,iBADK,SAEDqlB,EAAmB,CACvB7V,UAAW,CACTtW,KAAM,CACJiJ,GAAIovB,EAAEpvB,GACNe,aAAcquB,EAAEruB,iBANf,2CAAF,uDAYP,uBAAGrF,UAAU,kCAEf,kBAAC,IAAD,CACE6H,GAAE,yCAAoC6rB,EAAEllB,UAAU0O,cAAhD,YACAwW,EAAEpvB,IAEJtE,UAAU,kDAEV,uBAAGA,UAAU,mCAEf,kBAACkE,EAAA,EAAD,CACElE,UAAU,iCACVb,MAAM,SACNiF,KAAK,KACLR,KAAK,SACL3B,QAAO,yCAAE,WAAOC,GAAP,UAAAkD,EAAA,6DACPlD,EAAEC,iBADK,SAEDmqD,EAA0B,CAC9B36C,UAAW,CACTrN,GAAIovB,EAAEpvB,MAJH,2CAAF,uDASNioD,EAAgC36C,SACjC8X,IAAagK,EAAEpvB,GACb,kBAAC8iB,GAAA,EAAD,CAASjoB,MAAM,YAEf,uBAAGa,UAAU,2CAQ/B,kBAAC,GAAD,OACK,MAGX,kBAAC,GAAD,CACEwR,eAAc,UAAEo7C,SAAF,aAAE,EAAkBtoD,GAClCmxB,oBAAqBA,EACrB1jB,MAAK,UAAE66C,SAAF,aAAE,EAAkB76C,aClTxBg7C,GA5CkB,WAC/B,IAAMvtD,EAAQuG,cACNnC,EAASuM,cAATvM,KACF6N,EAAUC,cAChB,IAAI9N,EAEF,OADA6N,EAAQ9L,KAAK,UACN,qCAET,ICtBoCqnD,EDsB9BC,GCtB8BD,EDsBQppD,GCrB/BmQ,OAAO,GAAGC,cAAgBg5C,EAAI/xD,MAAM,GDsBjD,OACE,oCACE,kBAAC,GAAD,KACA,yBAAK+E,UAAU,sBACT,wBAAIA,UAAU,SAASitD,GACvB,uBAAGjtD,UAAU,YAAb,oCACoCitD,EADpC,eAKN,yBAAKjtD,UAAU,WACb,kBAAC,GAAD,CAAyBkT,gBAAiB+5C,GAC1C,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAO38C,KAAI,UAAK9Q,EAAMsI,IAAX,8BACP,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOwI,KAAI,UAAK9Q,EAAMsI,IAAX,2CACT,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOwI,KAAM,CAAC,GAAD,OAAI9Q,EAAMsI,IAAV,oCAA0CtI,EAAMsI,IAAhD,iCACX,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOwI,KAAM,CAAC,GAAD,OAAI9Q,EAAMsI,IAAV,gCAAsCtI,EAAMsI,IAA5C,wBACX,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOwI,KAAI,UAAK9Q,EAAMsI,MACpB,kBAAC,GAAD,YE+DGsX,GArG2B,WACxC,IvEo0CoCjW,EuEp0C9B3J,EAAQuG,cADgC,EAEItD,IAAMC,UAAS,GAFnB,mBAEvC4mB,EAFuC,KAEpBC,EAFoB,OAGd9mB,IAAMC,SAAS,IAHD,mBAGvCgnB,EAHuC,KAG7BC,EAH6B,OAIXzgB,GAAiB,CAClDyI,UAAW,CACTtW,KAAM,MAFFA,EAJsC,EAItCA,KAAMuW,EAJgC,EAIhCA,QAAS0G,EAJuB,EAIvBA,QAKjB40C,EAAU,yCAAG,uBAAA9nD,EAAA,sEACX+nD,EAAmB,CACvBx7C,UAAW,CACTrN,GAAIolB,KAHS,2CAAH,qDAT8B,EvEs0CjCtgB,eAA8EC,GAAoBF,GuEt0CjE,mBAiB5CgkD,EAjB4C,KAkB5CC,EAlB4C,KAyB9C,GAJA3qD,IAAM0Z,SAAQ,WAAO,IAAD,GAClB,UAAAixC,EAAyB/xD,YAAzB,eAA+B6xD,aAAc50C,MAC5C,CAAC80C,EAAyB/xD,KAAMid,IAE/B1G,EACF,OAAO,kBAAC,GAAD,MAET,IAAMiO,EAAK,OAAGxkB,QAAH,IAAGA,OAAH,EAAGA,EAAMukB,SAASC,MAC7B,OACE,kBAAC9d,EAAA,EAAD,KACE,kBAACK,EAAA,EAAD,KACE,kBAACiQ,EAAA,EAAD,CAAO/U,YAAU,GACf,2BAAO0C,UAAU,wBACf,4BACE,wBAAIA,UAAU,aAAaQ,MAAO,CAAE+F,MAAO,QAC3C,wBAAIvG,UAAU,gCAAd,aACA,wBAAIA,UAAU,gCAAd,cACA,wBAAIA,UAAU,gCAAd,UACA,wBAAIA,UAAU,gCAAd,aAGJ,+BACG6f,GACCA,EAAMld,KAAI,SAACqc,EAAMnc,GACf,OACE,wBAAIC,IAAKD,GACP,4BAAKA,EAAQ,GACb,wBAAI7C,UAAU,8BACXgf,EAAKE,UAER,wBAAIlf,UAAU,eACXgf,EAAKO,UAAUlC,eAElB,wBAAIrd,UAAU,eACXgf,EAAKQ,OAAOnK,UAAY,IAAM2J,EAAKQ,OAAOlK,UAE7C,wBAAItV,UAAU,eACZ,kBAACkE,EAAA,EAAD,CACElE,UAAU,0BACVb,MAAM,OACNiF,KAAK,KACLR,KAAK,UAEL,uBAAG5D,UAAU,kCAEf,kBAAC,IAAD,CACEA,UAAU,iDACV6H,GAAE,UAAKrI,EAAMsI,IAAX,YAAkBkX,EAAK1a,GAAvB,UAEF,uBAAGtE,UAAU,mCAEf,kBAACkE,EAAA,EAAD,CACElE,UAAU,qBACVb,MAAM,SACNiF,KAAK,KACLR,KAAK,SACL3B,QAAS,WACPsnB,GAAqB,GACrBI,EAAY3K,EAAK1a,MAGnB,uBAAGtE,UAAU,6CAS/B,kBAAC,GAAD,CACEsH,OAAQgiB,EACR1X,QAASw7C,EAAyBx7C,QAClCgX,SAAUskC,EACVrkC,QAASU,MClEF8jC,GA5BoB,WACjC,IAAM7tD,EAAQuG,cACd,OACE,oCACE,kBAAC,GAAD,KACI,yBAAK/F,UAAU,sBACb,wBAAIA,UAAU,SAAd,QACA,uBAAGA,UAAU,YAAb,qBAGN,yBAAKA,UAAU,WACb,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACP,yBAAKJ,UAAU,+CACb,kBAAC,IAAD,CAAMA,UAAU,eAAe6H,GAAE,UAAKrI,EAAMsI,IAAX,iBAAjC,qBAKJ,kBAAC3H,EAAA,EAAD,CAAKH,UAAU,QACb,kBAAC,GAAD,W,qeCMZ,IAAM+pD,GAAUxpD,EAAQ,KAElB+sD,GAA0B,CAC9B,CACE3wC,MAAO,IACP5gB,MAAO,qBAqRIwxD,GAjRgC,WAAO,IAAD,kBzEktCjBpkD,EyEhsC9B6V,EAjBI1a,EAAO6L,cAAP7L,GAD2C,EzEmtCpC8E,gBAAmEJ,GAAiBG,GyEntChD,mBAE5CqkD,EAF4C,KAE9BC,EAF8B,OzEs0C9C,SAAmCtkD,GAClC,OAAOC,eAAsFE,GAAwBH,GyEp0C1FukD,GAA1BC,EAH4C,sBzE+lC9C,SAA+BxkD,GAC9B,OAAOC,eAA8EN,GAAoBK,GyE5lClFykD,GAAtBC,EAJ4C,sBzEqoC9C,SAA+B1kD,GAC9B,OAAOC,eAA8EL,GAAoBI,GyEjoClF2kD,GAAtBC,EAL4C,sBAM3BtrD,IAAMC,SAAwB,MANH,mBAM5C4N,EAN4C,KAMtCuV,EANsC,OAODpjB,IAAMC,UAAS,GAPd,mBAO5C2nD,EAP4C,KAOzBC,EAPyB,OAQH7nD,IAAMC,SACpD4qD,IATiD,mBAQ5CU,EAR4C,KAQ1BC,EAR0B,OAWDxrD,IAAMC,SACtDsrD,EAAiB,IAZgC,mBAW5CE,EAX4C,KAWzBC,GAXyB,KAcnD1rD,IAAM6C,WAAU,WACdiT,GAAOkN,cAAc,QAASnV,KAE7B,CAACA,IAEJ7N,IAAM6C,WAAU,WACThB,GACLkpD,EAAa,CACX77C,UAAW,CAAErN,UAEd,CAACkpD,EAAclpD,IAClB,IAQMoX,GAAc,UzEs2Ef,SAA+BvS,GAC9B,OAAOC,YAA2EgC,GAAuBjC,GyE/2ExFilD,CAAsB,CAC3Cz8C,UAAW,CACTtW,KAAM,CACJ6X,gBAAiBvS,EAAuBsjB,MACxC0oC,gBAAgB,MAIgBtxD,YAAlB,aAAG,EAAqBsiB,cAAcD,WAC1Djb,IAAM0Z,SAAQ,WACRT,IACFuyC,EAAoB,GAAD,OACdX,GADc,YAEd5xC,GAAe/Y,KAAI,SAAC+wB,GACrB,MAAO,CACL/W,MAAO+W,EAAEpvB,GACTvI,MAAO23B,EAAErW,uBAKhB,CAAC3B,KAEJ,IACmC,GAD/B0P,GAAqB,IACzB,UAAIqiC,EAAgBpyD,YAApB,aAAI,EAAsBgzD,WACxBrvC,EAAI,WAAGyuC,EAAgBpyD,YAAnB,cAAG,GAAsBgzD,QAC7BjjC,GAAa1rB,EAAOE,WAAaof,EAAK5R,OAExC,IAAMiL,GAAKzC,KACLgD,GAA8B,CAClCsG,UAAc,QAAJ,EAAAF,SAAA,eAAME,WAAY,GAC5Bpd,SAAa,QAAJ,EAAAkd,SAAA,eAAMld,UAAW,GAC1BsL,OAAW,QAAJ,EAAA4R,SAAA,eAAM5R,QAAS,GACtBsS,aAAiB,QAAJ,EAAAV,SAAA,eAAMO,UAAUjb,KAAM,GACnCgqD,SAAUj2C,GAAG/T,GACbgP,MAAU,QAAJ,EAAA0L,SAAA,eAAM1L,OAAQ,GACpBi7C,SAAQ,UAAEvvC,SAAF,aAAE,EAAMuvC,UA7DiC,GA+DP9rD,IAAMC,UAAS,GA/DR,qBA+D5CyV,GA/D4C,MA+D5BC,GA/D4B,MAgE7Co2C,GAAoBl+C,IAAI,UAAI0O,SAAJ,aAAI,EAAM5R,OAClCmL,GAASC,aAAU,CACvBC,oBAAoB,EACpBG,iBACAF,iBAAkBP,GAClBQ,eAAgBR,GAChBW,iBAAkBC,OAAaC,MAAM,CACnCkG,SAAUnG,OAAaG,SAAS,mCAElCE,SAAS,WAAD,8BAAE,WAAOC,GAAP,oCAAAjU,EAAA,6DACAkO,EAA2B+F,EAA3B/F,KAASo4C,EADT,aAC2BryC,EAD3B,UAEFsyC,EAAWr4C,EAAK2F,OAFd,SAGU00C,EAAuB,CACvCh8C,UAAW,CACT2B,KAAMq4C,EACNrnD,QANI,UAGFwiB,EAHE,mBASJA,EAAIzrB,YATA,aASJ,EAAUozD,gBATN,uBAUNl2C,GAAOszC,UAAU,CACfv4C,KAAM,iDAXF,8BAeJhP,EAfI,kCAgBeypD,EAAmB,CACtCp8C,UAAW,CACTtW,KAAK,aAAGiJ,KAAGgP,KAAMq4C,GAAaD,MAlB5B,eAgBAn+C,EAhBA,OAqBAwV,EAAeD,GAAgB,OAAQ,YAC7C,UAAIvV,EAAOlS,YAAX,aAAI,EAAaqzD,aACftpC,QAAMC,gBAAgBtC,GAvBlB,4CA2Be8qC,EAAmB,CACtCl8C,UAAW,CACTtW,KAAK,aAAGiY,KAAMq4C,GAAaD,MA7BzB,QA2BAn+C,EA3BA,OAgCAwV,EAAeD,GAAgB,OAAQ,YAC7C,UAAIvV,EAAOlS,YAAX,aAAI,EAAaszD,cACfvpC,QAAMC,gBAAgBtC,GACtBxK,GAAO+M,aAnCH,4CAAF,mDAAC,KA0CX,OACE,YAACtL,GAAA,EAAD,CAAMlX,IAAKyV,GAAOq2C,YAAax1C,SAAUb,GAAOgN,cAC9C,qBAAOvhB,KAAK,WAAW2Y,MAAOpE,GAAOc,OAAOi1C,SAAU1qD,KAAK,WAC3D,YAAC,GAAD,CACE4C,OAAO,MACPxG,UAAU,mDACVoB,IAAKA,YAAF,KACCotD,GAAiB,0BAEb9uD,EAAOE,WAAa4uD,GAFP,kFAKf,GAMEA,GAAoB,iBAAmB,KAU/C,mBAAKxuD,UAAU,QACb,YAAC0D,EAAA,EAAD,CAAOC,YAAY,aAAaK,KAAK,QAAQJ,KAAK,WAClD,YAAC,GAAD,CACEA,KAAM5C,EAAUqrB,MAChBxG,QAASA,EACT/d,IAAKsjB,GACLxF,aAAW,EACXE,eAAe,EACfxV,KAAMA,IAER,YAACiK,GAAD,CAAcxE,QAASwC,GAAOiC,OAAOpN,UAGzC,mBAAKpN,UAAU,WACb,YAAC+B,EAAA,EAAD,KACE,YAACygB,GAAA,EAAD,CAAYxiB,UAAU,qDACpB,kBAAIA,UAAU,SAAd,eACA,uBACE,YAACkE,EAAA,EAAD,CACEN,KAAK,SACL5D,UAAU,mCACViC,QAAS,WACPmW,IAAkB,KAJtB,UASA,YAAC,IAAD,CACEvQ,GAAE,cACF7H,UAAU,0CAFZ,YAQJ,YAACoC,EAAA,EAAD,KACE,YAAClC,EAAA,EAAD,KACE,YAACC,EAAA,EAAD,CAAKC,GAAI,GACP,mBAAKJ,UAAU,kDACb,YAACma,GAAA,EAAD,CAAWna,UAAU,SACnB,sCACA,YAAC0D,EAAA,EAAD,CACEC,YAAY,YACZK,KAAK,WACLJ,KAAK,OACLwW,SAAU,SAAClY,GACTqW,GAAO8B,aAAanY,GACpB,IAAM+pD,EAAgB91B,GAAaj0B,EAAE6E,OAAO4V,OAC5C0tC,GACE9xC,GAAOkN,cAAc,OAAQwmC,IAEjCnoD,OAAQyU,GAAO+B,WACfqC,MAAOpE,GAAOc,OAAO6F,SACrBlf,UAAWuY,GAAOiC,OAAO0E,UAAY,gBAEvC,YAAC3E,GAAD,CAAcxE,QAASwC,GAAOiC,OAAO0E,cAI3C,YAAC/e,EAAA,EAAD,CAAKC,GAAI,GACP,mBAAKJ,UAAU,kDACb,YAACma,GAAA,EAAD,CAAWna,UAAU,SACnB,uCACA,YAAC,KAAD,CACEA,UAAU,oCACVoa,SAAU,SAACoL,GACT2oC,GAAqB3oC,GACrBjN,GAAOkN,cAAc,cAAeD,EAAI7I,QAE1C+I,gBAAgB,eAChB/hB,YAAY,gBACZgZ,MAAOuxC,EACPlqD,KAAK,cACLtH,QAASsxD,IAEX,YAACzzC,GAAD,CAAcxE,QAASwC,GAAOiC,OAAO0E,eAK7C,YAAChf,EAAA,EAAD,KACE,YAACC,EAAA,EAAD,CAAKC,GAAI,GACP,mBAAKJ,UAAU,kDACb,YAACma,GAAA,EAAD,CAAWna,UAAU,SACrB,mBAAKA,UAAU,6BACT,YAAC0D,EAAA,EAAD,CACEC,YAAY,OACZK,KAAK,OACLJ,KAAK,OACLwW,SAAU7B,GAAO8B,aACjBvW,OAAQyU,GAAO+B,WACfqC,MAAOpE,GAAOc,OAAO/F,MAAQ,GAC7BtT,UAAWuY,GAAOiC,OAAOlH,MAAQ,cACjCwV,SAAUuhC,IAEZ,oBACErqD,UAAU,sBACViC,QAAS,kBAAMqoD,GAAqB,KAEpC,mBAAKjqD,IAAI,UAAUC,IAAKypD,OAG5B,YAACxvC,GAAD,CAAcxE,QAASwC,GAAOiC,OAAOlH,WAM/C,YAACpT,EAAA,EAAD,KACE,YAACC,EAAA,EAAD,CAAKH,UAAU,GAAGI,GAAG,MACnB,YAAC+Z,GAAA,EAAD,KACE,oCACA,YAAC,GAAD,CACEsJ,aAAa,UACbD,eAAgB,SAACthB,GACfqW,GAAOkN,cAAc,UAAWvjB,IAElCya,MAAOpE,GAAOc,OAAOvX,WAGzB,YAACyY,GAAD,CAAcxE,QAASwC,GAAOiC,OAAO1Y,iBCnStC+sD,GAdiB,WAC9B,IAAMrvD,EAAQuG,cACd,OACI,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOuK,KAAM,CAAC,GAAD,OAAI9Q,EAAM8Q,KAAV,0BAAiC9Q,EAAM8Q,KAAvC,eACX,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOA,KAAI,UAAK9Q,EAAM8Q,OACpB,kBAAC,GAAD,SCDJw+C,GAAQvuD,EAAQ,KAChBwuD,GAAgB,CACpB,CACEpyC,OAAO,EACP5gB,MAAO,WAET,CACE4gB,OAAO,EACP5gB,MAAO,WAqDLizD,GAAyC,SAAC,GAAwB,IAAtB5E,EAAqB,EAArBA,eAChD,OACE,oCACGA,GACCA,EAAeznD,KAAI,SAAC4c,GAClB,IAAMlB,EAAkBkB,EAAUlB,gBAAgBpjB,QAClD,OACE,oCACE,kBAAC,GAAD,CAAe6H,IAAKyc,EAAUjb,GAAIib,UAAWA,IAC5ClB,GACCA,EAAgBxY,OAAS,GACzBwY,EACGlZ,MAAK,SAACC,EAAGjK,GAAJ,OAAUiK,EAAEC,aAAelK,EAAEkK,gBAClC1C,KAAI,SAACssD,GACJ,OACE,kBAAC,GAAD,CACEnsD,IAAKmsD,EAAe3qD,GACpB4qD,SAAO,EACP3vC,UAAW0vC,aAW7BE,GAGD,SAAC,GAA4B,IAA1B5vC,EAAyB,EAAzBA,UAAW2vC,EAAc,EAAdA,QACX1vD,EAAQuG,cADiB,EAEGoF,KAA3BkgD,EAFwB,oBAGzBtoC,EAAeD,GAAgB,aAAc,WAC/C2I,EAAQlM,EAAUla,aAClB+pD,EAAgBL,GAAcnhD,MAChC,SAACyhD,GAAD,OAAOA,EAAE1yC,QAAU4C,EAAUoU,eAG/B,OACE,wBAAI7wB,IAAKyc,EAAUjb,IACjB,wBAAItE,UAAS,qCAAgCkvD,EAAU,OAAS,KAC9D,kBAAC,IAAD,CAAMrnD,GAAE,UAAKrI,EAAM8Q,KAAX,4BAAmCiP,EAAUjb,KAClD4qD,GAAW,yBAAK3oD,MAAM,OAAOjG,IAAKwuD,GAAOzuD,IAAI,iBAAmB,IAChEkf,EAAUlC,gBAGf,wBAAIrd,UAAU,gCAAgCuf,EAAUjM,MACxD,wBAAItT,UAAU,gCACZ,kBAAC,KAAD,CACEtD,QAASqyD,GACT7iC,aAAckjC,EACd1pC,gBAAgB,eAChBtL,SAAU,SAACoL,GACQA,MAIvB,4BACE,kBAAC9hB,EAAA,EAAD,CACEC,YAAY,QACZC,KAAK,SACLwW,SAAU,SAAClY,GACTupB,EAAQzwB,SAASkH,EAAE6E,OAAO4V,QAE5BuP,aAAc3M,EAAUla,aACxBrF,UAAS,iCAGb,wBAAIA,UAAU,eACZ,kBAACkE,EAAA,EAAD,CACElE,UAAU,0BACVb,MAAM,OACNiF,KAAK,KACLR,KAAK,SACL3B,QAAO,wBAAE,iCAAAmD,EAAA,6DAC+Cma,EAA9CoU,YAA8CpU,EAAjCwF,WAAe2mC,EAD7B,aAC+CnsC,EAD/C,uCAEW8rC,EAAwB,CACxC15C,UAAW,CACTtW,KAAK,2BACAqwD,GADD,IAEFrmD,aAAcomB,OANb,OAED3E,EAFC,QAUP,UAAIA,EAAIzrB,YAAR,aAAI,EAAUywD,kBACZ1mC,QAAMC,gBAAgBtC,GAXjB,4CAeT,uBAAG/iB,UAAU,kCAEf,kBAAC,IAAD,CACEA,UAAU,iDACV6H,GAAE,UAAKrI,EAAM8Q,KAAX,4BAAmCiP,EAAUjb,KAE/C,uBAAGtE,UAAU,mCAEf,kBAACkE,EAAA,EAAD,CACElE,UAAU,qBACVb,MAAM,SACNiF,KAAK,KACLR,KAAK,UASL,uBAAG5D,UAAU,wCAORsvD,GAtKqC,SAAC,GAAiC,IAA/BlF,EAA8B,EAA9BA,eAAgBx4C,EAAc,EAAdA,QAC/DpS,EAAQuG,cACd,OACE,kBAAC7F,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAK4C,GAAI,IACT,yBAAK/C,UAAU,+CACX,kBAAC,IAAD,CACEA,UAAU,0BACV6H,GAAE,UAAKrI,EAAMsI,IAAX,uBAFJ,uBAQJ,kBAAC3H,EAAA,EAAD,CAAK4C,GAAI,GAAI/C,UAAU,QACvB,kBAAC+B,EAAA,EAAD,CAAM/B,UAAU,OACd,kBAAC,GAAD,CAAUA,UAAU,MAAM4R,QAASA,GACnC,kBAACS,EAAA,EAAD,CAAO/U,YAAU,GACf,2BAAO0C,UAAU,wBACf,4BACE,wBAAIA,UAAU,gCAAd,mBACA,wBAAIA,UAAU,gCAAd,QACA,wBACEA,UAAU,+BACVQ,MAAO,CACL+F,MAAO,QAHX,UAQA,wBAAIvG,UAAU,gCAAd,SACA,wBAAIA,UAAU,gCAAd,aAGJ,+BACE,kBAAC,GAAD,CAAUoqD,eAAgBA,WCyCvBmF,GA5EE,CACf,CACEj/C,KAAM,aACNtM,KAAM,YACN2d,KAAM,aACN6tC,UAAWltC,GACXtkB,OAAQ,UAEV,CACEsS,KAAM,cACNtM,KAAM,aACN2d,KAAM,mBACN6tC,UC9B4B,WAC9B,IAAMhwD,EAAQuG,cADsB,EAODuF,GAA0B,CAC3DqG,UANgB,CAChBtW,KAAM,CACJoxD,eAAgB3rD,EAAe4rD,QAG3BrxD,EAP4B,EAO5BA,KAAMuW,EAPsB,EAOtBA,QAAS0G,EAPa,EAObA,QAGjB8xC,EAAc,OAAG/uD,QAAH,IAAGA,OAAH,EAAGA,EAAMsiB,cAAcD,WAM3C,OALAjb,IAAM0Z,SAAQ,WACZ7D,MACC,CAACA,IAIF,oCACE,kBAAC,GAAD,KACE,yBAAKtY,UAAU,sBACb,wBAAIA,UAAU,SAAd,cACA,uBAAGA,UAAU,YAAb,2BAGJ,yBAAKA,UAAU,WACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEsQ,KAAM,CAAC,GAAD,OACD9Q,EAAM8Q,KADL,gCAED9Q,EAAM8Q,KAFL,mCAKN,kBAAC,GAAD,CAAwB85C,eAAgBA,KAE1C,kBAAC,IAAD,CAAO95C,KAAI,UAAK9Q,EAAM8Q,OACpB,kBAAC,GAAD,CAAe85C,eAAgBA,EAAgBx4C,QAASA,SDJhE5T,OAAQ,UAEV,CACEsS,KAAM,QACNtM,KAAM,OACN2d,KAAM,eACN6tC,UAAWX,GACX7wD,OAAQ,UAEV,CACEsS,KAAM,SACNtM,KAAM,QACN2d,KAAM,eACN6tC,UAAWzC,GACX/uD,OAAQ,SACRyxD,QAAQ,GAEV,CACEn/C,KAAM,SACNtM,KAAM,QACN2d,KAAM,eACN6tC,UAAWzC,GACX/uD,OAAQ,SACRyxD,QAAQ,GAUV,CACEn/C,KAAM,aACNtM,KAAM,eACN2d,KAAM,kBACN6tC,U,2KEzCA,OACE,oCAEE,yBAAKxvD,UAAU,WACb,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACN,kBAAC2B,EAAA,EAAD,KACE,kBAACygB,GAAA,EAAD,KACE,wBAAIxiB,UAAU,SAAd,iBAEF,kBAACoC,EAAA,EAAD,KACE,kBAAC4X,GAAA,EAAD,KACE,kBAAC9Z,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKH,UAAU,OAAOI,GAAG,KACvB,kBAAC+Z,GAAA,EAAD,KACE,qDACA,kBAACzW,EAAA,EAAD,CACEwoB,aAAa,qBACbpD,UAAQ,EACRnlB,YAAY,UACZC,KAAK,WAIX,kBAACzD,EAAA,EAAD,CAAKH,UAAU,OAAOI,GAAG,KACvB,kBAAC+Z,GAAA,EAAD,KACE,2CACA,kBAACzW,EAAA,EAAD,CACEwoB,aAAa,YACbvoB,YAAY,WACZC,KAAK,WAIX,kBAACzD,EAAA,EAAD,CAAKH,UAAU,OAAOI,GAAG,KACvB,kBAAC+Z,GAAA,EAAD,KACE,2BAAOu1C,QAAQ,sBAAf,iBAGA,kBAAChsD,EAAA,EAAD,CAAOC,YAAY,QAAQC,KAAK,aAItC,kBAAC1D,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKH,UAAU,OAAOI,GAAG,KACvB,kBAAC+Z,GAAA,EAAD,KACE,6CACA,kBAACzW,EAAA,EAAD,CACEwoB,aAAa,OACbvoB,YAAY,UACZC,KAAK,WAIX,kBAACzD,EAAA,EAAD,CAAKH,UAAU,OAAOI,GAAG,KACvB,kBAAC+Z,GAAA,EAAD,KACE,4CACA,kBAACzW,EAAA,EAAD,CACEwoB,aAAa,SACbvoB,YAAY,YACZC,KAAK,YAKb,kBAAC1D,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,MACN,kBAAC+Z,GAAA,EAAD,KACE,0CACA,kBAACzW,EAAA,EAAD,CACEwoB,aAAa,mDACbvoB,YAAY,eACZC,KAAK,YAKb,kBAAC1D,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKH,UAAU,OAAOI,GAAG,KACvB,kBAAC+Z,GAAA,EAAD,KACE,uCACA,kBAACzW,EAAA,EAAD,CACEwoB,aAAa,OACbvoB,YAAY,OACZC,KAAK,WAIX,kBAACzD,EAAA,EAAD,CAAKH,UAAU,OAAOI,GAAG,KACvB,kBAAC+Z,GAAA,EAAD,KACE,0CACA,kBAACzW,EAAA,EAAD,CACEwoB,aAAa,SACbvoB,YAAY,UACZC,KAAK,WAIX,kBAACzD,EAAA,EAAD,CAAKH,UAAU,OAAOI,GAAG,KACvB,kBAAC+Z,GAAA,EAAD,KACE,8CACA,kBAACzW,EAAA,EAAD,CAAOC,YAAY,WAAWC,KAAK,cAIzC,kBAAC1D,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,MACN,kBAAC+Z,GAAA,EAAD,KACE,2CACA,kBAACzW,EAAA,EAAD,CACEK,KAAK,KACLmoB,aAAa,4EAEbvoB,YAAY,+BACZM,KAAK,IACLL,KAAK,oBASrB,kBAACzD,EAAA,EAAD,CAAKC,GAAG,KACN,kBAAC2B,EAAA,EAAD,CAAM/B,UAAU,aACd,yBAAKA,UAAU,SACb,yBAAKK,IAAI,MAAMC,IAAKC,EAAQ,QAE9B,kBAAC6B,EAAA,EAAD,KACE,yBAAKpC,UAAU,UACb,uBAAGgC,KAAK,SAASC,QAAS,SAACC,GAAD,OAAOA,EAAEC,mBACjC,yBACE9B,IAAI,MACJL,UAAU,qBACVM,IAAKC,EAAQ,OAEf,wBAAIP,UAAU,SAAd,gBAEF,uBAAGA,UAAU,eAAb,cAEF,uBAAGA,UAAU,2BAAb,sBACqB,6BADrB,6BAE4B,6BAF5B,iCAMF,6BACA,yBAAKA,UAAU,oBACb,kBAACkE,EAAA,EAAD,CACElE,UAAU,iCACVb,MAAM,UACN6C,KAAK,SACLC,QAAS,SAACC,GAAD,OAAOA,EAAEC,kBAClBiC,KAAK,MAEL,uBAAGpE,UAAU,uBAEf,kBAACkE,EAAA,EAAD,CACElE,UAAU,iCACVb,MAAM,UACN6C,KAAK,SACLC,QAAS,SAACC,GAAD,OAAOA,EAAEC,kBAClBiC,KAAK,MAEL,uBAAGpE,UAAU,oBAEf,kBAACkE,EAAA,EAAD,CACElE,UAAU,iCACVb,MAAM,UACN6C,KAAK,SACLC,QAAS,SAACC,GAAD,OAAOA,EAAEC,kBAClBiC,KAAK,MAEL,uBAAGpE,UAAU,oC,GAhLdyC,IAAMmf,WF4CrB5jB,OAAQ,WGZG2xD,GApDuC,WAAO,IAAD,EACpDC,EAAYntD,IAAM2R,OAAuB,MADW,EAEZ3R,IAAMC,SAAS,SAFH,mBAEnDlG,EAFmD,KAElCqzD,EAFkC,KAOtDx3C,EAAE,UADUtM,KACC1Q,YAAX,aAAG,EAAcgd,GAKvB,OAJKA,IACHA,EAAKjD,IAIL,kBAACM,GAAUgH,SAAX,CAAoBC,MAAOtE,GACzB,yBAAKrY,UAAU,sBACb,kBAAC,GAAD,CAASuhB,OAAQA,GAAQ/kB,gBAAiBA,IAC1C,yBAAKwD,UAAU,gCAAgCgV,IAAK46C,GAClD,kBAAC,GAAD,MACA,kBAAC,IAAD,KACGruC,GAAO5e,KAAI,SAAC6e,EAAM1e,GACjB,OAAG0e,EAAKiuC,OAEJ,kBAAC,IAAD,CACEn/C,KAAMkR,EAAKxjB,OAAS,SACpBwxD,UAAWhuC,EAAKguC,UAChB1sD,IAAKA,IAKT,kBAAC,IAAD,CACEwN,KAAMkR,EAAKxjB,OAASwjB,EAAKlR,KACzBk/C,UAAWhuC,EAAKguC,UAChB1sD,IAAKA,OAIX,kBAAC,IAAD,CAAUgtD,KAAK,SAASjoD,GAAG,sBAE7B,kBAAC,GAAD,CAAQ7H,UAAU,UAAUogB,OAAK,KAEnC,kBAAC,GAAD,CACE+B,QAAS3lB,EACT6lB,iBAAkB,SAACngB,GAxCF,IAAC/C,IAyCC+C,EAAEya,MAxC3BkzC,EAAmB1wD,SCMjB4wD,GAAWC,yBAAe,CAC9BC,IAAKvwD,EAAOC,mBACZ4mB,YACA2pC,aAAc,CACZ1pC,YAAa,aAGX2pC,GAAWC,aAAW,SAACj/B,EAAD,GAAqB,IAAD,IAAd1K,EAAc,EAAdA,QAE1B4pC,EAAS35C,KAAKC,MAAL,UAAWC,aAAaC,QAAQ,iBAAhC,QAA6C,MAE5D,MAAO,CACL4P,QAAQ,2BACHA,GADE,IAEL6pC,eAAqB,OAAND,QAAM,IAANA,GAAA,UAAAA,EAAQp6C,cAAR,eAAgBC,aAAhB,UAAiCm6C,EAAOp6C,OAAOC,aAAgB,SAI9EsI,GAAS,IAAI+xC,eAAa,CAC9Bj9C,KAAM68C,GAASK,OAAOT,IACtBU,MAAO,IAAIC,kBAEb,SAASC,KACP,OACE,kBAAC,iBAAD,CAAgBnyC,OAAQA,IACtB,kBAAC,IAAD,KACE,kBAAC,IAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOlO,KAAM,UACX,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOA,KAAM,CAAC,UACZ,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAUzI,GAAG,WACb,kBAAC,IAAD,CAAUioD,KAAK,IAAIjoD,GAAG,aAMhC+oD,iBAAO,kBAACD,GAAD,MAAS3pD,SAASC,eAAe,SpF0ElC,kBAAmB8Z,WACrBA,UAAU8vC,cAAcC,MACrBnqC,MAAK,SAAAoqC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLv+C,QAAQu+C,MAAMA,EAAMn7C,c","file":"static/js/main.cdc9f9e5.chunk.js","sourcesContent":["/*!\n\n=========================================================\n* Now UI Dashboard React - v1.4.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/now-ui-dashboard-react\n* Copyright 2020 Creative Tim (https://www.creative-tim.com)\n* Licensed under MIT (https://github.com/creativetimofficial/now-ui-dashboard-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\n// ##############################\n// // // Function that converts a hex color number to a RGB color number\n// #############################\nfunction hexToRGB(hex, alpha) {\n  var r = parseInt(hex.slice(1, 3), 16),\n    g = parseInt(hex.slice(3, 5), 16),\n    b = parseInt(hex.slice(5, 7), 16);\n\n  if (alpha) {\n    return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + alpha + \")\";\n  } else {\n    return \"rgb(\" + r + \", \" + g + \", \" + b + \")\";\n  }\n}\n\n// ##############################\n// // // general variables for charts\n// #############################\n\nconst chartColor = \"#FFFFFF\";\n\n// General configuration for the charts with Line gradientStroke\nconst gradientChartOptionsConfiguration = {\n  maintainAspectRatio: false,\n  legend: {\n    display: false,\n  },\n  tooltips: {\n    bodySpacing: 4,\n    mode: \"nearest\",\n    intersect: 0,\n    position: \"nearest\",\n    xPadding: 10,\n    yPadding: 10,\n    caretPadding: 10,\n  },\n  responsive: 1,\n  scales: {\n    yAxes: [\n      {\n        display: 0,\n        ticks: {\n          display: false,\n          maxTicksLimit: 7,\n        },\n        gridLines: {\n          zeroLineColor: \"transparent\",\n          drawTicks: false,\n          display: false,\n          drawBorder: false,\n        },\n      },\n    ],\n    xAxes: [\n      {\n        display: 0,\n        ticks: {\n          display: false,\n        },\n        gridLines: {\n          zeroLineColor: \"transparent\",\n          drawTicks: false,\n          display: false,\n          drawBorder: false,\n        },\n      },\n    ],\n  },\n  layout: {\n    padding: { left: 0, right: 0, top: 15, bottom: 15 },\n  },\n};\n\nvar gradientChartOptionsConfigurationWithNumbersAndGrid = {\n  maintainAspectRatio: false,\n  legend: {\n    display: false,\n  },\n  tooltips: {\n    bodySpacing: 4,\n    mode: \"nearest\",\n    intersect: 0,\n    position: \"nearest\",\n    xPadding: 10,\n    yPadding: 10,\n    caretPadding: 10,\n  },\n  responsive: 1,\n  scales: {\n    yAxes: [\n      {\n        gridLines: {\n          zeroLineColor: \"transparent\",\n          drawBorder: false,\n        },\n        ticks: {\n          maxTicksLimit: 7,\n        },\n      },\n    ],\n    xAxes: [\n      {\n        display: 0,\n        ticks: {\n          display: false,\n        },\n        gridLines: {\n          zeroLineColor: \"transparent\",\n          drawTicks: false,\n          display: false,\n          drawBorder: false,\n        },\n      },\n    ],\n  },\n  layout: {\n    padding: { left: 0, right: 0, top: 15, bottom: 15 },\n  },\n};\n\n// ##############################\n// // // Dashboard view - Panel chart\n// #############################\n\nconst dashboardPanelChart = {\n  data: (canvas) => {\n    const ctx = canvas.getContext(\"2d\");\n    var chartColor = \"#FFFFFF\";\n    var gradientStroke = ctx.createLinearGradient(500, 0, 100, 0);\n    gradientStroke.addColorStop(0, \"#80b6f4\");\n    gradientStroke.addColorStop(1, chartColor);\n    var gradientFill = ctx.createLinearGradient(0, 200, 0, 50);\n    gradientFill.addColorStop(0, \"rgba(128, 182, 244, 0)\");\n    gradientFill.addColorStop(1, \"rgba(255, 255, 255, 0.14)\");\n\n    return {\n      labels: [\n        \"JAN\",\n        \"FEB\",\n        \"MAR\",\n        \"APR\",\n        \"MAY\",\n        \"JUN\",\n        \"JUL\",\n        \"AUG\",\n        \"SEP\",\n        \"OCT\",\n        \"NOV\",\n        \"DEC\",\n      ],\n      datasets: [\n        {\n          label: \"Data\",\n          borderColor: chartColor,\n          pointBorderColor: chartColor,\n          pointBackgroundColor: \"#2c2c2c\",\n          pointHoverBackgroundColor: \"#2c2c2c\",\n          pointHoverBorderColor: chartColor,\n          pointBorderWidth: 1,\n          pointHoverRadius: 7,\n          pointHoverBorderWidth: 2,\n          pointRadius: 5,\n          fill: true,\n          backgroundColor: gradientFill,\n          borderWidth: 2,\n          data: [50, 150, 100, 190, 130, 90, 150, 160, 120, 140, 190, 95],\n        },\n      ],\n    };\n  },\n  options: {\n    layout: {\n      padding: {\n        left: 20,\n        right: 20,\n        top: 0,\n        bottom: 0,\n      },\n    },\n    maintainAspectRatio: false,\n    tooltips: {\n      backgroundColor: \"#fff\",\n      titleFontColor: \"#333\",\n      bodyFontColor: \"#666\",\n      bodySpacing: 4,\n      xPadding: 12,\n      mode: \"nearest\",\n      intersect: 0,\n      position: \"nearest\",\n    },\n    legend: {\n      position: \"bottom\",\n      fillStyle: \"#FFF\",\n      display: false,\n    },\n    scales: {\n      yAxes: [\n        {\n          ticks: {\n            fontColor: \"rgba(255,255,255,0.4)\",\n            fontStyle: \"bold\",\n            beginAtZero: true,\n            maxTicksLimit: 5,\n            padding: 10,\n          },\n          gridLines: {\n            drawTicks: true,\n            drawBorder: false,\n            display: true,\n            color: \"rgba(255,255,255,0.1)\",\n            zeroLineColor: \"transparent\",\n          },\n        },\n      ],\n      xAxes: [\n        {\n          gridLines: {\n            display: false,\n            color: \"rgba(255,255,255,0.1)\",\n          },\n          ticks: {\n            padding: 10,\n            fontColor: \"rgba(255,255,255,0.4)\",\n            fontStyle: \"bold\",\n          },\n        },\n      ],\n    },\n  },\n};\n\n// ##############################\n// // // Dashboard view - Shipped Products - Card\n// #############################\n\nconst dashboardShippedProductsChart = {\n  data: (canvas) => {\n    var ctx = canvas.getContext(\"2d\");\n    var gradientStroke = ctx.createLinearGradient(500, 0, 100, 0);\n    gradientStroke.addColorStop(0, \"#80b6f4\");\n    gradientStroke.addColorStop(1, chartColor);\n    var gradientFill = ctx.createLinearGradient(0, 170, 0, 50);\n    gradientFill.addColorStop(0, \"rgba(128, 182, 244, 0)\");\n    gradientFill.addColorStop(1, \"rgba(249, 99, 59, 0.40)\");\n    return {\n      labels: [\n        \"Jan\",\n        \"Feb\",\n        \"Mar\",\n        \"Apr\",\n        \"May\",\n        \"Jun\",\n        \"Jul\",\n        \"Aug\",\n        \"Sep\",\n        \"Oct\",\n        \"Nov\",\n        \"Dec\",\n      ],\n      datasets: [\n        {\n          label: \"Active Users\",\n          borderColor: \"#f96332\",\n          pointBorderColor: \"#FFF\",\n          pointBackgroundColor: \"#f96332\",\n          pointBorderWidth: 2,\n          pointHoverRadius: 4,\n          pointHoverBorderWidth: 1,\n          pointRadius: 4,\n          fill: true,\n          backgroundColor: gradientFill,\n          borderWidth: 2,\n          data: [542, 480, 430, 550, 530, 453, 380, 434, 568, 610, 700, 630],\n        },\n      ],\n    };\n  },\n  options: gradientChartOptionsConfiguration,\n};\n\n// ##############################\n// // // Dashboard view - All Products - Card\n// #############################\n\nconst dashboardAllProductsChart = {\n  data: (canvas) => {\n    var ctx = canvas.getContext(\"2d\");\n    var gradientStroke = ctx.createLinearGradient(500, 0, 100, 0);\n    gradientStroke.addColorStop(0, \"#18ce0f\");\n    gradientStroke.addColorStop(1, chartColor);\n    var gradientFill = ctx.createLinearGradient(0, 170, 0, 50);\n    gradientFill.addColorStop(0, \"rgba(128, 182, 244, 0)\");\n    gradientFill.addColorStop(1, hexToRGB(\"#18ce0f\", 0.4));\n    return {\n      labels: [\"12pm,\", \"3pm\", \"6pm\", \"9pm\", \"12am\", \"3am\", \"6am\", \"9am\"],\n      datasets: [\n        {\n          label: \"Email Stats\",\n          borderColor: \"#18ce0f\",\n          pointBorderColor: \"#FFF\",\n          pointBackgroundColor: \"#18ce0f\",\n          pointBorderWidth: 2,\n          pointHoverRadius: 4,\n          pointHoverBorderWidth: 1,\n          pointRadius: 4,\n          fill: true,\n          backgroundColor: gradientFill,\n          borderWidth: 2,\n          data: [40, 500, 650, 700, 1200, 1250, 1300, 1900],\n        },\n      ],\n    };\n  },\n  options: gradientChartOptionsConfigurationWithNumbersAndGrid,\n};\n\n// ##############################\n// // // Dashboard view - Bar Chart - Card\n// #############################\n\nconst dashboard24HoursPerformanceChart = {\n  data: (canvas) => {\n    var ctx = canvas.getContext(\"2d\");\n    var gradientFill = ctx.createLinearGradient(0, 170, 0, 50);\n    gradientFill.addColorStop(0, \"rgba(128, 182, 244, 0)\");\n    gradientFill.addColorStop(1, hexToRGB(\"#2CA8FF\", 0.6));\n    return {\n      labels: [\n        \"January\",\n        \"February\",\n        \"March\",\n        \"April\",\n        \"May\",\n        \"June\",\n        \"July\",\n        \"August\",\n        \"September\",\n        \"October\",\n        \"November\",\n        \"December\",\n      ],\n      datasets: [\n        {\n          label: \"Active Countries\",\n          backgroundColor: gradientFill,\n          borderColor: \"#2CA8FF\",\n          pointBorderColor: \"#FFF\",\n          pointBackgroundColor: \"#2CA8FF\",\n          pointBorderWidth: 2,\n          pointHoverRadius: 4,\n          pointHoverBorderWidth: 1,\n          pointRadius: 4,\n          fill: true,\n          borderWidth: 1,\n          data: [80, 99, 86, 96, 123, 85, 100, 75, 88, 90, 123, 155],\n        },\n      ],\n    };\n  },\n  options: {\n    maintainAspectRatio: false,\n    legend: {\n      display: false,\n    },\n    tooltips: {\n      bodySpacing: 4,\n      mode: \"nearest\",\n      intersect: 0,\n      position: \"nearest\",\n      xPadding: 10,\n      yPadding: 10,\n      caretPadding: 10,\n    },\n    responsive: 1,\n    scales: {\n      yAxes: [\n        {\n          ticks: {\n            maxTicksLimit: 7,\n          },\n          gridLines: {\n            zeroLineColor: \"transparent\",\n            drawBorder: false,\n          },\n        },\n      ],\n      xAxes: [\n        {\n          display: 0,\n          ticks: {\n            display: false,\n          },\n          gridLines: {\n            zeroLineColor: \"transparent\",\n            drawTicks: false,\n            display: false,\n            drawBorder: false,\n          },\n        },\n      ],\n    },\n    layout: {\n      padding: { left: 0, right: 0, top: 15, bottom: 15 },\n    },\n  },\n};\n\nmodule.exports = {\n  dashboardPanelChart, // Chart for Dashboard view - Will be rendered in panel\n  dashboardShippedProductsChart, // Chart for Dashboard view - Shipped Products Card\n  dashboardAllProductsChart, // Chart for Dashboard view - All products Card\n  dashboard24HoursPerformanceChart, // Chart for Dashboard view - 24 Hours Performance Card\n};\n","module.exports = __webpack_public_path__ + \"static/media/toiec.c5e872c0.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.253383c3.png\";","module.exports = __webpack_public_path__ + \"static/media/pen.07ee387d.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo-white.eec7c7f6.svg\";","module.exports = __webpack_public_path__ + \"static/media/4772.756eeb84.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg22_o.7f104959.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mission.5743b436.svg\";","module.exports = __webpack_public_path__ + \"static/media/thay_pa.d866d670.jpg\";","module.exports = __webpack_public_path__ + \"static/media/ban_np.0b850b23.jpg\";","module.exports = __webpack_public_path__ + \"static/media/eva.089c4f4e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg21.6713dad5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/teacher.4a10cab2.png\";","module.exports = __webpack_public_path__ + \"static/media/linh_profile.797af59e.png\";","module.exports = __webpack_public_path__ + \"static/media/ryan.f217f346.jpg\";","module.exports = __webpack_public_path__ + \"static/media/header-m.95facce8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/arrow_square.21cf3555.svg\";","module.exports = __webpack_public_path__ + \"static/media/bg5.056eb058.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mike.aab414f7.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      '' || 'https://tingadev.github.io/english-front-end/',\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nexport const apiUrl = process.env.NODE_ENV === 'production' ? 'http://103.153.73.228' : 'http://localhost:4000';\nconst domain = 'powper.vn';\nconst config = {\n  GRAPHQL_SERVER_URL: `${apiUrl}/graphql`,\n  PATH_IMAGE : `${apiUrl}/public/uploads/`,\n  UPLOAD_MEDIA: `${apiUrl}/uploads/`,\n  PUBLIC_URL: process.env.NODE_ENV === 'production' ? `http://${domain}` : 'http://localhost:3000',\n}\nexport default config;\n","import React from \"react\";\n// reactstrap components\nimport { Container, Row, Col } from \"reactstrap\";\n\n// core components\ninterface TestingTrialProps {\n  data?: any;\n}\nconst TestingTrial: React.FC<TestingTrialProps> = ({}) => {\n  return (\n    <>\n      <div className=\"features-5\">\n        <Container>\n          <Row>\n            <Col md=\"6\">\n              <h2 className=\"title\">\n                Tại sao chọn{\" \"}\n                <span className=\"text-primary d-block\">POWPER ENGLISH</span>\n              </h2>\n              <div className=\"info info-horizontal\">\n                <div className=\"icon icon-brand icon-circle\">\n                  <i className=\"now-ui-icons location_world\"></i>\n                </div>\n                <div className=\"description\">\n                  <h4 className=\"info-title\">\n                    Nguồn tài nguyên khổng lồ và chuẩn mực\n                  </h4>\n                  <p>\n                    Với hơn 30,000 câu hỏi được sắp xếp theo từng chủ điểm phục\n                    vụ luyện thi TOEIC, IELTS, và Luyện thi Đại học và kiến thức\n                    được cập nhật và chuẩn hóa liên tục\n                  </p>\n                </div>\n              </div>\n              <div className=\"info info-horizontal\">\n                <div className=\"icon icon-brand icon-circle\">\n                  <i className=\"now-ui-icons sport_user-run\"></i>\n                </div>\n                <div className=\"description\">\n                  <h4 className=\"info-title\">Ứng dụng công nghệ</h4>\n                  <p>\n                    Thư viện của POWPER ENLGISH tích hợp đầy đủ các công cụ hỗ\n                    trợ việc học được thuận tiện nhất (phần phiên âm, phần dịch,\n                    phần audio phát âm của người bản xứ, thao tác đơn giản)\n                  </p>\n                </div>\n              </div>\n              <div className=\"info info-horizontal\">\n                <div className=\"icon icon-brand icon-circle\">\n                  <i className=\"now-ui-icons ui-2_time-alarm\"></i>\n                </div>\n                <div className=\"description\">\n                  <h4 className=\"info-title\">Cam kết hiệu quả lâu dài</h4>\n                  <p>\n                    Mỗi một chương trình học luyện thi trên web đều được thiết\n                    kế một cách bài bản và khoa học giúp tối ưu hóa kỹ năng làm\n                    bài lẫn chiến lược đạt điểm cao trong các kỳ thi.\n                  </p>\n                </div>\n              </div>\n              <div className=\"info info-horizontal\">\n                <div className=\"icon icon-brand icon-circle\">\n                  <i className=\"now-ui-icons business_briefcase-24\"></i>\n                </div>\n                <div className=\"description\">\n                  <h4 className=\"info-title\">Nhiều nguồn tài liệu miễn phí</h4>\n                  <p>\n                    Đội ngũ học thuật nghiên cứu kỹ lưỡng và đề xuất nhiều nguồn\n                    học liệu miễn phí giúp các bạn chưa có điều kiện kinh tế có\n                    thể tiếp cận được tri thức một cách dễ dàng hơn.\n                  </p>\n                </div>\n              </div>\n            </Col>\n            <Col md=\"6\">\n              <div className=\"d-flex flex-column h-100\">\n                <div className=\"tablet-container\">\n                  <img\n                    alt=\"...\"\n                    src={require(\"../../../assets/img/4772.jpg\")}\n                  ></img>\n                </div>\n                <div className=\"info info-horizontal mt-auto\">\n                  <div className=\"icon icon-brand icon-circle\">\n                    <i className=\"now-ui-icons business_bulb-63\"></i>\n                  </div>\n                  <div className=\"description\">\n                    <h4 className=\"info-title\">\n                      Đội ngũ cố vấn học thuật có trình độ cao\n                    </h4>\n                    <p>\n                      Là một trong số ít các tổ chức giáo dục có được sự kết hợp\n                      giữa đội ngũ giáo viên trong nước và quốc tế tại Việt Nam\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n      <div\n          className=\"features-2 section-image\"\n          style={{\n            backgroundImage: \"url(\" + require(\"../../../assets/img/bg22_o.jpg\") + \")\",\n          }}\n        >\n        <Container>\n          <Row>\n            <Col md=\"8\">\n              <h2 className=\"title text-left\">\n                Sứ mệnh{\" \"}\n                <span className=\"text-primary d-block\">POWPER ENGLISH</span>\n              </h2>\n              <div className=\"info-horizontal \">\n                <div className=\"description\">\n                  <p className=\"text-white text-justify\">\n                    Tổ chức giáo dục POWPER ENGLISH Tiền thân là OMEGA ENGLISH\n                    CLUB được thầy Dương Thái Lực thành lập năm 2013 với sứ mệnh\n                    mang đến cách học tiếng Anh hiệu quả cho các bạn học sinh\n                    phổ thông ở vùng ngoại ô Tp. Hồ Chí Minh. Được kế thừa sau 7\n                    năm thành lập, POWER ENGLISH vẫn tiếp nối sứ mệnh này nhưng\n                    ở một tầm cao hơn đó là giúp cho tất cả học sinh sinh viên\n                    cũng như người đi làm trong cả nước chuẩn hóa kiến thức cho\n                    các kỳ thi quốc tế như TOEIC, IETLS và kỳ thi phổ thông quốc\n                    gia vào đại học hằng năm.\n                  </p>\n                  <p className=\"text-white\">\n                    Tôn chỉ hoạt động của POWPER ENGLISH:\n                  </p>\n                </div>\n              </div>\n              <Row>\n                <Col md=\"6\">\n                  <div className=\"info info-horizontal py-2\">\n                    <div className=\"icon\">\n                      <i className=\"now-ui-icons education_atom\"></i>\n                    </div>\n                    <div className=\"description\">\n                      <h4 className=\"info-title\">Chất lượng</h4>\n                    </div>\n                  </div>\n                </Col>\n                <Col md=\"6\">\n                  <div className=\"info info-horizontal py-2\">\n                    <div className=\"icon\">\n                      <i className=\"now-ui-icons education_atom\"></i>\n                    </div>\n                    <div className=\"description\">\n                      <h4 className=\"info-title\">Hiệu quả</h4>\n                    </div>\n                  </div>\n                </Col>\n                <Col md=\"6\">\n                  <div className=\"info info-horizontal py-2\">\n                    <div className=\"icon\">\n                      <i className=\"now-ui-icons education_atom\"></i>\n                    </div>\n                    <div className=\"description\">\n                      <h4 className=\"info-title\">Tận tâm</h4>\n                    </div>\n                  </div>\n                </Col>\n                <Col md=\"6\">\n                  <div className=\"info info-horizontal py-2\">\n                    <div className=\"icon\">\n                      <i className=\"now-ui-icons education_atom\"></i>\n                    </div>\n                    <div className=\"description\">\n                      <h4 className=\"info-title\">Chu đáo</h4>\n                    </div>\n                  </div>\n                </Col>\n                <Col md=\"6\">\n                  <div className=\"info info-horizontal py-2\">\n                    <div className=\"icon\">\n                      <i className=\"now-ui-icons education_atom\"></i>\n                    </div>\n                    <div className=\"description\">\n                      <h4 className=\"info-title\">Lâu dài</h4>\n                    </div>\n                  </div>\n                </Col>\n              </Row>\n            </Col>\n            <Col md=\"4\">\n              <div className=\"d-flex flex-column h-100\">\n                <div className=\"tablet-container\">\n                  <img\n                    alt=\"...\"\n                    src={require(\"../../../assets/img/mission.svg\")}\n                  ></img>\n                </div>\n              </div>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    </>\n  );\n};\n\nexport default TestingTrial;\n","import React from \"react\";\n/** @jsx jsx */\nimport { jsx, css } from '@emotion/core'\ninterface TruncateProps {\n    lines?: number;\n    className?: string;\n}\n\nexport const Truncate: React.FC<TruncateProps> = ({children, lines, className}) => {\n    return (\n        <p css={css`\n            overflow: hidden;\n            -webkit-line-clamp: ${lines};\n            text-overflow: ellipsis;\n            display: -webkit-box;\n            -webkit-box-orient: vertical;\n        `} \n        className={className}>{children}</p>\n    )\n}\n\n","import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as React from 'react';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The javascript `Date` as string. Type represents date and time as the ISO Date string. */\n  DateTime: any;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  user: User;\n  users: Array<User>;\n  isEmailAlreadyExist: Scalars['Boolean'];\n  part: Part;\n  getParts: Parts;\n  getPartsFromIds: Array<Part>;\n  question: Question;\n  questions: Questions;\n  test: Test;\n  getTests: Tests;\n  getTestCategory: TestCategory;\n  getTestCategories: TestCategories;\n  getTestQuestions: Array<TestQuestion>;\n  getTestGroup: TestGroup;\n  getTestGroups: TestGroups;\n  me?: Maybe<Me>;\n  getBlog: Blog;\n  getBlogs: Blogs;\n};\n\n\nexport type QueryUserArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryIsEmailAlreadyExistArgs = {\n  email: Scalars['String'];\n};\n\n\nexport type QueryPartArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryGetPartsArgs = {\n  data: PartFilterInput;\n};\n\n\nexport type QueryGetPartsFromIdsArgs = {\n  data: PartIdsInput;\n};\n\n\nexport type QueryQuestionArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryQuestionsArgs = {\n  questionFilterType: QuestionFilterTypeInput;\n};\n\n\nexport type QueryTestArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryGetTestsArgs = {\n  data: TestFilterInput;\n};\n\n\nexport type QueryGetTestCategoryArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryGetTestCategoriesArgs = {\n  data: TestCategoryFilterInput;\n};\n\n\nexport type QueryGetTestQuestionsArgs = {\n  testId: Scalars['String'];\n};\n\n\nexport type QueryGetTestGroupArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryGetTestGroupsArgs = {\n  data: TestGroupFilterInput;\n};\n\n\nexport type QueryGetBlogArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryGetBlogsArgs = {\n  data: BlogsSearchInput;\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['String'];\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  profileMediaUrl?: Maybe<Scalars['String']>;\n  email: Scalars['String'];\n  firstName: Scalars['String'];\n  lastName?: Maybe<Scalars['String']>;\n  address?: Maybe<Scalars['String']>;\n  level?: Maybe<Scalars['String']>;\n  role: Scalars['String'];\n  /** First + Last name */\n  name: Scalars['String'];\n  phone?: Maybe<Scalars['String']>;\n  socialLinks?: Maybe<SocialLink>;\n  password?: Maybe<Scalars['String']>;\n  isVerified?: Maybe<Scalars['Boolean']>;\n  version: Scalars['Float'];\n  blogs: Array<Blog>;\n};\n\n\nexport type SocialLink = {\n  __typename?: 'SocialLink';\n  facebook?: Maybe<Scalars['String']>;\n  twitter?: Maybe<Scalars['String']>;\n  linkedin?: Maybe<Scalars['String']>;\n};\n\nexport type Blog = {\n  __typename?: 'Blog';\n  id: Scalars['String'];\n  blogName: Scalars['String'];\n  link: Scalars['String'];\n  metaTags?: Maybe<MetaTags>;\n  content: Scalars['String'];\n  image?: Maybe<Scalars['String']>;\n  testGroup: TestGroup;\n  author: User;\n  displayOrder: Scalars['Float'];\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  deleteAt?: Maybe<Scalars['DateTime']>;\n};\n\nexport type MetaTags = {\n  __typename?: 'MetaTags';\n  imageUrl?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n};\n\nexport type TestGroup = {\n  __typename?: 'TestGroup';\n  id: Scalars['String'];\n  testGroupName: Scalars['String'];\n  link: Scalars['String'];\n  groupType: GroupType;\n  testGroupChild: TestGroup;\n  testGroupsChild: Array<TestGroup>;\n  parentId?: Maybe<Scalars['String']>;\n  certificateType: EnglishCertificateType;\n  testCategories?: Maybe<Array<TestCategory>>;\n  blogs: Array<Blog>;\n  isPublished: Scalars['Boolean'];\n  displayOrder: Scalars['Float'];\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  deleteAt?: Maybe<Scalars['DateTime']>;\n};\n\nexport enum GroupType {\n  Blog = 'Blog',\n  Test = 'Test',\n  Landing = 'Landing'\n}\n\nexport enum EnglishCertificateType {\n  Toeic = 'Toeic',\n  Ielts = 'IELTS',\n  University = 'University',\n  ExtraCourses = 'ExtraCourses',\n  Support = 'Support',\n  Coop = 'Coop'\n}\n\nexport type TestCategory = {\n  __typename?: 'TestCategory';\n  id: Scalars['String'];\n  testCategoryName: Scalars['String'];\n  certificateType: EnglishCertificateType;\n  tests?: Maybe<Array<Test>>;\n  testGroup?: Maybe<TestGroup>;\n  isPublished: Scalars['Boolean'];\n  displayOrder: Scalars['Float'];\n  displayOrderGroup: Scalars['Float'];\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  deleteAt?: Maybe<Scalars['DateTime']>;\n};\n\nexport type Test = {\n  __typename?: 'Test';\n  id: Scalars['String'];\n  testName: Scalars['String'];\n  description: Scalars['String'];\n  audioUrl: Scalars['String'];\n  explaination: Scalars['String'];\n  skillType: SkillsType;\n  certificateType: EnglishCertificateType;\n  partAndAudioSecs?: Maybe<Array<PartAndAudioSeconds>>;\n  testQuestions?: Maybe<Array<TestQuestion>>;\n  part?: Maybe<Part>;\n  testCategory?: Maybe<TestCategory>;\n  isPublished: Scalars['Boolean'];\n  displayOrder: Scalars['Float'];\n  displayOrderCategory: Scalars['Float'];\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  deleteAt?: Maybe<Scalars['DateTime']>;\n};\n\nexport enum SkillsType {\n  Reading = 'Reading',\n  Listening = 'Listening'\n}\n\nexport type PartAndAudioSeconds = {\n  __typename?: 'PartAndAudioSeconds';\n  partId?: Maybe<Scalars['String']>;\n  autdioSecs?: Maybe<Scalars['Float']>;\n  displayOrder?: Maybe<Scalars['Float']>;\n};\n\nexport type TestQuestion = {\n  __typename?: 'TestQuestion';\n  id: Scalars['String'];\n  test: Test;\n  question: Question;\n  part: Part;\n  displayOrder: Scalars['Float'];\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  deleteAt?: Maybe<Scalars['DateTime']>;\n};\n\nexport type Question = {\n  __typename?: 'Question';\n  id: Scalars['String'];\n  questionName: Scalars['String'];\n  questionGroupName?: Maybe<Scalars['String']>;\n  audioSec: Scalars['Float'];\n  audioSecVN: Scalars['Float'];\n  questionType: QuestionType;\n  description?: Maybe<Scalars['String']>;\n  content?: Maybe<Scalars['String']>;\n  explaination?: Maybe<Scalars['String']>;\n  quickExplaination?: Maybe<Scalars['String']>;\n  image?: Maybe<Scalars['String']>;\n  answers: Array<Answers>;\n  testQuestion?: Maybe<TestQuestion>;\n  skillType: SkillsType;\n  certificateType: EnglishCertificateType;\n  result: Scalars['String'];\n  isGroup: Scalars['Boolean'];\n  questionGroupOrder: Scalars['Float'];\n  questionGroup: Question;\n  questionGroups: Array<Question>;\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  deleteAt?: Maybe<Scalars['DateTime']>;\n};\n\nexport enum QuestionType {\n  SingleChoice = 'SingleChoice',\n  MultiChoice = 'MultiChoice',\n  FillBlank = 'FillBlank'\n}\n\nexport type Answers = {\n  __typename?: 'Answers';\n  keyAnswer?: Maybe<Scalars['String']>;\n  answerContent?: Maybe<Scalars['String']>;\n};\n\nexport type Part = {\n  __typename?: 'Part';\n  id: Scalars['String'];\n  partName: Scalars['String'];\n  description: Scalars['String'];\n  skillType: SkillsType;\n  certificateType: EnglishCertificateType;\n  testQuestion?: Maybe<TestQuestion>;\n  test?: Maybe<Test>;\n  displayOrder: Scalars['Float'];\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  deleteAt?: Maybe<Scalars['DateTime']>;\n};\n\nexport type Parts = {\n  __typename?: 'Parts';\n  parts: Array<Part>;\n  total: Scalars['Float'];\n  nextCursor?: Maybe<Scalars['String']>;\n};\n\nexport type PartFilterInput = {\n  skillType?: Maybe<SkillsType>;\n  certificateType?: Maybe<EnglishCertificateType>;\n  orderDirection?: Maybe<OrderDirection>;\n  cursor?: Maybe<Scalars['String']>;\n  partIds?: Maybe<PartIdsInput>;\n};\n\n/** Query Order Direction */\nexport enum OrderDirection {\n  Asc = 'Asc',\n  Desc = 'Desc'\n}\n\nexport type PartIdsInput = {\n  ids: Array<Scalars['String']>;\n};\n\nexport type Questions = {\n  __typename?: 'Questions';\n  questions: Array<Question>;\n  total: Scalars['Float'];\n  nextCursor?: Maybe<Scalars['String']>;\n};\n\nexport type QuestionFilterTypeInput = {\n  skillType?: Maybe<SkillsType>;\n  certificateType: EnglishCertificateType;\n  orderDirection?: Maybe<OrderDirection>;\n  cursor?: Maybe<Scalars['String']>;\n  testId?: Maybe<Scalars['String']>;\n  title?: Maybe<Scalars['String']>;\n};\n\nexport type Tests = {\n  __typename?: 'Tests';\n  tests: Array<Test>;\n  total: Scalars['Float'];\n  nextCursor?: Maybe<Scalars['String']>;\n};\n\nexport type TestFilterInput = {\n  skillType?: Maybe<SkillsType>;\n  certificateType?: Maybe<EnglishCertificateType>;\n  orderDirection?: Maybe<OrderDirection>;\n  cursor?: Maybe<Scalars['String']>;\n  testIds?: Maybe<TestIdsInput>;\n};\n\nexport type TestIdsInput = {\n  ids: Array<Scalars['String']>;\n};\n\nexport type TestCategories = {\n  __typename?: 'TestCategories';\n  testCategories: Array<TestCategory>;\n  total: Scalars['Float'];\n  nextCursor?: Maybe<Scalars['String']>;\n};\n\nexport type TestCategoryFilterInput = {\n  certificateType?: Maybe<EnglishCertificateType>;\n  orderDirection?: Maybe<OrderDirection>;\n  cursor?: Maybe<Scalars['String']>;\n  testCategoryIds?: Maybe<TestCategoryIdsInput>;\n};\n\nexport type TestCategoryIdsInput = {\n  ids: Array<Scalars['String']>;\n};\n\nexport type TestGroups = {\n  __typename?: 'TestGroups';\n  testGroups: Array<TestGroup>;\n  total: Scalars['Float'];\n  nextCursor?: Maybe<Scalars['String']>;\n};\n\nexport type TestGroupFilterInput = {\n  orderDirection?: Maybe<OrderDirection>;\n  certificateType?: Maybe<EnglishCertificateType>;\n  groupType?: Maybe<GroupType>;\n  cursor?: Maybe<Scalars['String']>;\n  shouldGetChild?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Me = {\n  __typename?: 'Me';\n  id: Scalars['String'];\n  createdAt: Scalars['DateTime'];\n  updatedAt: Scalars['DateTime'];\n  profileMediaUrl?: Maybe<Scalars['String']>;\n  email: Scalars['String'];\n  firstName: Scalars['String'];\n  lastName?: Maybe<Scalars['String']>;\n  address?: Maybe<Scalars['String']>;\n  level?: Maybe<Scalars['String']>;\n  role: Scalars['String'];\n  /** First + Last name */\n  name: Scalars['String'];\n  phone?: Maybe<Scalars['String']>;\n  socialLinks?: Maybe<SocialLink>;\n  password?: Maybe<Scalars['String']>;\n  isVerified?: Maybe<Scalars['Boolean']>;\n  version: Scalars['Float'];\n  blogs: Array<Blog>;\n  impersonatingUser?: Maybe<ImpersonatingUser>;\n};\n\nexport type ImpersonatingUser = {\n  __typename?: 'ImpersonatingUser';\n  userId: Scalars['String'];\n  tokens: AccessTokens;\n};\n\nexport type AccessTokens = {\n  __typename?: 'AccessTokens';\n  refreshToken: Scalars['String'];\n  accessToken: Scalars['String'];\n};\n\nexport type Blogs = {\n  __typename?: 'Blogs';\n  blogs: Array<Blog>;\n  total: Scalars['Float'];\n  nextCursor?: Maybe<Scalars['String']>;\n};\n\nexport type BlogsSearchInput = {\n  testGroupId?: Maybe<Scalars['String']>;\n  blogName?: Maybe<Scalars['String']>;\n  authorId?: Maybe<Scalars['String']>;\n  orderDirection?: Maybe<OrderDirection>;\n  cursor?: Maybe<Scalars['String']>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  createUser: User;\n  createPart: Part;\n  updatePart: Part;\n  removePart: Scalars['String'];\n  createQuestion: Question;\n  updateQuestion: Question;\n  removeQuestion: Scalars['String'];\n  createTest: Test;\n  updateTest: Test;\n  updateTests: Array<Test>;\n  removeFromCat: Test;\n  removeTest: Scalars['String'];\n  createTestCategory: TestCategory;\n  updateTestCategory: TestCategory;\n  removeTestCategory: Scalars['String'];\n  uploadMedia: Asset;\n  createTestQuestion: TestQuestion;\n  createListTestQuestions: Array<TestQuestion>;\n  removeTestQuestion: Scalars['String'];\n  updateTestQuestion: TestQuestion;\n  createTestGroup: TestGroup;\n  updateTestGroup: TestGroup;\n  removeTestGroup: Scalars['String'];\n  uniqueLinkTestGroup: Scalars['Boolean'];\n  login: Me;\n  logout: Scalars['Boolean'];\n  changePassword: Me;\n  updateMe: Me;\n  createBlog: Blog;\n  updateBlog: Blog;\n  updateBlogOrder: Blog;\n  deleteBlog: Scalars['String'];\n  uniqueLinkBlog: Scalars['Boolean'];\n};\n\n\nexport type MutationCreateUserArgs = {\n  data: NewUserInput;\n};\n\n\nexport type MutationCreatePartArgs = {\n  data: NewPartInput;\n};\n\n\nexport type MutationUpdatePartArgs = {\n  data: NewPartInput;\n};\n\n\nexport type MutationRemovePartArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type MutationCreateQuestionArgs = {\n  data: NewQuestionInput;\n};\n\n\nexport type MutationUpdateQuestionArgs = {\n  data: NewQuestionInput;\n};\n\n\nexport type MutationRemoveQuestionArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type MutationCreateTestArgs = {\n  data: NewTestInput;\n};\n\n\nexport type MutationUpdateTestArgs = {\n  data: NewTestInput;\n};\n\n\nexport type MutationUpdateTestsArgs = {\n  data: TestsUpdateInput;\n};\n\n\nexport type MutationRemoveFromCatArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type MutationRemoveTestArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type MutationCreateTestCategoryArgs = {\n  data: NewTestCategoryInput;\n};\n\n\nexport type MutationUpdateTestCategoryArgs = {\n  data: NewTestCategoryInput;\n};\n\n\nexport type MutationRemoveTestCategoryArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type MutationUploadMediaArgs = {\n  data: AssetInput;\n};\n\n\nexport type MutationCreateTestQuestionArgs = {\n  data: TestQuestionInputId;\n};\n\n\nexport type MutationCreateListTestQuestionsArgs = {\n  data: TestQuestionInputIds;\n};\n\n\nexport type MutationRemoveTestQuestionArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type MutationUpdateTestQuestionArgs = {\n  data: TestQuestionInputId;\n};\n\n\nexport type MutationCreateTestGroupArgs = {\n  data: NewTestGroupInput;\n};\n\n\nexport type MutationUpdateTestGroupArgs = {\n  data: NewTestGroupInput;\n};\n\n\nexport type MutationRemoveTestGroupArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type MutationUniqueLinkTestGroupArgs = {\n  id?: Maybe<Scalars['String']>;\n  link: Scalars['String'];\n};\n\n\nexport type MutationLoginArgs = {\n  password: Scalars['String'];\n  email: Scalars['String'];\n};\n\n\nexport type MutationChangePasswordArgs = {\n  data: ChangePasswordInput;\n};\n\n\nexport type MutationUpdateMeArgs = {\n  data: UpdateMeInput;\n};\n\n\nexport type MutationCreateBlogArgs = {\n  data: NewBlogInput;\n};\n\n\nexport type MutationUpdateBlogArgs = {\n  data: NewBlogInput;\n};\n\n\nexport type MutationUpdateBlogOrderArgs = {\n  data: UpdateBlogOrderInput;\n};\n\n\nexport type MutationDeleteBlogArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type MutationUniqueLinkBlogArgs = {\n  id?: Maybe<Scalars['String']>;\n  link: Scalars['String'];\n};\n\nexport type NewUserInput = {\n  profileMediaUrl?: Maybe<Scalars['String']>;\n  firstName: Scalars['String'];\n  lastName: Scalars['String'];\n  email: Scalars['String'];\n  phone?: Maybe<Scalars['String']>;\n  socialLinks?: Maybe<SocialLinkInput>;\n  address?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n  role: UserRole;\n};\n\nexport type SocialLinkInput = {\n  facebook?: Maybe<Scalars['String']>;\n  twitter?: Maybe<Scalars['String']>;\n  linkedin?: Maybe<Scalars['String']>;\n};\n\n/** User Authorization Roles */\nexport enum UserRole {\n  Member = 'Member',\n  Ops = 'Ops',\n  Admin = 'Admin'\n}\n\nexport type NewPartInput = {\n  id?: Maybe<Scalars['String']>;\n  partName: Scalars['String'];\n  skillType: SkillsType;\n  description: Scalars['String'];\n  certificateType: EnglishCertificateType;\n  displayOrder?: Maybe<Scalars['Float']>;\n};\n\nexport type NewQuestionInput = {\n  id?: Maybe<Scalars['String']>;\n  questionName: Scalars['String'];\n  audioSec: Scalars['Float'];\n  audioSecVN: Scalars['Float'];\n  questionType: QuestionType;\n  content?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  quickExplaination?: Maybe<Scalars['String']>;\n  explaination?: Maybe<Scalars['String']>;\n  image?: Maybe<Scalars['String']>;\n  skillType: SkillsType;\n  certificateType: EnglishCertificateType;\n  answers: Array<AnswersInput>;\n  result: Scalars['String'];\n  partId?: Maybe<Scalars['String']>;\n  testId?: Maybe<Scalars['String']>;\n  answersGroup?: Maybe<Array<AnswersGroupInput>>;\n  questionGroupName?: Maybe<Scalars['String']>;\n};\n\nexport type AnswersInput = {\n  keyAnswer?: Maybe<Scalars['String']>;\n  answerContent?: Maybe<Scalars['String']>;\n};\n\nexport type AnswersGroupInput = {\n  id?: Maybe<Scalars['String']>;\n  order?: Maybe<Scalars['Float']>;\n  description?: Maybe<Scalars['String']>;\n  explaination?: Maybe<Scalars['String']>;\n  result?: Maybe<Scalars['String']>;\n  answers?: Maybe<Array<AnswersInput>>;\n  questionName?: Maybe<Scalars['String']>;\n  isNew?: Maybe<Scalars['Boolean']>;\n};\n\nexport type NewTestInput = {\n  id?: Maybe<Scalars['String']>;\n  testCategoryId?: Maybe<Scalars['String']>;\n  testName?: Maybe<Scalars['String']>;\n  skillType?: Maybe<SkillsType>;\n  description?: Maybe<Scalars['String']>;\n  explaination?: Maybe<Scalars['String']>;\n  certificateType?: Maybe<EnglishCertificateType>;\n  isPublished?: Maybe<Scalars['Boolean']>;\n  partAndAudioSecs?: Maybe<Array<AudioSecondsInput>>;\n  testQuestionInputIds?: Maybe<TestQuestionInputIds>;\n  audioUrl?: Maybe<Scalars['String']>;\n  displayOrder?: Maybe<Scalars['Float']>;\n  displayOrderCategory?: Maybe<Scalars['Float']>;\n};\n\nexport type AudioSecondsInput = {\n  partId?: Maybe<Scalars['String']>;\n  autdioSecs?: Maybe<Scalars['Float']>;\n  displayOrder?: Maybe<Scalars['Float']>;\n};\n\nexport type TestQuestionInputIds = {\n  testId?: Maybe<Scalars['String']>;\n  partIdAndQuestionIdsInput: Array<PartIdAndQuestionIdsInput>;\n};\n\nexport type PartIdAndQuestionIdsInput = {\n  partId?: Maybe<Scalars['String']>;\n  questionIds: Array<Scalars['String']>;\n};\n\nexport type TestsUpdateInput = {\n  testIds: TestIdsInput;\n  testCategoryId: Scalars['String'];\n};\n\nexport type NewTestCategoryInput = {\n  id?: Maybe<Scalars['String']>;\n  testGroupId?: Maybe<Scalars['String']>;\n  testCategoryName: Scalars['String'];\n  certificateType?: Maybe<EnglishCertificateType>;\n  isPublished?: Maybe<Scalars['Boolean']>;\n  displayOrder?: Maybe<Scalars['Float']>;\n  displayOrderGroup?: Maybe<Scalars['Float']>;\n};\n\nexport type Asset = {\n  __typename?: 'Asset';\n  url: Scalars['String'];\n  name: Scalars['String'];\n  path: Scalars['String'];\n  type: Scalars['String'];\n  createdAt: Scalars['DateTime'];\n};\n\nexport type AssetInput = {\n  name: Scalars['String'];\n  type: Scalars['String'];\n  typeFolder: MediaType;\n};\n\nexport enum MediaType {\n  Image = 'Image',\n  Audio = 'Audio',\n  Video = 'Video'\n}\n\nexport type TestQuestionInputId = {\n  id?: Maybe<Scalars['String']>;\n  testId?: Maybe<Scalars['String']>;\n  partId?: Maybe<Scalars['String']>;\n  questionId?: Maybe<Scalars['String']>;\n  displayOrder?: Maybe<Scalars['Float']>;\n};\n\nexport type NewTestGroupInput = {\n  id?: Maybe<Scalars['String']>;\n  testGroupName: Scalars['String'];\n  parentId?: Maybe<Scalars['String']>;\n  displayOrder: Scalars['Float'];\n  link: Scalars['String'];\n  certificateType: EnglishCertificateType;\n  groupType: GroupType;\n};\n\n/** Change password */\nexport type ChangePasswordInput = {\n  token: Scalars['String'];\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\n/** Update me */\nexport type UpdateMeInput = {\n  profileMediaUrl?: Maybe<Scalars['String']>;\n  firstName: Scalars['String'];\n  lastName: Scalars['String'];\n  email?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n  socialLinks?: Maybe<SocialLinkInput>;\n  address?: Maybe<Scalars['String']>;\n  id: Scalars['String'];\n  password?: Maybe<Scalars['String']>;\n};\n\nexport type NewBlogInput = {\n  id?: Maybe<Scalars['String']>;\n  testGroupId: Scalars['String'];\n  blogName: Scalars['String'];\n  link: Scalars['String'];\n  metaTags?: Maybe<MetaTagsInput>;\n  authorId: Scalars['String'];\n  content: Scalars['String'];\n  image?: Maybe<Scalars['String']>;\n};\n\nexport type MetaTagsInput = {\n  imageUrl?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateBlogOrderInput = {\n  id: Scalars['String'];\n  displayOrder: Scalars['Float'];\n};\n\nexport const AssetFragmentDoc = gql`\n    fragment Asset on Asset {\n  url\n  name\n  type\n  path\n}\n    `;\nexport const BlogFragmentDoc = gql`\n    fragment Blog on Blog {\n  id\n  blogName\n  link\n  metaTags {\n    imageUrl\n    description\n  }\n  content\n  author {\n    id\n    firstName\n    lastName\n    email\n    role\n    address\n    profileMediaUrl\n  }\n  testGroup {\n    id\n    testGroupName\n    certificateType\n  }\n  image\n  displayOrder\n  createdAt\n  updatedAt\n}\n    `;\nexport const TestCategoryInfoFragmentDoc = gql`\n    fragment TestCategoryInfo on TestCategory {\n  id\n  testCategoryName\n  certificateType\n  testGroup {\n    id\n  }\n  isPublished\n  displayOrder\n  displayOrderGroup\n  createdAt\n}\n    `;\nexport const TestGroupChildInfoFragmentDoc = gql`\n    fragment TestGroupChildInfo on TestGroup {\n  id\n  testGroupName\n  certificateType\n  link\n  parentId\n  isPublished\n  displayOrder\n  groupType\n}\n    `;\nexport const TestGroupInfoFragmentDoc = gql`\n    fragment TestGroupInfo on TestGroup {\n  id\n  testGroupName\n  certificateType\n  link\n  groupType\n  parentId\n  testGroupsChild {\n    ...TestGroupChildInfo\n  }\n  isPublished\n  displayOrder\n}\n    ${TestGroupChildInfoFragmentDoc}`;\nexport const QuestionGroupFragmentDoc = gql`\n    fragment QuestionGroup on Question {\n  id\n  questionName\n  questionGroupName\n  audioSec\n  audioSecVN\n  questionType\n  image\n  answers {\n    keyAnswer\n    answerContent\n  }\n  content\n  description\n  skillType\n  certificateType\n  explaination\n  result\n  questionGroupOrder\n  isGroup\n}\n    `;\nexport const QuestionFragmentDoc = gql`\n    fragment Question on Question {\n  id\n  questionName\n  questionGroupName\n  audioSec\n  audioSecVN\n  questionType\n  image\n  answers {\n    keyAnswer\n    answerContent\n  }\n  content\n  description\n  skillType\n  certificateType\n  explaination\n  result\n  questionGroupOrder\n  isGroup\n  questionGroups {\n    ...QuestionGroup\n  }\n}\n    ${QuestionGroupFragmentDoc}`;\nexport const PartFragmentDoc = gql`\n    fragment Part on Part {\n  id\n  partName\n  description\n  skillType\n  certificateType\n  displayOrder\n}\n    `;\nexport const TestQuestionFragmentDoc = gql`\n    fragment TestQuestion on TestQuestion {\n  id\n  question {\n    ...Question\n  }\n  part {\n    ...Part\n  }\n  displayOrder\n}\n    ${QuestionFragmentDoc}\n${PartFragmentDoc}`;\nexport const TestFragmentDoc = gql`\n    fragment Test on Test {\n  id\n  testName\n  description\n  skillType\n  certificateType\n  explaination\n  audioUrl\n  partAndAudioSecs {\n    partId\n    autdioSecs\n    displayOrder\n  }\n  testQuestions {\n    ...TestQuestion\n  }\n  isPublished\n  displayOrder\n  displayOrderCategory\n}\n    ${TestQuestionFragmentDoc}`;\nexport const TestCategoryFragmentDoc = gql`\n    fragment TestCategory on TestCategory {\n  id\n  testCategoryName\n  certificateType\n  tests {\n    ...Test\n  }\n  testGroup {\n    id\n  }\n  isPublished\n  displayOrder\n  displayOrderGroup\n}\n    ${TestFragmentDoc}`;\nexport const TestGroupFragmentDoc = gql`\n    fragment TestGroup on TestGroup {\n  id\n  testGroupName\n  certificateType\n  link\n  groupType\n  parentId\n  testCategories {\n    ...TestCategory\n  }\n  isPublished\n  displayOrder\n}\n    ${TestCategoryFragmentDoc}`;\nexport const UserFragmentDoc = gql`\n    fragment User on User {\n  id\n  firstName\n  lastName\n  email\n  role\n  address\n  profileMediaUrl\n}\n    `;\nexport const MeFragmentDoc = gql`\n    fragment Me on Me {\n  id\n  firstName\n  lastName\n  email\n  role\n  address\n  profileMediaUrl\n  name\n  impersonatingUser {\n    userId\n    tokens {\n      accessToken\n      refreshToken\n    }\n  }\n}\n    `;\nexport const UploadMediaDocument = gql`\n    mutation uploadMedia($data: AssetInput!) {\n  uploadMedia(data: $data) {\n    ...Asset\n  }\n}\n    ${AssetFragmentDoc}`;\nexport type UploadMediaMutationFn = ApolloReactCommon.MutationFunction<UploadMediaMutation, UploadMediaMutationVariables>;\nexport type UploadMediaComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<UploadMediaMutation, UploadMediaMutationVariables>, 'mutation'>;\n\n    export const UploadMediaComponent = (props: UploadMediaComponentProps) => (\n      <ApolloReactComponents.Mutation<UploadMediaMutation, UploadMediaMutationVariables> mutation={UploadMediaDocument} {...props} />\n    );\n    \n\n/**\n * __useUploadMediaMutation__\n *\n * To run a mutation, you first call `useUploadMediaMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUploadMediaMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [uploadMediaMutation, { data, loading, error }] = useUploadMediaMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useUploadMediaMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UploadMediaMutation, UploadMediaMutationVariables>) {\n        return ApolloReactHooks.useMutation<UploadMediaMutation, UploadMediaMutationVariables>(UploadMediaDocument, baseOptions);\n      }\nexport type UploadMediaMutationHookResult = ReturnType<typeof useUploadMediaMutation>;\nexport type UploadMediaMutationResult = ApolloReactCommon.MutationResult<UploadMediaMutation>;\nexport type UploadMediaMutationOptions = ApolloReactCommon.BaseMutationOptions<UploadMediaMutation, UploadMediaMutationVariables>;\nexport const CreateBlogDocument = gql`\n    mutation createBlog($data: NewBlogInput!) {\n  createBlog(data: $data) {\n    ...Blog\n  }\n}\n    ${BlogFragmentDoc}`;\nexport type CreateBlogMutationFn = ApolloReactCommon.MutationFunction<CreateBlogMutation, CreateBlogMutationVariables>;\nexport type CreateBlogComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<CreateBlogMutation, CreateBlogMutationVariables>, 'mutation'>;\n\n    export const CreateBlogComponent = (props: CreateBlogComponentProps) => (\n      <ApolloReactComponents.Mutation<CreateBlogMutation, CreateBlogMutationVariables> mutation={CreateBlogDocument} {...props} />\n    );\n    \n\n/**\n * __useCreateBlogMutation__\n *\n * To run a mutation, you first call `useCreateBlogMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateBlogMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createBlogMutation, { data, loading, error }] = useCreateBlogMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useCreateBlogMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateBlogMutation, CreateBlogMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateBlogMutation, CreateBlogMutationVariables>(CreateBlogDocument, baseOptions);\n      }\nexport type CreateBlogMutationHookResult = ReturnType<typeof useCreateBlogMutation>;\nexport type CreateBlogMutationResult = ApolloReactCommon.MutationResult<CreateBlogMutation>;\nexport type CreateBlogMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateBlogMutation, CreateBlogMutationVariables>;\nexport const UpdateBlogDocument = gql`\n    mutation updateBlog($data: NewBlogInput!) {\n  updateBlog(data: $data) {\n    ...Blog\n  }\n}\n    ${BlogFragmentDoc}`;\nexport type UpdateBlogMutationFn = ApolloReactCommon.MutationFunction<UpdateBlogMutation, UpdateBlogMutationVariables>;\nexport type UpdateBlogComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<UpdateBlogMutation, UpdateBlogMutationVariables>, 'mutation'>;\n\n    export const UpdateBlogComponent = (props: UpdateBlogComponentProps) => (\n      <ApolloReactComponents.Mutation<UpdateBlogMutation, UpdateBlogMutationVariables> mutation={UpdateBlogDocument} {...props} />\n    );\n    \n\n/**\n * __useUpdateBlogMutation__\n *\n * To run a mutation, you first call `useUpdateBlogMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateBlogMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateBlogMutation, { data, loading, error }] = useUpdateBlogMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useUpdateBlogMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateBlogMutation, UpdateBlogMutationVariables>) {\n        return ApolloReactHooks.useMutation<UpdateBlogMutation, UpdateBlogMutationVariables>(UpdateBlogDocument, baseOptions);\n      }\nexport type UpdateBlogMutationHookResult = ReturnType<typeof useUpdateBlogMutation>;\nexport type UpdateBlogMutationResult = ApolloReactCommon.MutationResult<UpdateBlogMutation>;\nexport type UpdateBlogMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateBlogMutation, UpdateBlogMutationVariables>;\nexport const UpdateBlogOrderDocument = gql`\n    mutation updateBlogOrder($data: UpdateBlogOrderInput!) {\n  updateBlogOrder(data: $data) {\n    ...Blog\n  }\n}\n    ${BlogFragmentDoc}`;\nexport type UpdateBlogOrderMutationFn = ApolloReactCommon.MutationFunction<UpdateBlogOrderMutation, UpdateBlogOrderMutationVariables>;\nexport type UpdateBlogOrderComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<UpdateBlogOrderMutation, UpdateBlogOrderMutationVariables>, 'mutation'>;\n\n    export const UpdateBlogOrderComponent = (props: UpdateBlogOrderComponentProps) => (\n      <ApolloReactComponents.Mutation<UpdateBlogOrderMutation, UpdateBlogOrderMutationVariables> mutation={UpdateBlogOrderDocument} {...props} />\n    );\n    \n\n/**\n * __useUpdateBlogOrderMutation__\n *\n * To run a mutation, you first call `useUpdateBlogOrderMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateBlogOrderMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateBlogOrderMutation, { data, loading, error }] = useUpdateBlogOrderMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useUpdateBlogOrderMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateBlogOrderMutation, UpdateBlogOrderMutationVariables>) {\n        return ApolloReactHooks.useMutation<UpdateBlogOrderMutation, UpdateBlogOrderMutationVariables>(UpdateBlogOrderDocument, baseOptions);\n      }\nexport type UpdateBlogOrderMutationHookResult = ReturnType<typeof useUpdateBlogOrderMutation>;\nexport type UpdateBlogOrderMutationResult = ApolloReactCommon.MutationResult<UpdateBlogOrderMutation>;\nexport type UpdateBlogOrderMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateBlogOrderMutation, UpdateBlogOrderMutationVariables>;\nexport const GetBlogDocument = gql`\n    query getBlog($id: String!) {\n  getBlog(id: $id) {\n    ...Blog\n  }\n}\n    ${BlogFragmentDoc}`;\nexport type GetBlogComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetBlogQuery, GetBlogQueryVariables>, 'query'> & ({ variables: GetBlogQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const GetBlogComponent = (props: GetBlogComponentProps) => (\n      <ApolloReactComponents.Query<GetBlogQuery, GetBlogQueryVariables> query={GetBlogDocument} {...props} />\n    );\n    \n\n/**\n * __useGetBlogQuery__\n *\n * To run a query within a React component, call `useGetBlogQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetBlogQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetBlogQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetBlogQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetBlogQuery, GetBlogQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetBlogQuery, GetBlogQueryVariables>(GetBlogDocument, baseOptions);\n      }\nexport function useGetBlogLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetBlogQuery, GetBlogQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetBlogQuery, GetBlogQueryVariables>(GetBlogDocument, baseOptions);\n        }\nexport type GetBlogQueryHookResult = ReturnType<typeof useGetBlogQuery>;\nexport type GetBlogLazyQueryHookResult = ReturnType<typeof useGetBlogLazyQuery>;\nexport type GetBlogQueryResult = ApolloReactCommon.QueryResult<GetBlogQuery, GetBlogQueryVariables>;\nexport const GetBlogsDocument = gql`\n    query getBlogs($data: BlogsSearchInput!) {\n  getBlogs(data: $data) {\n    blogs {\n      ...Blog\n    }\n    total\n    nextCursor\n  }\n}\n    ${BlogFragmentDoc}`;\nexport type GetBlogsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetBlogsQuery, GetBlogsQueryVariables>, 'query'> & ({ variables: GetBlogsQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const GetBlogsComponent = (props: GetBlogsComponentProps) => (\n      <ApolloReactComponents.Query<GetBlogsQuery, GetBlogsQueryVariables> query={GetBlogsDocument} {...props} />\n    );\n    \n\n/**\n * __useGetBlogsQuery__\n *\n * To run a query within a React component, call `useGetBlogsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetBlogsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetBlogsQuery({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useGetBlogsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetBlogsQuery, GetBlogsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetBlogsQuery, GetBlogsQueryVariables>(GetBlogsDocument, baseOptions);\n      }\nexport function useGetBlogsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetBlogsQuery, GetBlogsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetBlogsQuery, GetBlogsQueryVariables>(GetBlogsDocument, baseOptions);\n        }\nexport type GetBlogsQueryHookResult = ReturnType<typeof useGetBlogsQuery>;\nexport type GetBlogsLazyQueryHookResult = ReturnType<typeof useGetBlogsLazyQuery>;\nexport type GetBlogsQueryResult = ApolloReactCommon.QueryResult<GetBlogsQuery, GetBlogsQueryVariables>;\nexport const DeleteBlogDocument = gql`\n    mutation deleteBlog($id: String!) {\n  deleteBlog(id: $id)\n}\n    `;\nexport type DeleteBlogMutationFn = ApolloReactCommon.MutationFunction<DeleteBlogMutation, DeleteBlogMutationVariables>;\nexport type DeleteBlogComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<DeleteBlogMutation, DeleteBlogMutationVariables>, 'mutation'>;\n\n    export const DeleteBlogComponent = (props: DeleteBlogComponentProps) => (\n      <ApolloReactComponents.Mutation<DeleteBlogMutation, DeleteBlogMutationVariables> mutation={DeleteBlogDocument} {...props} />\n    );\n    \n\n/**\n * __useDeleteBlogMutation__\n *\n * To run a mutation, you first call `useDeleteBlogMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteBlogMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteBlogMutation, { data, loading, error }] = useDeleteBlogMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteBlogMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteBlogMutation, DeleteBlogMutationVariables>) {\n        return ApolloReactHooks.useMutation<DeleteBlogMutation, DeleteBlogMutationVariables>(DeleteBlogDocument, baseOptions);\n      }\nexport type DeleteBlogMutationHookResult = ReturnType<typeof useDeleteBlogMutation>;\nexport type DeleteBlogMutationResult = ApolloReactCommon.MutationResult<DeleteBlogMutation>;\nexport type DeleteBlogMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteBlogMutation, DeleteBlogMutationVariables>;\nexport const UniqueLinkBlogDocument = gql`\n    mutation uniqueLinkBlog($link: String!, $id: String) {\n  uniqueLinkBlog(link: $link, id: $id)\n}\n    `;\nexport type UniqueLinkBlogMutationFn = ApolloReactCommon.MutationFunction<UniqueLinkBlogMutation, UniqueLinkBlogMutationVariables>;\nexport type UniqueLinkBlogComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<UniqueLinkBlogMutation, UniqueLinkBlogMutationVariables>, 'mutation'>;\n\n    export const UniqueLinkBlogComponent = (props: UniqueLinkBlogComponentProps) => (\n      <ApolloReactComponents.Mutation<UniqueLinkBlogMutation, UniqueLinkBlogMutationVariables> mutation={UniqueLinkBlogDocument} {...props} />\n    );\n    \n\n/**\n * __useUniqueLinkBlogMutation__\n *\n * To run a mutation, you first call `useUniqueLinkBlogMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUniqueLinkBlogMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [uniqueLinkBlogMutation, { data, loading, error }] = useUniqueLinkBlogMutation({\n *   variables: {\n *      link: // value for 'link'\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useUniqueLinkBlogMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UniqueLinkBlogMutation, UniqueLinkBlogMutationVariables>) {\n        return ApolloReactHooks.useMutation<UniqueLinkBlogMutation, UniqueLinkBlogMutationVariables>(UniqueLinkBlogDocument, baseOptions);\n      }\nexport type UniqueLinkBlogMutationHookResult = ReturnType<typeof useUniqueLinkBlogMutation>;\nexport type UniqueLinkBlogMutationResult = ApolloReactCommon.MutationResult<UniqueLinkBlogMutation>;\nexport type UniqueLinkBlogMutationOptions = ApolloReactCommon.BaseMutationOptions<UniqueLinkBlogMutation, UniqueLinkBlogMutationVariables>;\nexport const CreatePartDocument = gql`\n    mutation createPart($data: NewPartInput!) {\n  createPart(data: $data) {\n    ...Part\n  }\n}\n    ${PartFragmentDoc}`;\nexport type CreatePartMutationFn = ApolloReactCommon.MutationFunction<CreatePartMutation, CreatePartMutationVariables>;\nexport type CreatePartComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<CreatePartMutation, CreatePartMutationVariables>, 'mutation'>;\n\n    export const CreatePartComponent = (props: CreatePartComponentProps) => (\n      <ApolloReactComponents.Mutation<CreatePartMutation, CreatePartMutationVariables> mutation={CreatePartDocument} {...props} />\n    );\n    \n\n/**\n * __useCreatePartMutation__\n *\n * To run a mutation, you first call `useCreatePartMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreatePartMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createPartMutation, { data, loading, error }] = useCreatePartMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useCreatePartMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreatePartMutation, CreatePartMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreatePartMutation, CreatePartMutationVariables>(CreatePartDocument, baseOptions);\n      }\nexport type CreatePartMutationHookResult = ReturnType<typeof useCreatePartMutation>;\nexport type CreatePartMutationResult = ApolloReactCommon.MutationResult<CreatePartMutation>;\nexport type CreatePartMutationOptions = ApolloReactCommon.BaseMutationOptions<CreatePartMutation, CreatePartMutationVariables>;\nexport const GetPartDocument = gql`\n    query getPart($id: String!) {\n  part(id: $id) {\n    ...Part\n  }\n}\n    ${PartFragmentDoc}`;\nexport type GetPartComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetPartQuery, GetPartQueryVariables>, 'query'> & ({ variables: GetPartQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const GetPartComponent = (props: GetPartComponentProps) => (\n      <ApolloReactComponents.Query<GetPartQuery, GetPartQueryVariables> query={GetPartDocument} {...props} />\n    );\n    \n\n/**\n * __useGetPartQuery__\n *\n * To run a query within a React component, call `useGetPartQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPartQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPartQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetPartQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetPartQuery, GetPartQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetPartQuery, GetPartQueryVariables>(GetPartDocument, baseOptions);\n      }\nexport function useGetPartLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetPartQuery, GetPartQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetPartQuery, GetPartQueryVariables>(GetPartDocument, baseOptions);\n        }\nexport type GetPartQueryHookResult = ReturnType<typeof useGetPartQuery>;\nexport type GetPartLazyQueryHookResult = ReturnType<typeof useGetPartLazyQuery>;\nexport type GetPartQueryResult = ApolloReactCommon.QueryResult<GetPartQuery, GetPartQueryVariables>;\nexport const GetPartsDocument = gql`\n    query getParts($data: PartFilterInput!) {\n  getParts(data: $data) {\n    parts {\n      ...Part\n    }\n    total\n    nextCursor\n  }\n}\n    ${PartFragmentDoc}`;\nexport type GetPartsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetPartsQuery, GetPartsQueryVariables>, 'query'> & ({ variables: GetPartsQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const GetPartsComponent = (props: GetPartsComponentProps) => (\n      <ApolloReactComponents.Query<GetPartsQuery, GetPartsQueryVariables> query={GetPartsDocument} {...props} />\n    );\n    \n\n/**\n * __useGetPartsQuery__\n *\n * To run a query within a React component, call `useGetPartsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPartsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPartsQuery({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useGetPartsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetPartsQuery, GetPartsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetPartsQuery, GetPartsQueryVariables>(GetPartsDocument, baseOptions);\n      }\nexport function useGetPartsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetPartsQuery, GetPartsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetPartsQuery, GetPartsQueryVariables>(GetPartsDocument, baseOptions);\n        }\nexport type GetPartsQueryHookResult = ReturnType<typeof useGetPartsQuery>;\nexport type GetPartsLazyQueryHookResult = ReturnType<typeof useGetPartsLazyQuery>;\nexport type GetPartsQueryResult = ApolloReactCommon.QueryResult<GetPartsQuery, GetPartsQueryVariables>;\nexport const GetPartsFromIdsDocument = gql`\n    query getPartsFromIds($data: PartIdsInput!) {\n  getPartsFromIds(data: $data) {\n    ...Part\n  }\n}\n    ${PartFragmentDoc}`;\nexport type GetPartsFromIdsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetPartsFromIdsQuery, GetPartsFromIdsQueryVariables>, 'query'> & ({ variables: GetPartsFromIdsQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const GetPartsFromIdsComponent = (props: GetPartsFromIdsComponentProps) => (\n      <ApolloReactComponents.Query<GetPartsFromIdsQuery, GetPartsFromIdsQueryVariables> query={GetPartsFromIdsDocument} {...props} />\n    );\n    \n\n/**\n * __useGetPartsFromIdsQuery__\n *\n * To run a query within a React component, call `useGetPartsFromIdsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPartsFromIdsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPartsFromIdsQuery({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useGetPartsFromIdsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetPartsFromIdsQuery, GetPartsFromIdsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetPartsFromIdsQuery, GetPartsFromIdsQueryVariables>(GetPartsFromIdsDocument, baseOptions);\n      }\nexport function useGetPartsFromIdsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetPartsFromIdsQuery, GetPartsFromIdsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetPartsFromIdsQuery, GetPartsFromIdsQueryVariables>(GetPartsFromIdsDocument, baseOptions);\n        }\nexport type GetPartsFromIdsQueryHookResult = ReturnType<typeof useGetPartsFromIdsQuery>;\nexport type GetPartsFromIdsLazyQueryHookResult = ReturnType<typeof useGetPartsFromIdsLazyQuery>;\nexport type GetPartsFromIdsQueryResult = ApolloReactCommon.QueryResult<GetPartsFromIdsQuery, GetPartsFromIdsQueryVariables>;\nexport const UpdatePartDocument = gql`\n    mutation updatePart($data: NewPartInput!) {\n  updatePart(data: $data) {\n    ...Part\n  }\n}\n    ${PartFragmentDoc}`;\nexport type UpdatePartMutationFn = ApolloReactCommon.MutationFunction<UpdatePartMutation, UpdatePartMutationVariables>;\nexport type UpdatePartComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<UpdatePartMutation, UpdatePartMutationVariables>, 'mutation'>;\n\n    export const UpdatePartComponent = (props: UpdatePartComponentProps) => (\n      <ApolloReactComponents.Mutation<UpdatePartMutation, UpdatePartMutationVariables> mutation={UpdatePartDocument} {...props} />\n    );\n    \n\n/**\n * __useUpdatePartMutation__\n *\n * To run a mutation, you first call `useUpdatePartMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdatePartMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updatePartMutation, { data, loading, error }] = useUpdatePartMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useUpdatePartMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdatePartMutation, UpdatePartMutationVariables>) {\n        return ApolloReactHooks.useMutation<UpdatePartMutation, UpdatePartMutationVariables>(UpdatePartDocument, baseOptions);\n      }\nexport type UpdatePartMutationHookResult = ReturnType<typeof useUpdatePartMutation>;\nexport type UpdatePartMutationResult = ApolloReactCommon.MutationResult<UpdatePartMutation>;\nexport type UpdatePartMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdatePartMutation, UpdatePartMutationVariables>;\nexport const RemovePartDocument = gql`\n    mutation removePart($id: String!) {\n  removePart(id: $id)\n}\n    `;\nexport type RemovePartMutationFn = ApolloReactCommon.MutationFunction<RemovePartMutation, RemovePartMutationVariables>;\nexport type RemovePartComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<RemovePartMutation, RemovePartMutationVariables>, 'mutation'>;\n\n    export const RemovePartComponent = (props: RemovePartComponentProps) => (\n      <ApolloReactComponents.Mutation<RemovePartMutation, RemovePartMutationVariables> mutation={RemovePartDocument} {...props} />\n    );\n    \n\n/**\n * __useRemovePartMutation__\n *\n * To run a mutation, you first call `useRemovePartMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemovePartMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removePartMutation, { data, loading, error }] = useRemovePartMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useRemovePartMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RemovePartMutation, RemovePartMutationVariables>) {\n        return ApolloReactHooks.useMutation<RemovePartMutation, RemovePartMutationVariables>(RemovePartDocument, baseOptions);\n      }\nexport type RemovePartMutationHookResult = ReturnType<typeof useRemovePartMutation>;\nexport type RemovePartMutationResult = ApolloReactCommon.MutationResult<RemovePartMutation>;\nexport type RemovePartMutationOptions = ApolloReactCommon.BaseMutationOptions<RemovePartMutation, RemovePartMutationVariables>;\nexport const CreateQuestionDocument = gql`\n    mutation createQuestion($data: NewQuestionInput!) {\n  createQuestion(data: $data) {\n    ...Question\n  }\n}\n    ${QuestionFragmentDoc}`;\nexport type CreateQuestionMutationFn = ApolloReactCommon.MutationFunction<CreateQuestionMutation, CreateQuestionMutationVariables>;\nexport type CreateQuestionComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<CreateQuestionMutation, CreateQuestionMutationVariables>, 'mutation'>;\n\n    export const CreateQuestionComponent = (props: CreateQuestionComponentProps) => (\n      <ApolloReactComponents.Mutation<CreateQuestionMutation, CreateQuestionMutationVariables> mutation={CreateQuestionDocument} {...props} />\n    );\n    \n\n/**\n * __useCreateQuestionMutation__\n *\n * To run a mutation, you first call `useCreateQuestionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateQuestionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createQuestionMutation, { data, loading, error }] = useCreateQuestionMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useCreateQuestionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateQuestionMutation, CreateQuestionMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateQuestionMutation, CreateQuestionMutationVariables>(CreateQuestionDocument, baseOptions);\n      }\nexport type CreateQuestionMutationHookResult = ReturnType<typeof useCreateQuestionMutation>;\nexport type CreateQuestionMutationResult = ApolloReactCommon.MutationResult<CreateQuestionMutation>;\nexport type CreateQuestionMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateQuestionMutation, CreateQuestionMutationVariables>;\nexport const UpdateQuestionDocument = gql`\n    mutation updateQuestion($data: NewQuestionInput!) {\n  updateQuestion(data: $data) {\n    ...Question\n  }\n}\n    ${QuestionFragmentDoc}`;\nexport type UpdateQuestionMutationFn = ApolloReactCommon.MutationFunction<UpdateQuestionMutation, UpdateQuestionMutationVariables>;\nexport type UpdateQuestionComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<UpdateQuestionMutation, UpdateQuestionMutationVariables>, 'mutation'>;\n\n    export const UpdateQuestionComponent = (props: UpdateQuestionComponentProps) => (\n      <ApolloReactComponents.Mutation<UpdateQuestionMutation, UpdateQuestionMutationVariables> mutation={UpdateQuestionDocument} {...props} />\n    );\n    \n\n/**\n * __useUpdateQuestionMutation__\n *\n * To run a mutation, you first call `useUpdateQuestionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateQuestionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateQuestionMutation, { data, loading, error }] = useUpdateQuestionMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useUpdateQuestionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateQuestionMutation, UpdateQuestionMutationVariables>) {\n        return ApolloReactHooks.useMutation<UpdateQuestionMutation, UpdateQuestionMutationVariables>(UpdateQuestionDocument, baseOptions);\n      }\nexport type UpdateQuestionMutationHookResult = ReturnType<typeof useUpdateQuestionMutation>;\nexport type UpdateQuestionMutationResult = ApolloReactCommon.MutationResult<UpdateQuestionMutation>;\nexport type UpdateQuestionMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateQuestionMutation, UpdateQuestionMutationVariables>;\nexport const GetQuestionDocument = gql`\n    query getQuestion($id: String!) {\n  question(id: $id) {\n    ...Question\n  }\n}\n    ${QuestionFragmentDoc}`;\nexport type GetQuestionComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetQuestionQuery, GetQuestionQueryVariables>, 'query'> & ({ variables: GetQuestionQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const GetQuestionComponent = (props: GetQuestionComponentProps) => (\n      <ApolloReactComponents.Query<GetQuestionQuery, GetQuestionQueryVariables> query={GetQuestionDocument} {...props} />\n    );\n    \n\n/**\n * __useGetQuestionQuery__\n *\n * To run a query within a React component, call `useGetQuestionQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetQuestionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetQuestionQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetQuestionQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetQuestionQuery, GetQuestionQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetQuestionQuery, GetQuestionQueryVariables>(GetQuestionDocument, baseOptions);\n      }\nexport function useGetQuestionLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetQuestionQuery, GetQuestionQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetQuestionQuery, GetQuestionQueryVariables>(GetQuestionDocument, baseOptions);\n        }\nexport type GetQuestionQueryHookResult = ReturnType<typeof useGetQuestionQuery>;\nexport type GetQuestionLazyQueryHookResult = ReturnType<typeof useGetQuestionLazyQuery>;\nexport type GetQuestionQueryResult = ApolloReactCommon.QueryResult<GetQuestionQuery, GetQuestionQueryVariables>;\nexport const GetQuestionsDocument = gql`\n    query getQuestions($data: QuestionFilterTypeInput!) {\n  questions(questionFilterType: $data) {\n    questions {\n      ...Question\n    }\n    total\n    nextCursor\n  }\n}\n    ${QuestionFragmentDoc}`;\nexport type GetQuestionsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetQuestionsQuery, GetQuestionsQueryVariables>, 'query'> & ({ variables: GetQuestionsQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const GetQuestionsComponent = (props: GetQuestionsComponentProps) => (\n      <ApolloReactComponents.Query<GetQuestionsQuery, GetQuestionsQueryVariables> query={GetQuestionsDocument} {...props} />\n    );\n    \n\n/**\n * __useGetQuestionsQuery__\n *\n * To run a query within a React component, call `useGetQuestionsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetQuestionsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetQuestionsQuery({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useGetQuestionsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetQuestionsQuery, GetQuestionsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetQuestionsQuery, GetQuestionsQueryVariables>(GetQuestionsDocument, baseOptions);\n      }\nexport function useGetQuestionsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetQuestionsQuery, GetQuestionsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetQuestionsQuery, GetQuestionsQueryVariables>(GetQuestionsDocument, baseOptions);\n        }\nexport type GetQuestionsQueryHookResult = ReturnType<typeof useGetQuestionsQuery>;\nexport type GetQuestionsLazyQueryHookResult = ReturnType<typeof useGetQuestionsLazyQuery>;\nexport type GetQuestionsQueryResult = ApolloReactCommon.QueryResult<GetQuestionsQuery, GetQuestionsQueryVariables>;\nexport const RemoveQuestionDocument = gql`\n    mutation removeQuestion($id: String!) {\n  removeQuestion(id: $id)\n}\n    `;\nexport type RemoveQuestionMutationFn = ApolloReactCommon.MutationFunction<RemoveQuestionMutation, RemoveQuestionMutationVariables>;\nexport type RemoveQuestionComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<RemoveQuestionMutation, RemoveQuestionMutationVariables>, 'mutation'>;\n\n    export const RemoveQuestionComponent = (props: RemoveQuestionComponentProps) => (\n      <ApolloReactComponents.Mutation<RemoveQuestionMutation, RemoveQuestionMutationVariables> mutation={RemoveQuestionDocument} {...props} />\n    );\n    \n\n/**\n * __useRemoveQuestionMutation__\n *\n * To run a mutation, you first call `useRemoveQuestionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveQuestionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeQuestionMutation, { data, loading, error }] = useRemoveQuestionMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useRemoveQuestionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RemoveQuestionMutation, RemoveQuestionMutationVariables>) {\n        return ApolloReactHooks.useMutation<RemoveQuestionMutation, RemoveQuestionMutationVariables>(RemoveQuestionDocument, baseOptions);\n      }\nexport type RemoveQuestionMutationHookResult = ReturnType<typeof useRemoveQuestionMutation>;\nexport type RemoveQuestionMutationResult = ApolloReactCommon.MutationResult<RemoveQuestionMutation>;\nexport type RemoveQuestionMutationOptions = ApolloReactCommon.BaseMutationOptions<RemoveQuestionMutation, RemoveQuestionMutationVariables>;\nexport const CreateTestDocument = gql`\n    mutation createTest($data: NewTestInput!) {\n  createTest(data: $data) {\n    ...Test\n  }\n}\n    ${TestFragmentDoc}`;\nexport type CreateTestMutationFn = ApolloReactCommon.MutationFunction<CreateTestMutation, CreateTestMutationVariables>;\nexport type CreateTestComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<CreateTestMutation, CreateTestMutationVariables>, 'mutation'>;\n\n    export const CreateTestComponent = (props: CreateTestComponentProps) => (\n      <ApolloReactComponents.Mutation<CreateTestMutation, CreateTestMutationVariables> mutation={CreateTestDocument} {...props} />\n    );\n    \n\n/**\n * __useCreateTestMutation__\n *\n * To run a mutation, you first call `useCreateTestMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTestMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTestMutation, { data, loading, error }] = useCreateTestMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useCreateTestMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateTestMutation, CreateTestMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateTestMutation, CreateTestMutationVariables>(CreateTestDocument, baseOptions);\n      }\nexport type CreateTestMutationHookResult = ReturnType<typeof useCreateTestMutation>;\nexport type CreateTestMutationResult = ApolloReactCommon.MutationResult<CreateTestMutation>;\nexport type CreateTestMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateTestMutation, CreateTestMutationVariables>;\nexport const UpdateTestDocument = gql`\n    mutation updateTest($data: NewTestInput!) {\n  updateTest(data: $data) {\n    ...Test\n  }\n}\n    ${TestFragmentDoc}`;\nexport type UpdateTestMutationFn = ApolloReactCommon.MutationFunction<UpdateTestMutation, UpdateTestMutationVariables>;\nexport type UpdateTestComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<UpdateTestMutation, UpdateTestMutationVariables>, 'mutation'>;\n\n    export const UpdateTestComponent = (props: UpdateTestComponentProps) => (\n      <ApolloReactComponents.Mutation<UpdateTestMutation, UpdateTestMutationVariables> mutation={UpdateTestDocument} {...props} />\n    );\n    \n\n/**\n * __useUpdateTestMutation__\n *\n * To run a mutation, you first call `useUpdateTestMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateTestMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateTestMutation, { data, loading, error }] = useUpdateTestMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useUpdateTestMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateTestMutation, UpdateTestMutationVariables>) {\n        return ApolloReactHooks.useMutation<UpdateTestMutation, UpdateTestMutationVariables>(UpdateTestDocument, baseOptions);\n      }\nexport type UpdateTestMutationHookResult = ReturnType<typeof useUpdateTestMutation>;\nexport type UpdateTestMutationResult = ApolloReactCommon.MutationResult<UpdateTestMutation>;\nexport type UpdateTestMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateTestMutation, UpdateTestMutationVariables>;\nexport const UpdateTestsDocument = gql`\n    mutation updateTests($data: TestsUpdateInput!) {\n  updateTests(data: $data) {\n    ...Test\n  }\n}\n    ${TestFragmentDoc}`;\nexport type UpdateTestsMutationFn = ApolloReactCommon.MutationFunction<UpdateTestsMutation, UpdateTestsMutationVariables>;\nexport type UpdateTestsComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<UpdateTestsMutation, UpdateTestsMutationVariables>, 'mutation'>;\n\n    export const UpdateTestsComponent = (props: UpdateTestsComponentProps) => (\n      <ApolloReactComponents.Mutation<UpdateTestsMutation, UpdateTestsMutationVariables> mutation={UpdateTestsDocument} {...props} />\n    );\n    \n\n/**\n * __useUpdateTestsMutation__\n *\n * To run a mutation, you first call `useUpdateTestsMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateTestsMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateTestsMutation, { data, loading, error }] = useUpdateTestsMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useUpdateTestsMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateTestsMutation, UpdateTestsMutationVariables>) {\n        return ApolloReactHooks.useMutation<UpdateTestsMutation, UpdateTestsMutationVariables>(UpdateTestsDocument, baseOptions);\n      }\nexport type UpdateTestsMutationHookResult = ReturnType<typeof useUpdateTestsMutation>;\nexport type UpdateTestsMutationResult = ApolloReactCommon.MutationResult<UpdateTestsMutation>;\nexport type UpdateTestsMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateTestsMutation, UpdateTestsMutationVariables>;\nexport const RemoveFromCatDocument = gql`\n    mutation removeFromCat($id: String!) {\n  removeFromCat(id: $id) {\n    ...Test\n  }\n}\n    ${TestFragmentDoc}`;\nexport type RemoveFromCatMutationFn = ApolloReactCommon.MutationFunction<RemoveFromCatMutation, RemoveFromCatMutationVariables>;\nexport type RemoveFromCatComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<RemoveFromCatMutation, RemoveFromCatMutationVariables>, 'mutation'>;\n\n    export const RemoveFromCatComponent = (props: RemoveFromCatComponentProps) => (\n      <ApolloReactComponents.Mutation<RemoveFromCatMutation, RemoveFromCatMutationVariables> mutation={RemoveFromCatDocument} {...props} />\n    );\n    \n\n/**\n * __useRemoveFromCatMutation__\n *\n * To run a mutation, you first call `useRemoveFromCatMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveFromCatMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeFromCatMutation, { data, loading, error }] = useRemoveFromCatMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useRemoveFromCatMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RemoveFromCatMutation, RemoveFromCatMutationVariables>) {\n        return ApolloReactHooks.useMutation<RemoveFromCatMutation, RemoveFromCatMutationVariables>(RemoveFromCatDocument, baseOptions);\n      }\nexport type RemoveFromCatMutationHookResult = ReturnType<typeof useRemoveFromCatMutation>;\nexport type RemoveFromCatMutationResult = ApolloReactCommon.MutationResult<RemoveFromCatMutation>;\nexport type RemoveFromCatMutationOptions = ApolloReactCommon.BaseMutationOptions<RemoveFromCatMutation, RemoveFromCatMutationVariables>;\nexport const GetTestDocument = gql`\n    query getTest($id: String!) {\n  test(id: $id) {\n    ...Test\n  }\n}\n    ${TestFragmentDoc}`;\nexport type GetTestComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetTestQuery, GetTestQueryVariables>, 'query'> & ({ variables: GetTestQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const GetTestComponent = (props: GetTestComponentProps) => (\n      <ApolloReactComponents.Query<GetTestQuery, GetTestQueryVariables> query={GetTestDocument} {...props} />\n    );\n    \n\n/**\n * __useGetTestQuery__\n *\n * To run a query within a React component, call `useGetTestQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTestQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTestQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetTestQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTestQuery, GetTestQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetTestQuery, GetTestQueryVariables>(GetTestDocument, baseOptions);\n      }\nexport function useGetTestLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTestQuery, GetTestQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetTestQuery, GetTestQueryVariables>(GetTestDocument, baseOptions);\n        }\nexport type GetTestQueryHookResult = ReturnType<typeof useGetTestQuery>;\nexport type GetTestLazyQueryHookResult = ReturnType<typeof useGetTestLazyQuery>;\nexport type GetTestQueryResult = ApolloReactCommon.QueryResult<GetTestQuery, GetTestQueryVariables>;\nexport const RemoveTestDocument = gql`\n    mutation removeTest($id: String!) {\n  removeTest(id: $id)\n}\n    `;\nexport type RemoveTestMutationFn = ApolloReactCommon.MutationFunction<RemoveTestMutation, RemoveTestMutationVariables>;\nexport type RemoveTestComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<RemoveTestMutation, RemoveTestMutationVariables>, 'mutation'>;\n\n    export const RemoveTestComponent = (props: RemoveTestComponentProps) => (\n      <ApolloReactComponents.Mutation<RemoveTestMutation, RemoveTestMutationVariables> mutation={RemoveTestDocument} {...props} />\n    );\n    \n\n/**\n * __useRemoveTestMutation__\n *\n * To run a mutation, you first call `useRemoveTestMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveTestMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeTestMutation, { data, loading, error }] = useRemoveTestMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useRemoveTestMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RemoveTestMutation, RemoveTestMutationVariables>) {\n        return ApolloReactHooks.useMutation<RemoveTestMutation, RemoveTestMutationVariables>(RemoveTestDocument, baseOptions);\n      }\nexport type RemoveTestMutationHookResult = ReturnType<typeof useRemoveTestMutation>;\nexport type RemoveTestMutationResult = ApolloReactCommon.MutationResult<RemoveTestMutation>;\nexport type RemoveTestMutationOptions = ApolloReactCommon.BaseMutationOptions<RemoveTestMutation, RemoveTestMutationVariables>;\nexport const GetTestsDocument = gql`\n    query getTests($data: TestFilterInput!) {\n  getTests(data: $data) {\n    tests {\n      ...Test\n    }\n    total\n    nextCursor\n  }\n}\n    ${TestFragmentDoc}`;\nexport type GetTestsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetTestsQuery, GetTestsQueryVariables>, 'query'> & ({ variables: GetTestsQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const GetTestsComponent = (props: GetTestsComponentProps) => (\n      <ApolloReactComponents.Query<GetTestsQuery, GetTestsQueryVariables> query={GetTestsDocument} {...props} />\n    );\n    \n\n/**\n * __useGetTestsQuery__\n *\n * To run a query within a React component, call `useGetTestsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTestsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTestsQuery({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useGetTestsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTestsQuery, GetTestsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetTestsQuery, GetTestsQueryVariables>(GetTestsDocument, baseOptions);\n      }\nexport function useGetTestsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTestsQuery, GetTestsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetTestsQuery, GetTestsQueryVariables>(GetTestsDocument, baseOptions);\n        }\nexport type GetTestsQueryHookResult = ReturnType<typeof useGetTestsQuery>;\nexport type GetTestsLazyQueryHookResult = ReturnType<typeof useGetTestsLazyQuery>;\nexport type GetTestsQueryResult = ApolloReactCommon.QueryResult<GetTestsQuery, GetTestsQueryVariables>;\nexport const CreateTestCategoryDocument = gql`\n    mutation createTestCategory($data: NewTestCategoryInput!) {\n  createTestCategory(data: $data) {\n    ...TestCategory\n  }\n}\n    ${TestCategoryFragmentDoc}`;\nexport type CreateTestCategoryMutationFn = ApolloReactCommon.MutationFunction<CreateTestCategoryMutation, CreateTestCategoryMutationVariables>;\nexport type CreateTestCategoryComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<CreateTestCategoryMutation, CreateTestCategoryMutationVariables>, 'mutation'>;\n\n    export const CreateTestCategoryComponent = (props: CreateTestCategoryComponentProps) => (\n      <ApolloReactComponents.Mutation<CreateTestCategoryMutation, CreateTestCategoryMutationVariables> mutation={CreateTestCategoryDocument} {...props} />\n    );\n    \n\n/**\n * __useCreateTestCategoryMutation__\n *\n * To run a mutation, you first call `useCreateTestCategoryMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTestCategoryMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTestCategoryMutation, { data, loading, error }] = useCreateTestCategoryMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useCreateTestCategoryMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateTestCategoryMutation, CreateTestCategoryMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateTestCategoryMutation, CreateTestCategoryMutationVariables>(CreateTestCategoryDocument, baseOptions);\n      }\nexport type CreateTestCategoryMutationHookResult = ReturnType<typeof useCreateTestCategoryMutation>;\nexport type CreateTestCategoryMutationResult = ApolloReactCommon.MutationResult<CreateTestCategoryMutation>;\nexport type CreateTestCategoryMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateTestCategoryMutation, CreateTestCategoryMutationVariables>;\nexport const UpdateTestCategoryDocument = gql`\n    mutation updateTestCategory($data: NewTestCategoryInput!) {\n  updateTestCategory(data: $data) {\n    ...TestCategory\n  }\n}\n    ${TestCategoryFragmentDoc}`;\nexport type UpdateTestCategoryMutationFn = ApolloReactCommon.MutationFunction<UpdateTestCategoryMutation, UpdateTestCategoryMutationVariables>;\nexport type UpdateTestCategoryComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<UpdateTestCategoryMutation, UpdateTestCategoryMutationVariables>, 'mutation'>;\n\n    export const UpdateTestCategoryComponent = (props: UpdateTestCategoryComponentProps) => (\n      <ApolloReactComponents.Mutation<UpdateTestCategoryMutation, UpdateTestCategoryMutationVariables> mutation={UpdateTestCategoryDocument} {...props} />\n    );\n    \n\n/**\n * __useUpdateTestCategoryMutation__\n *\n * To run a mutation, you first call `useUpdateTestCategoryMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateTestCategoryMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateTestCategoryMutation, { data, loading, error }] = useUpdateTestCategoryMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useUpdateTestCategoryMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateTestCategoryMutation, UpdateTestCategoryMutationVariables>) {\n        return ApolloReactHooks.useMutation<UpdateTestCategoryMutation, UpdateTestCategoryMutationVariables>(UpdateTestCategoryDocument, baseOptions);\n      }\nexport type UpdateTestCategoryMutationHookResult = ReturnType<typeof useUpdateTestCategoryMutation>;\nexport type UpdateTestCategoryMutationResult = ApolloReactCommon.MutationResult<UpdateTestCategoryMutation>;\nexport type UpdateTestCategoryMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateTestCategoryMutation, UpdateTestCategoryMutationVariables>;\nexport const GetTestCategoryDocument = gql`\n    query getTestCategory($id: String!) {\n  getTestCategory(id: $id) {\n    ...TestCategory\n  }\n}\n    ${TestCategoryFragmentDoc}`;\nexport type GetTestCategoryComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetTestCategoryQuery, GetTestCategoryQueryVariables>, 'query'> & ({ variables: GetTestCategoryQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const GetTestCategoryComponent = (props: GetTestCategoryComponentProps) => (\n      <ApolloReactComponents.Query<GetTestCategoryQuery, GetTestCategoryQueryVariables> query={GetTestCategoryDocument} {...props} />\n    );\n    \n\n/**\n * __useGetTestCategoryQuery__\n *\n * To run a query within a React component, call `useGetTestCategoryQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTestCategoryQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTestCategoryQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetTestCategoryQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTestCategoryQuery, GetTestCategoryQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetTestCategoryQuery, GetTestCategoryQueryVariables>(GetTestCategoryDocument, baseOptions);\n      }\nexport function useGetTestCategoryLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTestCategoryQuery, GetTestCategoryQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetTestCategoryQuery, GetTestCategoryQueryVariables>(GetTestCategoryDocument, baseOptions);\n        }\nexport type GetTestCategoryQueryHookResult = ReturnType<typeof useGetTestCategoryQuery>;\nexport type GetTestCategoryLazyQueryHookResult = ReturnType<typeof useGetTestCategoryLazyQuery>;\nexport type GetTestCategoryQueryResult = ApolloReactCommon.QueryResult<GetTestCategoryQuery, GetTestCategoryQueryVariables>;\nexport const RemoveTestCategoryDocument = gql`\n    mutation removeTestCategory($id: String!) {\n  removeTestCategory(id: $id)\n}\n    `;\nexport type RemoveTestCategoryMutationFn = ApolloReactCommon.MutationFunction<RemoveTestCategoryMutation, RemoveTestCategoryMutationVariables>;\nexport type RemoveTestCategoryComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<RemoveTestCategoryMutation, RemoveTestCategoryMutationVariables>, 'mutation'>;\n\n    export const RemoveTestCategoryComponent = (props: RemoveTestCategoryComponentProps) => (\n      <ApolloReactComponents.Mutation<RemoveTestCategoryMutation, RemoveTestCategoryMutationVariables> mutation={RemoveTestCategoryDocument} {...props} />\n    );\n    \n\n/**\n * __useRemoveTestCategoryMutation__\n *\n * To run a mutation, you first call `useRemoveTestCategoryMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveTestCategoryMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeTestCategoryMutation, { data, loading, error }] = useRemoveTestCategoryMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useRemoveTestCategoryMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RemoveTestCategoryMutation, RemoveTestCategoryMutationVariables>) {\n        return ApolloReactHooks.useMutation<RemoveTestCategoryMutation, RemoveTestCategoryMutationVariables>(RemoveTestCategoryDocument, baseOptions);\n      }\nexport type RemoveTestCategoryMutationHookResult = ReturnType<typeof useRemoveTestCategoryMutation>;\nexport type RemoveTestCategoryMutationResult = ApolloReactCommon.MutationResult<RemoveTestCategoryMutation>;\nexport type RemoveTestCategoryMutationOptions = ApolloReactCommon.BaseMutationOptions<RemoveTestCategoryMutation, RemoveTestCategoryMutationVariables>;\nexport const GetTestCategoriesDocument = gql`\n    query getTestCategories($data: TestCategoryFilterInput!) {\n  getTestCategories(data: $data) {\n    testCategories {\n      ...TestCategory\n    }\n    total\n    nextCursor\n  }\n}\n    ${TestCategoryFragmentDoc}`;\nexport type GetTestCategoriesComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetTestCategoriesQuery, GetTestCategoriesQueryVariables>, 'query'> & ({ variables: GetTestCategoriesQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const GetTestCategoriesComponent = (props: GetTestCategoriesComponentProps) => (\n      <ApolloReactComponents.Query<GetTestCategoriesQuery, GetTestCategoriesQueryVariables> query={GetTestCategoriesDocument} {...props} />\n    );\n    \n\n/**\n * __useGetTestCategoriesQuery__\n *\n * To run a query within a React component, call `useGetTestCategoriesQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTestCategoriesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTestCategoriesQuery({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useGetTestCategoriesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTestCategoriesQuery, GetTestCategoriesQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetTestCategoriesQuery, GetTestCategoriesQueryVariables>(GetTestCategoriesDocument, baseOptions);\n      }\nexport function useGetTestCategoriesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTestCategoriesQuery, GetTestCategoriesQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetTestCategoriesQuery, GetTestCategoriesQueryVariables>(GetTestCategoriesDocument, baseOptions);\n        }\nexport type GetTestCategoriesQueryHookResult = ReturnType<typeof useGetTestCategoriesQuery>;\nexport type GetTestCategoriesLazyQueryHookResult = ReturnType<typeof useGetTestCategoriesLazyQuery>;\nexport type GetTestCategoriesQueryResult = ApolloReactCommon.QueryResult<GetTestCategoriesQuery, GetTestCategoriesQueryVariables>;\nexport const GetTestCategoriesInfoDocument = gql`\n    query getTestCategoriesInfo($data: TestCategoryFilterInput!) {\n  getTestCategories(data: $data) {\n    testCategories {\n      ...TestCategoryInfo\n    }\n    total\n    nextCursor\n  }\n}\n    ${TestCategoryInfoFragmentDoc}`;\nexport type GetTestCategoriesInfoComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetTestCategoriesInfoQuery, GetTestCategoriesInfoQueryVariables>, 'query'> & ({ variables: GetTestCategoriesInfoQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const GetTestCategoriesInfoComponent = (props: GetTestCategoriesInfoComponentProps) => (\n      <ApolloReactComponents.Query<GetTestCategoriesInfoQuery, GetTestCategoriesInfoQueryVariables> query={GetTestCategoriesInfoDocument} {...props} />\n    );\n    \n\n/**\n * __useGetTestCategoriesInfoQuery__\n *\n * To run a query within a React component, call `useGetTestCategoriesInfoQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTestCategoriesInfoQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTestCategoriesInfoQuery({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useGetTestCategoriesInfoQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTestCategoriesInfoQuery, GetTestCategoriesInfoQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetTestCategoriesInfoQuery, GetTestCategoriesInfoQueryVariables>(GetTestCategoriesInfoDocument, baseOptions);\n      }\nexport function useGetTestCategoriesInfoLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTestCategoriesInfoQuery, GetTestCategoriesInfoQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetTestCategoriesInfoQuery, GetTestCategoriesInfoQueryVariables>(GetTestCategoriesInfoDocument, baseOptions);\n        }\nexport type GetTestCategoriesInfoQueryHookResult = ReturnType<typeof useGetTestCategoriesInfoQuery>;\nexport type GetTestCategoriesInfoLazyQueryHookResult = ReturnType<typeof useGetTestCategoriesInfoLazyQuery>;\nexport type GetTestCategoriesInfoQueryResult = ApolloReactCommon.QueryResult<GetTestCategoriesInfoQuery, GetTestCategoriesInfoQueryVariables>;\nexport const CreateTestGroupDocument = gql`\n    mutation createTestGroup($data: NewTestGroupInput!) {\n  createTestGroup(data: $data) {\n    ...TestGroup\n  }\n}\n    ${TestGroupFragmentDoc}`;\nexport type CreateTestGroupMutationFn = ApolloReactCommon.MutationFunction<CreateTestGroupMutation, CreateTestGroupMutationVariables>;\nexport type CreateTestGroupComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<CreateTestGroupMutation, CreateTestGroupMutationVariables>, 'mutation'>;\n\n    export const CreateTestGroupComponent = (props: CreateTestGroupComponentProps) => (\n      <ApolloReactComponents.Mutation<CreateTestGroupMutation, CreateTestGroupMutationVariables> mutation={CreateTestGroupDocument} {...props} />\n    );\n    \n\n/**\n * __useCreateTestGroupMutation__\n *\n * To run a mutation, you first call `useCreateTestGroupMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTestGroupMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTestGroupMutation, { data, loading, error }] = useCreateTestGroupMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useCreateTestGroupMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateTestGroupMutation, CreateTestGroupMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateTestGroupMutation, CreateTestGroupMutationVariables>(CreateTestGroupDocument, baseOptions);\n      }\nexport type CreateTestGroupMutationHookResult = ReturnType<typeof useCreateTestGroupMutation>;\nexport type CreateTestGroupMutationResult = ApolloReactCommon.MutationResult<CreateTestGroupMutation>;\nexport type CreateTestGroupMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateTestGroupMutation, CreateTestGroupMutationVariables>;\nexport const UpdateTestGroupDocument = gql`\n    mutation updateTestGroup($data: NewTestGroupInput!) {\n  updateTestGroup(data: $data) {\n    ...TestGroupInfo\n  }\n}\n    ${TestGroupInfoFragmentDoc}`;\nexport type UpdateTestGroupMutationFn = ApolloReactCommon.MutationFunction<UpdateTestGroupMutation, UpdateTestGroupMutationVariables>;\nexport type UpdateTestGroupComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<UpdateTestGroupMutation, UpdateTestGroupMutationVariables>, 'mutation'>;\n\n    export const UpdateTestGroupComponent = (props: UpdateTestGroupComponentProps) => (\n      <ApolloReactComponents.Mutation<UpdateTestGroupMutation, UpdateTestGroupMutationVariables> mutation={UpdateTestGroupDocument} {...props} />\n    );\n    \n\n/**\n * __useUpdateTestGroupMutation__\n *\n * To run a mutation, you first call `useUpdateTestGroupMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateTestGroupMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateTestGroupMutation, { data, loading, error }] = useUpdateTestGroupMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useUpdateTestGroupMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateTestGroupMutation, UpdateTestGroupMutationVariables>) {\n        return ApolloReactHooks.useMutation<UpdateTestGroupMutation, UpdateTestGroupMutationVariables>(UpdateTestGroupDocument, baseOptions);\n      }\nexport type UpdateTestGroupMutationHookResult = ReturnType<typeof useUpdateTestGroupMutation>;\nexport type UpdateTestGroupMutationResult = ApolloReactCommon.MutationResult<UpdateTestGroupMutation>;\nexport type UpdateTestGroupMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateTestGroupMutation, UpdateTestGroupMutationVariables>;\nexport const GetTestGroupDocument = gql`\n    query getTestGroup($id: String!) {\n  getTestGroup(id: $id) {\n    ...TestGroup\n  }\n}\n    ${TestGroupFragmentDoc}`;\nexport type GetTestGroupComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetTestGroupQuery, GetTestGroupQueryVariables>, 'query'> & ({ variables: GetTestGroupQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const GetTestGroupComponent = (props: GetTestGroupComponentProps) => (\n      <ApolloReactComponents.Query<GetTestGroupQuery, GetTestGroupQueryVariables> query={GetTestGroupDocument} {...props} />\n    );\n    \n\n/**\n * __useGetTestGroupQuery__\n *\n * To run a query within a React component, call `useGetTestGroupQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTestGroupQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTestGroupQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetTestGroupQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTestGroupQuery, GetTestGroupQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetTestGroupQuery, GetTestGroupQueryVariables>(GetTestGroupDocument, baseOptions);\n      }\nexport function useGetTestGroupLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTestGroupQuery, GetTestGroupQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetTestGroupQuery, GetTestGroupQueryVariables>(GetTestGroupDocument, baseOptions);\n        }\nexport type GetTestGroupQueryHookResult = ReturnType<typeof useGetTestGroupQuery>;\nexport type GetTestGroupLazyQueryHookResult = ReturnType<typeof useGetTestGroupLazyQuery>;\nexport type GetTestGroupQueryResult = ApolloReactCommon.QueryResult<GetTestGroupQuery, GetTestGroupQueryVariables>;\nexport const GetTestGroupsDocument = gql`\n    query getTestGroups($data: TestGroupFilterInput!) {\n  getTestGroups(data: $data) {\n    testGroups {\n      ...TestGroup\n    }\n    total\n    nextCursor\n  }\n}\n    ${TestGroupFragmentDoc}`;\nexport type GetTestGroupsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetTestGroupsQuery, GetTestGroupsQueryVariables>, 'query'> & ({ variables: GetTestGroupsQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const GetTestGroupsComponent = (props: GetTestGroupsComponentProps) => (\n      <ApolloReactComponents.Query<GetTestGroupsQuery, GetTestGroupsQueryVariables> query={GetTestGroupsDocument} {...props} />\n    );\n    \n\n/**\n * __useGetTestGroupsQuery__\n *\n * To run a query within a React component, call `useGetTestGroupsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTestGroupsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTestGroupsQuery({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useGetTestGroupsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTestGroupsQuery, GetTestGroupsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetTestGroupsQuery, GetTestGroupsQueryVariables>(GetTestGroupsDocument, baseOptions);\n      }\nexport function useGetTestGroupsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTestGroupsQuery, GetTestGroupsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetTestGroupsQuery, GetTestGroupsQueryVariables>(GetTestGroupsDocument, baseOptions);\n        }\nexport type GetTestGroupsQueryHookResult = ReturnType<typeof useGetTestGroupsQuery>;\nexport type GetTestGroupsLazyQueryHookResult = ReturnType<typeof useGetTestGroupsLazyQuery>;\nexport type GetTestGroupsQueryResult = ApolloReactCommon.QueryResult<GetTestGroupsQuery, GetTestGroupsQueryVariables>;\nexport const GetTestGroupsInfoDocument = gql`\n    query getTestGroupsInfo($data: TestGroupFilterInput!) {\n  getTestGroups(data: $data) {\n    testGroups {\n      ...TestGroupInfo\n    }\n    total\n    nextCursor\n  }\n}\n    ${TestGroupInfoFragmentDoc}`;\nexport type GetTestGroupsInfoComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetTestGroupsInfoQuery, GetTestGroupsInfoQueryVariables>, 'query'> & ({ variables: GetTestGroupsInfoQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const GetTestGroupsInfoComponent = (props: GetTestGroupsInfoComponentProps) => (\n      <ApolloReactComponents.Query<GetTestGroupsInfoQuery, GetTestGroupsInfoQueryVariables> query={GetTestGroupsInfoDocument} {...props} />\n    );\n    \n\n/**\n * __useGetTestGroupsInfoQuery__\n *\n * To run a query within a React component, call `useGetTestGroupsInfoQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTestGroupsInfoQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTestGroupsInfoQuery({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useGetTestGroupsInfoQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTestGroupsInfoQuery, GetTestGroupsInfoQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetTestGroupsInfoQuery, GetTestGroupsInfoQueryVariables>(GetTestGroupsInfoDocument, baseOptions);\n      }\nexport function useGetTestGroupsInfoLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTestGroupsInfoQuery, GetTestGroupsInfoQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetTestGroupsInfoQuery, GetTestGroupsInfoQueryVariables>(GetTestGroupsInfoDocument, baseOptions);\n        }\nexport type GetTestGroupsInfoQueryHookResult = ReturnType<typeof useGetTestGroupsInfoQuery>;\nexport type GetTestGroupsInfoLazyQueryHookResult = ReturnType<typeof useGetTestGroupsInfoLazyQuery>;\nexport type GetTestGroupsInfoQueryResult = ApolloReactCommon.QueryResult<GetTestGroupsInfoQuery, GetTestGroupsInfoQueryVariables>;\nexport const GetTestGroupInfoDocument = gql`\n    query getTestGroupInfo($id: String!) {\n  getTestGroup(id: $id) {\n    ...TestGroupInfo\n  }\n}\n    ${TestGroupInfoFragmentDoc}`;\nexport type GetTestGroupInfoComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetTestGroupInfoQuery, GetTestGroupInfoQueryVariables>, 'query'> & ({ variables: GetTestGroupInfoQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const GetTestGroupInfoComponent = (props: GetTestGroupInfoComponentProps) => (\n      <ApolloReactComponents.Query<GetTestGroupInfoQuery, GetTestGroupInfoQueryVariables> query={GetTestGroupInfoDocument} {...props} />\n    );\n    \n\n/**\n * __useGetTestGroupInfoQuery__\n *\n * To run a query within a React component, call `useGetTestGroupInfoQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTestGroupInfoQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTestGroupInfoQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetTestGroupInfoQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTestGroupInfoQuery, GetTestGroupInfoQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetTestGroupInfoQuery, GetTestGroupInfoQueryVariables>(GetTestGroupInfoDocument, baseOptions);\n      }\nexport function useGetTestGroupInfoLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTestGroupInfoQuery, GetTestGroupInfoQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetTestGroupInfoQuery, GetTestGroupInfoQueryVariables>(GetTestGroupInfoDocument, baseOptions);\n        }\nexport type GetTestGroupInfoQueryHookResult = ReturnType<typeof useGetTestGroupInfoQuery>;\nexport type GetTestGroupInfoLazyQueryHookResult = ReturnType<typeof useGetTestGroupInfoLazyQuery>;\nexport type GetTestGroupInfoQueryResult = ApolloReactCommon.QueryResult<GetTestGroupInfoQuery, GetTestGroupInfoQueryVariables>;\nexport const RemoveTestGroupDocument = gql`\n    mutation removeTestGroup($id: String!) {\n  removeTestGroup(id: $id)\n}\n    `;\nexport type RemoveTestGroupMutationFn = ApolloReactCommon.MutationFunction<RemoveTestGroupMutation, RemoveTestGroupMutationVariables>;\nexport type RemoveTestGroupComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<RemoveTestGroupMutation, RemoveTestGroupMutationVariables>, 'mutation'>;\n\n    export const RemoveTestGroupComponent = (props: RemoveTestGroupComponentProps) => (\n      <ApolloReactComponents.Mutation<RemoveTestGroupMutation, RemoveTestGroupMutationVariables> mutation={RemoveTestGroupDocument} {...props} />\n    );\n    \n\n/**\n * __useRemoveTestGroupMutation__\n *\n * To run a mutation, you first call `useRemoveTestGroupMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveTestGroupMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeTestGroupMutation, { data, loading, error }] = useRemoveTestGroupMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useRemoveTestGroupMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RemoveTestGroupMutation, RemoveTestGroupMutationVariables>) {\n        return ApolloReactHooks.useMutation<RemoveTestGroupMutation, RemoveTestGroupMutationVariables>(RemoveTestGroupDocument, baseOptions);\n      }\nexport type RemoveTestGroupMutationHookResult = ReturnType<typeof useRemoveTestGroupMutation>;\nexport type RemoveTestGroupMutationResult = ApolloReactCommon.MutationResult<RemoveTestGroupMutation>;\nexport type RemoveTestGroupMutationOptions = ApolloReactCommon.BaseMutationOptions<RemoveTestGroupMutation, RemoveTestGroupMutationVariables>;\nexport const UniqueLinkTestGroupDocument = gql`\n    mutation uniqueLinkTestGroup($link: String!, $id: String) {\n  uniqueLinkTestGroup(link: $link, id: $id)\n}\n    `;\nexport type UniqueLinkTestGroupMutationFn = ApolloReactCommon.MutationFunction<UniqueLinkTestGroupMutation, UniqueLinkTestGroupMutationVariables>;\nexport type UniqueLinkTestGroupComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<UniqueLinkTestGroupMutation, UniqueLinkTestGroupMutationVariables>, 'mutation'>;\n\n    export const UniqueLinkTestGroupComponent = (props: UniqueLinkTestGroupComponentProps) => (\n      <ApolloReactComponents.Mutation<UniqueLinkTestGroupMutation, UniqueLinkTestGroupMutationVariables> mutation={UniqueLinkTestGroupDocument} {...props} />\n    );\n    \n\n/**\n * __useUniqueLinkTestGroupMutation__\n *\n * To run a mutation, you first call `useUniqueLinkTestGroupMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUniqueLinkTestGroupMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [uniqueLinkTestGroupMutation, { data, loading, error }] = useUniqueLinkTestGroupMutation({\n *   variables: {\n *      link: // value for 'link'\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useUniqueLinkTestGroupMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UniqueLinkTestGroupMutation, UniqueLinkTestGroupMutationVariables>) {\n        return ApolloReactHooks.useMutation<UniqueLinkTestGroupMutation, UniqueLinkTestGroupMutationVariables>(UniqueLinkTestGroupDocument, baseOptions);\n      }\nexport type UniqueLinkTestGroupMutationHookResult = ReturnType<typeof useUniqueLinkTestGroupMutation>;\nexport type UniqueLinkTestGroupMutationResult = ApolloReactCommon.MutationResult<UniqueLinkTestGroupMutation>;\nexport type UniqueLinkTestGroupMutationOptions = ApolloReactCommon.BaseMutationOptions<UniqueLinkTestGroupMutation, UniqueLinkTestGroupMutationVariables>;\nexport const GetTestQuestionsDocument = gql`\n    query getTestQuestions($testId: String!) {\n  getTestQuestions(testId: $testId) {\n    ...TestQuestion\n  }\n}\n    ${TestQuestionFragmentDoc}`;\nexport type GetTestQuestionsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetTestQuestionsQuery, GetTestQuestionsQueryVariables>, 'query'> & ({ variables: GetTestQuestionsQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const GetTestQuestionsComponent = (props: GetTestQuestionsComponentProps) => (\n      <ApolloReactComponents.Query<GetTestQuestionsQuery, GetTestQuestionsQueryVariables> query={GetTestQuestionsDocument} {...props} />\n    );\n    \n\n/**\n * __useGetTestQuestionsQuery__\n *\n * To run a query within a React component, call `useGetTestQuestionsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetTestQuestionsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetTestQuestionsQuery({\n *   variables: {\n *      testId: // value for 'testId'\n *   },\n * });\n */\nexport function useGetTestQuestionsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTestQuestionsQuery, GetTestQuestionsQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetTestQuestionsQuery, GetTestQuestionsQueryVariables>(GetTestQuestionsDocument, baseOptions);\n      }\nexport function useGetTestQuestionsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTestQuestionsQuery, GetTestQuestionsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetTestQuestionsQuery, GetTestQuestionsQueryVariables>(GetTestQuestionsDocument, baseOptions);\n        }\nexport type GetTestQuestionsQueryHookResult = ReturnType<typeof useGetTestQuestionsQuery>;\nexport type GetTestQuestionsLazyQueryHookResult = ReturnType<typeof useGetTestQuestionsLazyQuery>;\nexport type GetTestQuestionsQueryResult = ApolloReactCommon.QueryResult<GetTestQuestionsQuery, GetTestQuestionsQueryVariables>;\nexport const CreateTestQuestionDocument = gql`\n    mutation createTestQuestion($data: TestQuestionInputId!) {\n  createTestQuestion(data: $data) {\n    ...TestQuestion\n  }\n}\n    ${TestQuestionFragmentDoc}`;\nexport type CreateTestQuestionMutationFn = ApolloReactCommon.MutationFunction<CreateTestQuestionMutation, CreateTestQuestionMutationVariables>;\nexport type CreateTestQuestionComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<CreateTestQuestionMutation, CreateTestQuestionMutationVariables>, 'mutation'>;\n\n    export const CreateTestQuestionComponent = (props: CreateTestQuestionComponentProps) => (\n      <ApolloReactComponents.Mutation<CreateTestQuestionMutation, CreateTestQuestionMutationVariables> mutation={CreateTestQuestionDocument} {...props} />\n    );\n    \n\n/**\n * __useCreateTestQuestionMutation__\n *\n * To run a mutation, you first call `useCreateTestQuestionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateTestQuestionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createTestQuestionMutation, { data, loading, error }] = useCreateTestQuestionMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useCreateTestQuestionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateTestQuestionMutation, CreateTestQuestionMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateTestQuestionMutation, CreateTestQuestionMutationVariables>(CreateTestQuestionDocument, baseOptions);\n      }\nexport type CreateTestQuestionMutationHookResult = ReturnType<typeof useCreateTestQuestionMutation>;\nexport type CreateTestQuestionMutationResult = ApolloReactCommon.MutationResult<CreateTestQuestionMutation>;\nexport type CreateTestQuestionMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateTestQuestionMutation, CreateTestQuestionMutationVariables>;\nexport const CreateListTestQuestionsDocument = gql`\n    mutation createListTestQuestions($data: TestQuestionInputIds!) {\n  createListTestQuestions(data: $data) {\n    ...TestQuestion\n  }\n}\n    ${TestQuestionFragmentDoc}`;\nexport type CreateListTestQuestionsMutationFn = ApolloReactCommon.MutationFunction<CreateListTestQuestionsMutation, CreateListTestQuestionsMutationVariables>;\nexport type CreateListTestQuestionsComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<CreateListTestQuestionsMutation, CreateListTestQuestionsMutationVariables>, 'mutation'>;\n\n    export const CreateListTestQuestionsComponent = (props: CreateListTestQuestionsComponentProps) => (\n      <ApolloReactComponents.Mutation<CreateListTestQuestionsMutation, CreateListTestQuestionsMutationVariables> mutation={CreateListTestQuestionsDocument} {...props} />\n    );\n    \n\n/**\n * __useCreateListTestQuestionsMutation__\n *\n * To run a mutation, you first call `useCreateListTestQuestionsMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateListTestQuestionsMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createListTestQuestionsMutation, { data, loading, error }] = useCreateListTestQuestionsMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useCreateListTestQuestionsMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateListTestQuestionsMutation, CreateListTestQuestionsMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateListTestQuestionsMutation, CreateListTestQuestionsMutationVariables>(CreateListTestQuestionsDocument, baseOptions);\n      }\nexport type CreateListTestQuestionsMutationHookResult = ReturnType<typeof useCreateListTestQuestionsMutation>;\nexport type CreateListTestQuestionsMutationResult = ApolloReactCommon.MutationResult<CreateListTestQuestionsMutation>;\nexport type CreateListTestQuestionsMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateListTestQuestionsMutation, CreateListTestQuestionsMutationVariables>;\nexport const RemoveTestQuestionDocument = gql`\n    mutation removeTestQuestion($id: String!) {\n  removeTestQuestion(id: $id)\n}\n    `;\nexport type RemoveTestQuestionMutationFn = ApolloReactCommon.MutationFunction<RemoveTestQuestionMutation, RemoveTestQuestionMutationVariables>;\nexport type RemoveTestQuestionComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<RemoveTestQuestionMutation, RemoveTestQuestionMutationVariables>, 'mutation'>;\n\n    export const RemoveTestQuestionComponent = (props: RemoveTestQuestionComponentProps) => (\n      <ApolloReactComponents.Mutation<RemoveTestQuestionMutation, RemoveTestQuestionMutationVariables> mutation={RemoveTestQuestionDocument} {...props} />\n    );\n    \n\n/**\n * __useRemoveTestQuestionMutation__\n *\n * To run a mutation, you first call `useRemoveTestQuestionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useRemoveTestQuestionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [removeTestQuestionMutation, { data, loading, error }] = useRemoveTestQuestionMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useRemoveTestQuestionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RemoveTestQuestionMutation, RemoveTestQuestionMutationVariables>) {\n        return ApolloReactHooks.useMutation<RemoveTestQuestionMutation, RemoveTestQuestionMutationVariables>(RemoveTestQuestionDocument, baseOptions);\n      }\nexport type RemoveTestQuestionMutationHookResult = ReturnType<typeof useRemoveTestQuestionMutation>;\nexport type RemoveTestQuestionMutationResult = ApolloReactCommon.MutationResult<RemoveTestQuestionMutation>;\nexport type RemoveTestQuestionMutationOptions = ApolloReactCommon.BaseMutationOptions<RemoveTestQuestionMutation, RemoveTestQuestionMutationVariables>;\nexport const UpdateTestQuestionDocument = gql`\n    mutation updateTestQuestion($data: TestQuestionInputId!) {\n  updateTestQuestion(data: $data) {\n    ...TestQuestion\n  }\n}\n    ${TestQuestionFragmentDoc}`;\nexport type UpdateTestQuestionMutationFn = ApolloReactCommon.MutationFunction<UpdateTestQuestionMutation, UpdateTestQuestionMutationVariables>;\nexport type UpdateTestQuestionComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<UpdateTestQuestionMutation, UpdateTestQuestionMutationVariables>, 'mutation'>;\n\n    export const UpdateTestQuestionComponent = (props: UpdateTestQuestionComponentProps) => (\n      <ApolloReactComponents.Mutation<UpdateTestQuestionMutation, UpdateTestQuestionMutationVariables> mutation={UpdateTestQuestionDocument} {...props} />\n    );\n    \n\n/**\n * __useUpdateTestQuestionMutation__\n *\n * To run a mutation, you first call `useUpdateTestQuestionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateTestQuestionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateTestQuestionMutation, { data, loading, error }] = useUpdateTestQuestionMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useUpdateTestQuestionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateTestQuestionMutation, UpdateTestQuestionMutationVariables>) {\n        return ApolloReactHooks.useMutation<UpdateTestQuestionMutation, UpdateTestQuestionMutationVariables>(UpdateTestQuestionDocument, baseOptions);\n      }\nexport type UpdateTestQuestionMutationHookResult = ReturnType<typeof useUpdateTestQuestionMutation>;\nexport type UpdateTestQuestionMutationResult = ApolloReactCommon.MutationResult<UpdateTestQuestionMutation>;\nexport type UpdateTestQuestionMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateTestQuestionMutation, UpdateTestQuestionMutationVariables>;\nexport const CreateUserDocument = gql`\n    mutation createUser($data: NewUserInput!) {\n  createUser(data: $data) {\n    ...User\n  }\n}\n    ${UserFragmentDoc}`;\nexport type CreateUserMutationFn = ApolloReactCommon.MutationFunction<CreateUserMutation, CreateUserMutationVariables>;\nexport type CreateUserComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<CreateUserMutation, CreateUserMutationVariables>, 'mutation'>;\n\n    export const CreateUserComponent = (props: CreateUserComponentProps) => (\n      <ApolloReactComponents.Mutation<CreateUserMutation, CreateUserMutationVariables> mutation={CreateUserDocument} {...props} />\n    );\n    \n\n/**\n * __useCreateUserMutation__\n *\n * To run a mutation, you first call `useCreateUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createUserMutation, { data, loading, error }] = useCreateUserMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useCreateUserMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateUserMutation, CreateUserMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateUserMutation, CreateUserMutationVariables>(CreateUserDocument, baseOptions);\n      }\nexport type CreateUserMutationHookResult = ReturnType<typeof useCreateUserMutation>;\nexport type CreateUserMutationResult = ApolloReactCommon.MutationResult<CreateUserMutation>;\nexport type CreateUserMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateUserMutation, CreateUserMutationVariables>;\nexport const GetUserDocument = gql`\n    query getUser($id: String!) {\n  user(id: $id) {\n    ...User\n  }\n}\n    ${UserFragmentDoc}`;\nexport type GetUserComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetUserQuery, GetUserQueryVariables>, 'query'> & ({ variables: GetUserQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const GetUserComponent = (props: GetUserComponentProps) => (\n      <ApolloReactComponents.Query<GetUserQuery, GetUserQueryVariables> query={GetUserDocument} {...props} />\n    );\n    \n\n/**\n * __useGetUserQuery__\n *\n * To run a query within a React component, call `useGetUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetUserQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUserQuery, GetUserQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetUserQuery, GetUserQueryVariables>(GetUserDocument, baseOptions);\n      }\nexport function useGetUserLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUserQuery, GetUserQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetUserQuery, GetUserQueryVariables>(GetUserDocument, baseOptions);\n        }\nexport type GetUserQueryHookResult = ReturnType<typeof useGetUserQuery>;\nexport type GetUserLazyQueryHookResult = ReturnType<typeof useGetUserLazyQuery>;\nexport type GetUserQueryResult = ApolloReactCommon.QueryResult<GetUserQuery, GetUserQueryVariables>;\nexport const GetUsersDocument = gql`\n    query getUsers {\n  users {\n    ...User\n  }\n}\n    ${UserFragmentDoc}`;\nexport type GetUsersComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<GetUsersQuery, GetUsersQueryVariables>, 'query'>;\n\n    export const GetUsersComponent = (props: GetUsersComponentProps) => (\n      <ApolloReactComponents.Query<GetUsersQuery, GetUsersQueryVariables> query={GetUsersDocument} {...props} />\n    );\n    \n\n/**\n * __useGetUsersQuery__\n *\n * To run a query within a React component, call `useGetUsersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUsersQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetUsersQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUsersQuery, GetUsersQueryVariables>) {\n        return ApolloReactHooks.useQuery<GetUsersQuery, GetUsersQueryVariables>(GetUsersDocument, baseOptions);\n      }\nexport function useGetUsersLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUsersQuery, GetUsersQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<GetUsersQuery, GetUsersQueryVariables>(GetUsersDocument, baseOptions);\n        }\nexport type GetUsersQueryHookResult = ReturnType<typeof useGetUsersQuery>;\nexport type GetUsersLazyQueryHookResult = ReturnType<typeof useGetUsersLazyQuery>;\nexport type GetUsersQueryResult = ApolloReactCommon.QueryResult<GetUsersQuery, GetUsersQueryVariables>;\nexport const LoginDocument = gql`\n    mutation login($email: String!, $password: String!) {\n  login(email: $email, password: $password) {\n    ...Me\n  }\n}\n    ${MeFragmentDoc}`;\nexport type LoginMutationFn = ApolloReactCommon.MutationFunction<LoginMutation, LoginMutationVariables>;\nexport type LoginComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<LoginMutation, LoginMutationVariables>, 'mutation'>;\n\n    export const LoginComponent = (props: LoginComponentProps) => (\n      <ApolloReactComponents.Mutation<LoginMutation, LoginMutationVariables> mutation={LoginDocument} {...props} />\n    );\n    \n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\n        return ApolloReactHooks.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);\n      }\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = ApolloReactCommon.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = ApolloReactCommon.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\nexport const MeDocument = gql`\n    query me {\n  me {\n    ...Me\n  }\n}\n    ${MeFragmentDoc}`;\nexport type MeComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<MeQuery, MeQueryVariables>, 'query'>;\n\n    export const MeComponent = (props: MeComponentProps) => (\n      <ApolloReactComponents.Query<MeQuery, MeQueryVariables> query={MeDocument} {...props} />\n    );\n    \n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<MeQuery, MeQueryVariables>) {\n        return ApolloReactHooks.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n      }\nexport function useMeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n        }\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = ApolloReactCommon.QueryResult<MeQuery, MeQueryVariables>;\nexport const UpdateMeDocument = gql`\n    mutation updateMe($data: UpdateMeInput!) {\n  updateMe(data: $data) {\n    ...Me\n  }\n}\n    ${MeFragmentDoc}`;\nexport type UpdateMeMutationFn = ApolloReactCommon.MutationFunction<UpdateMeMutation, UpdateMeMutationVariables>;\nexport type UpdateMeComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<UpdateMeMutation, UpdateMeMutationVariables>, 'mutation'>;\n\n    export const UpdateMeComponent = (props: UpdateMeComponentProps) => (\n      <ApolloReactComponents.Mutation<UpdateMeMutation, UpdateMeMutationVariables> mutation={UpdateMeDocument} {...props} />\n    );\n    \n\n/**\n * __useUpdateMeMutation__\n *\n * To run a mutation, you first call `useUpdateMeMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateMeMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateMeMutation, { data, loading, error }] = useUpdateMeMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useUpdateMeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateMeMutation, UpdateMeMutationVariables>) {\n        return ApolloReactHooks.useMutation<UpdateMeMutation, UpdateMeMutationVariables>(UpdateMeDocument, baseOptions);\n      }\nexport type UpdateMeMutationHookResult = ReturnType<typeof useUpdateMeMutation>;\nexport type UpdateMeMutationResult = ApolloReactCommon.MutationResult<UpdateMeMutation>;\nexport type UpdateMeMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateMeMutation, UpdateMeMutationVariables>;\nexport const LogoutDocument = gql`\n    mutation logout {\n  logout\n}\n    `;\nexport type LogoutMutationFn = ApolloReactCommon.MutationFunction<LogoutMutation, LogoutMutationVariables>;\nexport type LogoutComponentProps = Omit<ApolloReactComponents.MutationComponentOptions<LogoutMutation, LogoutMutationVariables>, 'mutation'>;\n\n    export const LogoutComponent = (props: LogoutComponentProps) => (\n      <ApolloReactComponents.Mutation<LogoutMutation, LogoutMutationVariables> mutation={LogoutDocument} {...props} />\n    );\n    \n\n/**\n * __useLogoutMutation__\n *\n * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [logoutMutation, { data, loading, error }] = useLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useLogoutMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {\n        return ApolloReactHooks.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, baseOptions);\n      }\nexport type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;\nexport type LogoutMutationResult = ApolloReactCommon.MutationResult<LogoutMutation>;\nexport type LogoutMutationOptions = ApolloReactCommon.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;\nexport type AssetFragment = { __typename?: 'Asset', url: string, name: string, type: string, path: string };\n\nexport type UploadMediaMutationVariables = Exact<{\n  data: AssetInput;\n}>;\n\n\nexport type UploadMediaMutation = { __typename?: 'Mutation', uploadMedia: (\n    { __typename?: 'Asset' }\n    & AssetFragment\n  ) };\n\nexport type BlogFragment = { __typename?: 'Blog', id: string, blogName: string, link: string, content: string, image?: Maybe<string>, displayOrder: number, createdAt: any, updatedAt: any, metaTags?: Maybe<{ __typename?: 'MetaTags', imageUrl?: Maybe<string>, description?: Maybe<string> }>, author: { __typename?: 'User', id: string, firstName: string, lastName?: Maybe<string>, email: string, role: string, address?: Maybe<string>, profileMediaUrl?: Maybe<string> }, testGroup: { __typename?: 'TestGroup', id: string, testGroupName: string, certificateType: EnglishCertificateType } };\n\nexport type CreateBlogMutationVariables = Exact<{\n  data: NewBlogInput;\n}>;\n\n\nexport type CreateBlogMutation = { __typename?: 'Mutation', createBlog: (\n    { __typename?: 'Blog' }\n    & BlogFragment\n  ) };\n\nexport type UpdateBlogMutationVariables = Exact<{\n  data: NewBlogInput;\n}>;\n\n\nexport type UpdateBlogMutation = { __typename?: 'Mutation', updateBlog: (\n    { __typename?: 'Blog' }\n    & BlogFragment\n  ) };\n\nexport type UpdateBlogOrderMutationVariables = Exact<{\n  data: UpdateBlogOrderInput;\n}>;\n\n\nexport type UpdateBlogOrderMutation = { __typename?: 'Mutation', updateBlogOrder: (\n    { __typename?: 'Blog' }\n    & BlogFragment\n  ) };\n\nexport type GetBlogQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type GetBlogQuery = { __typename?: 'Query', getBlog: (\n    { __typename?: 'Blog' }\n    & BlogFragment\n  ) };\n\nexport type GetBlogsQueryVariables = Exact<{\n  data: BlogsSearchInput;\n}>;\n\n\nexport type GetBlogsQuery = { __typename?: 'Query', getBlogs: { __typename?: 'Blogs', total: number, nextCursor?: Maybe<string>, blogs: Array<(\n      { __typename?: 'Blog' }\n      & BlogFragment\n    )> } };\n\nexport type DeleteBlogMutationVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type DeleteBlogMutation = { __typename?: 'Mutation', deleteBlog: string };\n\nexport type UniqueLinkBlogMutationVariables = Exact<{\n  link: Scalars['String'];\n  id?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type UniqueLinkBlogMutation = { __typename?: 'Mutation', uniqueLinkBlog: boolean };\n\nexport type PartFragment = { __typename?: 'Part', id: string, partName: string, description: string, skillType: SkillsType, certificateType: EnglishCertificateType, displayOrder: number };\n\nexport type CreatePartMutationVariables = Exact<{\n  data: NewPartInput;\n}>;\n\n\nexport type CreatePartMutation = { __typename?: 'Mutation', createPart: (\n    { __typename?: 'Part' }\n    & PartFragment\n  ) };\n\nexport type GetPartQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type GetPartQuery = { __typename?: 'Query', part: (\n    { __typename?: 'Part' }\n    & PartFragment\n  ) };\n\nexport type GetPartsQueryVariables = Exact<{\n  data: PartFilterInput;\n}>;\n\n\nexport type GetPartsQuery = { __typename?: 'Query', getParts: { __typename?: 'Parts', total: number, nextCursor?: Maybe<string>, parts: Array<(\n      { __typename?: 'Part' }\n      & PartFragment\n    )> } };\n\nexport type GetPartsFromIdsQueryVariables = Exact<{\n  data: PartIdsInput;\n}>;\n\n\nexport type GetPartsFromIdsQuery = { __typename?: 'Query', getPartsFromIds: Array<(\n    { __typename?: 'Part' }\n    & PartFragment\n  )> };\n\nexport type UpdatePartMutationVariables = Exact<{\n  data: NewPartInput;\n}>;\n\n\nexport type UpdatePartMutation = { __typename?: 'Mutation', updatePart: (\n    { __typename?: 'Part' }\n    & PartFragment\n  ) };\n\nexport type RemovePartMutationVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type RemovePartMutation = { __typename?: 'Mutation', removePart: string };\n\nexport type QuestionGroupFragment = { __typename?: 'Question', id: string, questionName: string, questionGroupName?: Maybe<string>, audioSec: number, audioSecVN: number, questionType: QuestionType, image?: Maybe<string>, content?: Maybe<string>, description?: Maybe<string>, skillType: SkillsType, certificateType: EnglishCertificateType, explaination?: Maybe<string>, result: string, questionGroupOrder: number, isGroup: boolean, answers: Array<{ __typename?: 'Answers', keyAnswer?: Maybe<string>, answerContent?: Maybe<string> }> };\n\nexport type QuestionFragment = { __typename?: 'Question', id: string, questionName: string, questionGroupName?: Maybe<string>, audioSec: number, audioSecVN: number, questionType: QuestionType, image?: Maybe<string>, content?: Maybe<string>, description?: Maybe<string>, skillType: SkillsType, certificateType: EnglishCertificateType, explaination?: Maybe<string>, result: string, questionGroupOrder: number, isGroup: boolean, answers: Array<{ __typename?: 'Answers', keyAnswer?: Maybe<string>, answerContent?: Maybe<string> }>, questionGroups: Array<(\n    { __typename?: 'Question' }\n    & QuestionGroupFragment\n  )> };\n\nexport type CreateQuestionMutationVariables = Exact<{\n  data: NewQuestionInput;\n}>;\n\n\nexport type CreateQuestionMutation = { __typename?: 'Mutation', createQuestion: (\n    { __typename?: 'Question' }\n    & QuestionFragment\n  ) };\n\nexport type UpdateQuestionMutationVariables = Exact<{\n  data: NewQuestionInput;\n}>;\n\n\nexport type UpdateQuestionMutation = { __typename?: 'Mutation', updateQuestion: (\n    { __typename?: 'Question' }\n    & QuestionFragment\n  ) };\n\nexport type GetQuestionQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type GetQuestionQuery = { __typename?: 'Query', question: (\n    { __typename?: 'Question' }\n    & QuestionFragment\n  ) };\n\nexport type GetQuestionsQueryVariables = Exact<{\n  data: QuestionFilterTypeInput;\n}>;\n\n\nexport type GetQuestionsQuery = { __typename?: 'Query', questions: { __typename?: 'Questions', total: number, nextCursor?: Maybe<string>, questions: Array<(\n      { __typename?: 'Question' }\n      & QuestionFragment\n    )> } };\n\nexport type RemoveQuestionMutationVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type RemoveQuestionMutation = { __typename?: 'Mutation', removeQuestion: string };\n\nexport type TestFragment = { __typename?: 'Test', id: string, testName: string, description: string, skillType: SkillsType, certificateType: EnglishCertificateType, explaination: string, audioUrl: string, isPublished: boolean, displayOrder: number, displayOrderCategory: number, partAndAudioSecs?: Maybe<Array<{ __typename?: 'PartAndAudioSeconds', partId?: Maybe<string>, autdioSecs?: Maybe<number>, displayOrder?: Maybe<number> }>>, testQuestions?: Maybe<Array<(\n    { __typename?: 'TestQuestion' }\n    & TestQuestionFragment\n  )>> };\n\nexport type CreateTestMutationVariables = Exact<{\n  data: NewTestInput;\n}>;\n\n\nexport type CreateTestMutation = { __typename?: 'Mutation', createTest: (\n    { __typename?: 'Test' }\n    & TestFragment\n  ) };\n\nexport type UpdateTestMutationVariables = Exact<{\n  data: NewTestInput;\n}>;\n\n\nexport type UpdateTestMutation = { __typename?: 'Mutation', updateTest: (\n    { __typename?: 'Test' }\n    & TestFragment\n  ) };\n\nexport type UpdateTestsMutationVariables = Exact<{\n  data: TestsUpdateInput;\n}>;\n\n\nexport type UpdateTestsMutation = { __typename?: 'Mutation', updateTests: Array<(\n    { __typename?: 'Test' }\n    & TestFragment\n  )> };\n\nexport type RemoveFromCatMutationVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type RemoveFromCatMutation = { __typename?: 'Mutation', removeFromCat: (\n    { __typename?: 'Test' }\n    & TestFragment\n  ) };\n\nexport type GetTestQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type GetTestQuery = { __typename?: 'Query', test: (\n    { __typename?: 'Test' }\n    & TestFragment\n  ) };\n\nexport type RemoveTestMutationVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type RemoveTestMutation = { __typename?: 'Mutation', removeTest: string };\n\nexport type GetTestsQueryVariables = Exact<{\n  data: TestFilterInput;\n}>;\n\n\nexport type GetTestsQuery = { __typename?: 'Query', getTests: { __typename?: 'Tests', total: number, nextCursor?: Maybe<string>, tests: Array<(\n      { __typename?: 'Test' }\n      & TestFragment\n    )> } };\n\nexport type TestCategoryFragment = { __typename?: 'TestCategory', id: string, testCategoryName: string, certificateType: EnglishCertificateType, isPublished: boolean, displayOrder: number, displayOrderGroup: number, tests?: Maybe<Array<(\n    { __typename?: 'Test' }\n    & TestFragment\n  )>>, testGroup?: Maybe<{ __typename?: 'TestGroup', id: string }> };\n\nexport type TestCategoryInfoFragment = { __typename?: 'TestCategory', id: string, testCategoryName: string, certificateType: EnglishCertificateType, isPublished: boolean, displayOrder: number, displayOrderGroup: number, createdAt: any, testGroup?: Maybe<{ __typename?: 'TestGroup', id: string }> };\n\nexport type CreateTestCategoryMutationVariables = Exact<{\n  data: NewTestCategoryInput;\n}>;\n\n\nexport type CreateTestCategoryMutation = { __typename?: 'Mutation', createTestCategory: (\n    { __typename?: 'TestCategory' }\n    & TestCategoryFragment\n  ) };\n\nexport type UpdateTestCategoryMutationVariables = Exact<{\n  data: NewTestCategoryInput;\n}>;\n\n\nexport type UpdateTestCategoryMutation = { __typename?: 'Mutation', updateTestCategory: (\n    { __typename?: 'TestCategory' }\n    & TestCategoryFragment\n  ) };\n\nexport type GetTestCategoryQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type GetTestCategoryQuery = { __typename?: 'Query', getTestCategory: (\n    { __typename?: 'TestCategory' }\n    & TestCategoryFragment\n  ) };\n\nexport type RemoveTestCategoryMutationVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type RemoveTestCategoryMutation = { __typename?: 'Mutation', removeTestCategory: string };\n\nexport type GetTestCategoriesQueryVariables = Exact<{\n  data: TestCategoryFilterInput;\n}>;\n\n\nexport type GetTestCategoriesQuery = { __typename?: 'Query', getTestCategories: { __typename?: 'TestCategories', total: number, nextCursor?: Maybe<string>, testCategories: Array<(\n      { __typename?: 'TestCategory' }\n      & TestCategoryFragment\n    )> } };\n\nexport type GetTestCategoriesInfoQueryVariables = Exact<{\n  data: TestCategoryFilterInput;\n}>;\n\n\nexport type GetTestCategoriesInfoQuery = { __typename?: 'Query', getTestCategories: { __typename?: 'TestCategories', total: number, nextCursor?: Maybe<string>, testCategories: Array<(\n      { __typename?: 'TestCategory' }\n      & TestCategoryInfoFragment\n    )> } };\n\nexport type TestGroupChildInfoFragment = { __typename?: 'TestGroup', id: string, testGroupName: string, certificateType: EnglishCertificateType, link: string, parentId?: Maybe<string>, isPublished: boolean, displayOrder: number, groupType: GroupType };\n\nexport type TestGroupInfoFragment = { __typename?: 'TestGroup', id: string, testGroupName: string, certificateType: EnglishCertificateType, link: string, groupType: GroupType, parentId?: Maybe<string>, isPublished: boolean, displayOrder: number, testGroupsChild: Array<(\n    { __typename?: 'TestGroup' }\n    & TestGroupChildInfoFragment\n  )> };\n\nexport type TestGroupFragment = { __typename?: 'TestGroup', id: string, testGroupName: string, certificateType: EnglishCertificateType, link: string, groupType: GroupType, parentId?: Maybe<string>, isPublished: boolean, displayOrder: number, testCategories?: Maybe<Array<(\n    { __typename?: 'TestCategory' }\n    & TestCategoryFragment\n  )>> };\n\nexport type CreateTestGroupMutationVariables = Exact<{\n  data: NewTestGroupInput;\n}>;\n\n\nexport type CreateTestGroupMutation = { __typename?: 'Mutation', createTestGroup: (\n    { __typename?: 'TestGroup' }\n    & TestGroupFragment\n  ) };\n\nexport type UpdateTestGroupMutationVariables = Exact<{\n  data: NewTestGroupInput;\n}>;\n\n\nexport type UpdateTestGroupMutation = { __typename?: 'Mutation', updateTestGroup: (\n    { __typename?: 'TestGroup' }\n    & TestGroupInfoFragment\n  ) };\n\nexport type GetTestGroupQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type GetTestGroupQuery = { __typename?: 'Query', getTestGroup: (\n    { __typename?: 'TestGroup' }\n    & TestGroupFragment\n  ) };\n\nexport type GetTestGroupsQueryVariables = Exact<{\n  data: TestGroupFilterInput;\n}>;\n\n\nexport type GetTestGroupsQuery = { __typename?: 'Query', getTestGroups: { __typename?: 'TestGroups', total: number, nextCursor?: Maybe<string>, testGroups: Array<(\n      { __typename?: 'TestGroup' }\n      & TestGroupFragment\n    )> } };\n\nexport type GetTestGroupsInfoQueryVariables = Exact<{\n  data: TestGroupFilterInput;\n}>;\n\n\nexport type GetTestGroupsInfoQuery = { __typename?: 'Query', getTestGroups: { __typename?: 'TestGroups', total: number, nextCursor?: Maybe<string>, testGroups: Array<(\n      { __typename?: 'TestGroup' }\n      & TestGroupInfoFragment\n    )> } };\n\nexport type GetTestGroupInfoQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type GetTestGroupInfoQuery = { __typename?: 'Query', getTestGroup: (\n    { __typename?: 'TestGroup' }\n    & TestGroupInfoFragment\n  ) };\n\nexport type RemoveTestGroupMutationVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type RemoveTestGroupMutation = { __typename?: 'Mutation', removeTestGroup: string };\n\nexport type UniqueLinkTestGroupMutationVariables = Exact<{\n  link: Scalars['String'];\n  id?: Maybe<Scalars['String']>;\n}>;\n\n\nexport type UniqueLinkTestGroupMutation = { __typename?: 'Mutation', uniqueLinkTestGroup: boolean };\n\nexport type TestQuestionFragment = { __typename?: 'TestQuestion', id: string, displayOrder: number, question: (\n    { __typename?: 'Question' }\n    & QuestionFragment\n  ), part: (\n    { __typename?: 'Part' }\n    & PartFragment\n  ) };\n\nexport type GetTestQuestionsQueryVariables = Exact<{\n  testId: Scalars['String'];\n}>;\n\n\nexport type GetTestQuestionsQuery = { __typename?: 'Query', getTestQuestions: Array<(\n    { __typename?: 'TestQuestion' }\n    & TestQuestionFragment\n  )> };\n\nexport type CreateTestQuestionMutationVariables = Exact<{\n  data: TestQuestionInputId;\n}>;\n\n\nexport type CreateTestQuestionMutation = { __typename?: 'Mutation', createTestQuestion: (\n    { __typename?: 'TestQuestion' }\n    & TestQuestionFragment\n  ) };\n\nexport type CreateListTestQuestionsMutationVariables = Exact<{\n  data: TestQuestionInputIds;\n}>;\n\n\nexport type CreateListTestQuestionsMutation = { __typename?: 'Mutation', createListTestQuestions: Array<(\n    { __typename?: 'TestQuestion' }\n    & TestQuestionFragment\n  )> };\n\nexport type RemoveTestQuestionMutationVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type RemoveTestQuestionMutation = { __typename?: 'Mutation', removeTestQuestion: string };\n\nexport type UpdateTestQuestionMutationVariables = Exact<{\n  data: TestQuestionInputId;\n}>;\n\n\nexport type UpdateTestQuestionMutation = { __typename?: 'Mutation', updateTestQuestion: (\n    { __typename?: 'TestQuestion' }\n    & TestQuestionFragment\n  ) };\n\nexport type UserFragment = { __typename?: 'User', id: string, firstName: string, lastName?: Maybe<string>, email: string, role: string, address?: Maybe<string>, profileMediaUrl?: Maybe<string> };\n\nexport type CreateUserMutationVariables = Exact<{\n  data: NewUserInput;\n}>;\n\n\nexport type CreateUserMutation = { __typename?: 'Mutation', createUser: (\n    { __typename?: 'User' }\n    & UserFragment\n  ) };\n\nexport type GetUserQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type GetUserQuery = { __typename?: 'Query', user: (\n    { __typename?: 'User' }\n    & UserFragment\n  ) };\n\nexport type GetUsersQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetUsersQuery = { __typename?: 'Query', users: Array<(\n    { __typename?: 'User' }\n    & UserFragment\n  )> };\n\nexport type MeFragment = { __typename?: 'Me', id: string, firstName: string, lastName?: Maybe<string>, email: string, role: string, address?: Maybe<string>, profileMediaUrl?: Maybe<string>, name: string, impersonatingUser?: Maybe<{ __typename?: 'ImpersonatingUser', userId: string, tokens: { __typename?: 'AccessTokens', accessToken: string, refreshToken: string } }> };\n\nexport type LoginMutationVariables = Exact<{\n  email: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type LoginMutation = { __typename?: 'Mutation', login: (\n    { __typename?: 'Me' }\n    & MeFragment\n  ) };\n\nexport type MeQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type MeQuery = { __typename?: 'Query', me?: Maybe<(\n    { __typename?: 'Me' }\n    & MeFragment\n  )> };\n\nexport type UpdateMeMutationVariables = Exact<{\n  data: UpdateMeInput;\n}>;\n\n\nexport type UpdateMeMutation = { __typename?: 'Mutation', updateMe: (\n    { __typename?: 'Me' }\n    & MeFragment\n  ) };\n\nexport type LogoutMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type LogoutMutation = { __typename?: 'Mutation', logout: boolean };\n","import React from \"react\";\n// reactstrap components\nimport {\n  Container,\n  Row,\n  Col,\n  CardBody,\n  CardFooter,\n  CardTitle,\n  Card,\n} from \"reactstrap\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\n\nimport Slider from \"react-slick\";\nimport { Truncate } from \"../../../components/Truncate\";\n// core components\n// interface TestimonialsProps {}\nconst settingsSlick = {\n  dots: true,\n  infinite: true,\n  speed: 500,\n  slidesToShow: 2,\n  slidesToScroll: 1\n};\nconst items = [\n  {\n    src: \"0\",\n    altText: \"\",\n    caption: \"\",\n    content: (\n      <Card className=\"card-testimonial card-plain\">\n        <div className=\"card-avatar\">\n          <a href=\"#pablo\" onClick={(e) => e.preventDefault()}>\n            <img\n              alt=\"...\"\n              className=\"img img-raised rounded\"\n              src={require(\"../../../assets/img/thay_pa.jpg\")}\n            ></img>\n          </a>\n        </div>\n        <CardBody>\n          <Truncate lines={4} className=\"card-description text-brand \">\n            \"Mình là Mr Phương Anh - GV Khoa QT Du lịch - NH - KS - Trường ĐH\n            Hutech, mình đã được học Toeic nhiều nơi, nhưng kết quả đều không\n            như mong đợi, nhưng từ khi biết đến trung tâm và đặc biệt được học\n            với Thầy Lực, ngoại ngữ của mình được cải thiện, thầy có những\n            phương pháp học Toeic rất hay, mới, sáng tạo. Mình cám ơn thầy đã\n            giúp đỡ mình. Chúc thầy mạnh khỏe, công tác tốt. Trân trọng.\"\n          </Truncate>\n          <CardTitle tag=\"h3\">Học trò Phương Anh</CardTitle>\n          <CardFooter>\n            <h6 className=\"category text-info\">\n              Trưởng Phòng Kinh Doanh Cty TNHH Du lịch Lữ hành Viet Phoneix\n            </h6>\n          </CardFooter>\n        </CardBody>\n      </Card>\n    ),\n  },\n  {\n    src: \"1\",\n    altText: \"\",\n    caption: \"\",\n    content: (\n      <Card className=\"card-testimonial card-plain\">\n        <div className=\"card-avatar\">\n          <a href=\"#pablo\" onClick={(e) => e.preventDefault()}>\n            <img\n              alt=\"...\"\n              className=\"img img-raised rounded\"\n              src={require(\"../../../assets/img/ban_np.jpg\")}\n            ></img>\n          </a>\n        </div>\n        <CardBody>\n          <Truncate lines={4} className=\"card-description text-brand\">\n            \"Ngày xưa e học tiếng anh khá dỡ kh có căn bản mà may mắn gặp dc a\n            Lực ! 3 tháng ôn thi cùng thầy Lực em từ mất căn bản thành 8d av\n            khối a1 , 6d khối D . Thầy dạy nhiệt tình chỉ em rất cẩn thận những\n            kiến thức cần thiết , quan trọng . Nhờ kiến thức của thầy trang bị\n            mà em chỉ cần ôn 1 tháng là lấy được toeic 620 ra trường . Cảm ơn.\"\n          </Truncate>\n          <CardTitle tag=\"h3\">Nguyên phạm</CardTitle>\n          <CardFooter>\n            <h6 className=\"category text-info\">Học trò</h6>\n          </CardFooter>\n        </CardBody>\n      </Card>\n    ),\n  },\n  {\n    src: \"2\",\n    altText: \"\",\n    caption: \"\",\n    content: (\n      <Card className=\"card-testimonial card-plain\">\n        <div className=\"card-avatar\">\n          <a href=\"#pablo\" onClick={(e) => e.preventDefault()}>\n            <img\n              alt=\"...\"\n              className=\"img img-raised rounded\"\n              src={require(\"../../../assets/img/eva.jpg\")}\n            ></img>\n          </a>\n        </div>\n        <CardBody>\n          <Truncate lines={4} className=\"card-description text-brand\">\n            \"Cảm giác lần đầu gặp thầy \"ôi thầy đẹp trai quá, dễ thương nữa\". Và\n            khi được học cùng thầy thì \"thầy vừa đẹp trai, dễ thương, lại còn\n            giỏi nữa\" vì những kiến thức mà thầy truyền đạt rất dể hiểu và dễ\n            học thông qua các trò chơi hấp dẫn, tạo nên 1 buổi học sôi động.\n            Không chỉ vậy, thầy cũng rất tận tâm trong việc soạn ra giáo án tóm\n            gọn nhất cho các trò dễ tiếp thu cũng như mỗi lần cần trợ giúp thì\n            thầy lại có mặt như 1 siêu anh hùng giải nguy kịp thời. Thật may mắn\n            khi được học với thầy và vẫn giữ được liên lạc với thầy. Em thật sự\n            cảm ơn thầy. Và chúc thầy luôn thành công.\"\n          </Truncate>\n          <CardTitle tag=\"h3\">Nguyễn Thị Minh Thư (TP. HCM)</CardTitle>\n          <CardFooter>\n            <h6 className=\"category text-info\">Học trò</h6>\n          </CardFooter>\n        </CardBody>\n      </Card>\n    ),\n  },\n];\nconst Testimonials: React.FC<{}> = ({}) => {\n  const [activeIndex, setActiveIndex] = React.useState(0);\n  const [animating, setAnimating] = React.useState(false);\n  const onExiting = () => {\n    setAnimating(true);\n  };\n  const onExited = () => {\n    setAnimating(false);\n  };\n  const next = () => {\n    if (animating) return;\n    const nextIndex = activeIndex === items.length - 1 ? 0 : activeIndex + 1;\n    setActiveIndex(nextIndex);\n  };\n  const previous = () => {\n    if (animating) return;\n    const nextIndex = activeIndex === 0 ? items.length - 1 : activeIndex - 1;\n    setActiveIndex(nextIndex);\n  };\n  return (\n    <div className=\"testimonials-2\">\n      <Container>\n        <h2 className=\"title text-center\">\n          Học viên nói về{\" \"}\n          <span className=\"text-primary d-block\">POWPER ENGLISH</span>\n        </h2>\n        \n        <Row>\n          <Col md=\"12\">\n          <Slider {...settingsSlick}>\n          {items.map((item, index) => {\n                return (\n                  <div key={index}>\n                    {item.content}\n                    </div>\n                );\n              })}\n\n          </Slider>\n            {/* <Carousel activeIndex={activeIndex} next={next} previous={previous}>\n              {items.map((item) => {\n                return (\n                  <CarouselItem\n                    onExiting={onExiting}\n                    onExited={onExited}\n                    key={item.src}\n                  >\n                    {item.content}\n                  </CarouselItem>\n                );\n              })}\n              <a\n                className=\"carousel-control-prev\"\n                data-slide=\"prev\"\n                href=\"#pablo\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  previous();\n                }}\n                role=\"button\"\n              >\n                <i className=\"now-ui-icons arrows-1_minimal-left\"></i>\n              </a>\n              <a\n                className=\"carousel-control-next\"\n                data-slide=\"next\"\n                href=\"#pablo\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  next();\n                }}\n                role=\"button\"\n              >\n                <i className=\"now-ui-icons arrows-1_minimal-right\"></i>\n              </a>\n            </Carousel> */}\n          </Col>\n        </Row>\n      </Container>\n      <div\n        className=\"team-3 section-image\"\n        style={{\n          backgroundImage:\n            \"url(\" + require(\"../../../assets/img/bg21.jpg\") + \")\",\n        }}\n      >\n        <Container>\n          <Row>\n            <Col className=\"ml-auto mr-auto text-center\" md=\"8\">\n              <h2 className=\"title\">Đội ngũ Học Thuật</h2>\n              <h4 className=\"description\"></h4>\n            </Col>\n          </Row>\n          <Row>\n            <Col className=\"ml-auto mr-auto\" lg=\"7\" xl=\"6\">\n              <Card className=\"card-profile\">\n                <Row>\n                  <Col md=\"5\">\n                    <div className=\"card-image\">\n                      <a href=\"#pablo\" onClick={(e) => e.preventDefault()}>\n                        <img\n                          alt=\"...\"\n                          className=\"img w-100\"\n                          src={require(\"../../../assets/img/teacher.png\")}\n                        ></img>\n                      </a>\n                    </div>\n                  </Col>\n                  <Col md=\"7\">\n                    <CardBody>\n                      <CardTitle tag=\"h4\">Mr. Dương Thái Lực</CardTitle>\n                      <h6 className=\"category text-primary text-left\">CEO</h6>\n                      <p className=\"card-description text-brand\">\n                        Happiness resides not in possessions, and not in gold,\n                        happiness dwells in the soul...\n                      </p>\n                    </CardBody>\n                  </Col>\n                </Row>\n              </Card>\n            </Col>\n            <Col className=\"ml-auto mr-auto\" lg=\"7\" xl=\"6\">\n              <Card className=\"card-profile\">\n                <Row>\n                  <Col md=\"5\">\n                    <div className=\"card-image\">\n                      <a href=\"#pablo\" onClick={(e) => e.preventDefault()}>\n                        <img\n                          alt=\"...\"\n                          className=\"img w-100\"\n                          src={require(\"../../../assets/img/linh_profile.png\")}\n                        ></img>\n                      </a>\n                    </div>\n                  </Col>\n                  <Col md=\"7\">\n                    <CardBody>\n                      <CardTitle tag=\"h4\">Ms. Lê Thảo Cẩm Linh</CardTitle>\n                      <h6 className=\"category text-primary text-left\">\n                        Teacher\n                      </h6>\n                      <p className=\"card-description text-brand\">\n                        Today you are you! That is truer than true! There is no\n                        one alive who is you-er than you!..\n                      </p>\n                    </CardBody>\n                  </Col>\n                </Row>\n              </Card>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    </div>\n  );\n};\n\nexport default Testimonials;\n","import React from \"react\";\n// reactstrap components\nimport {\n  Container, Row, Col, InputGroupAddon, InputGroupText, Button, Input, InputGroup,\n} from \"reactstrap\";\n\n// core components\ninterface  ContactUsProps{\n\n}\nconst ContactUs : React.FC<ContactUsProps> = ({\n\n\n}) => {\n    const [firstFocus, setFirstFocus] = React.useState(false);\n  const [lastFocus, setLastFocus] = React.useState(false);\n    return (\n        <>\n          <div className=\"section section-contact-us text-center\">\n          <Container>\n            <h2 className=\"title\">Want to help?</h2>\n            <p className=\"description\">Give me a message.</p>\n            <Row>\n              <Col className=\"text-center ml-auto mr-auto\" lg=\"6\" md=\"8\">\n                <InputGroup\n                  className={\n                    \"input-lg\" + (firstFocus ? \" input-group-focus\" : \"\")\n                  }\n                >\n                  <InputGroupAddon addonType=\"prepend\">\n                    <InputGroupText>\n                      <i className=\"now-ui-icons users_circle-08\"></i>\n                    </InputGroupText>\n                  </InputGroupAddon>\n                  <Input\n                    placeholder=\"First Name...\"\n                    type=\"text\"\n                    onFocus={() => setFirstFocus(true)}\n                    onBlur={() => setFirstFocus(false)}\n                  ></Input>\n                </InputGroup>\n                <InputGroup\n                  className={\n                    \"input-lg\" + (lastFocus ? \" input-group-focus\" : \"\")\n                  }\n                >\n                  <InputGroupAddon addonType=\"prepend\">\n                    <InputGroupText>\n                      <i className=\"now-ui-icons ui-1_email-85\"></i>\n                    </InputGroupText>\n                  </InputGroupAddon>\n                  <Input\n                    placeholder=\"Email...\"\n                    type=\"text\"\n                    onFocus={() => setLastFocus(true)}\n                    onBlur={() => setLastFocus(false)}\n                  ></Input>\n                </InputGroup>\n                <div className=\"textarea-container\">\n                  <Input\n                    cols=\"80\"\n                    name=\"name\"\n                    placeholder=\"Type a message...\"\n                    rows=\"4\"\n                    type=\"textarea\"\n                  ></Input>\n                </div>\n                <div className=\"send-button\">\n                  <Button\n                    block\n                    className=\"btn-round\"\n                    color=\"primary\"\n                    href=\"#pablo\"\n                    onClick={(e) => e.preventDefault()}\n                    size=\"lg\"\n                  >\n                    Send Message\n                  </Button>\n                </div>\n              </Col>\n            </Row>\n          </Container>\n        </div>\n        </>\n      );\n}\n\n\nexport default ContactUs;\n\n","import React from \"react\";\nimport TestingTrial from \"./TestingTrial\";\n// reactstrap components\nimport Features from \"./Features\";\nimport Testimonials from \"./Testimonials\";\nimport Pricing from \"./Pricing\";\nimport ContactUs from \"./ContactUs\";\n\n// core components\ninterface  HomePageProps{\n  data?: any;\n}\nconst HomePage : React.FC<HomePageProps> = ({\n\n\n}) => {\n    return (\n        <>\n          <div className=\"section section-basic\" id=\"home-page\">\n                <TestingTrial/>\n                <Testimonials/>\n                {/* <Features/>\n                <Pricing/> */}\n                <ContactUs/>\n          </div>\n        </>\n      );\n}\n\n\nexport default HomePage;\n","/*eslint-disable*/\nimport React from \"react\";\n\n// reactstrap components\nimport { Container, Row, Col, Button } from \"reactstrap\";\n\n// core components\n\nconst DefaultFooter = () => {\n  return (\n    <>\n      <footer className=\"footer footer-big bg-brand\">\n        <Container>\n          <div className=\"content\">\n            <Row>\n              <Col md=\"4\" className=\"text-white\">\n                <h5>About Us</h5>\n                <ul className=\"links-vertical\">\n                  <li>\n                    <a\n                      className=\"text-white\"\n                      href=\"#pablo\"\n                      onClick={(e) => e.preventDefault()}\n                    >\n                      Blog\n                    </a>\n                  </li>\n                  <li>\n                    <a\n                      className=\"text-white\"\n                      href=\"#pablo\"\n                      onClick={(e) => e.preventDefault()}\n                    >\n                      About Us\n                    </a>\n                  </li>\n                  <li>\n                    <a\n                      className=\"text-white\"\n                      href=\"#pablo\"\n                      onClick={(e) => e.preventDefault()}\n                    >\n                      Presentation\n                    </a>\n                  </li>\n                  <li>\n                    <a\n                      className=\"text-white\"\n                      href=\"#pablo\"\n                      onClick={(e) => e.preventDefault()}\n                    >\n                      Contact Us\n                    </a>\n                  </li>\n                </ul>\n              </Col>\n              <Col md=\"4\" className=\"text-white\">\n                <h5>Course</h5>\n                <ul className=\"links-vertical\">\n                  <li>\n                    <a\n                      className=\"text-white\"\n                      href=\"#pablo\"\n                      onClick={(e) => e.preventDefault()}\n                    >\n                      Toeic\n                    </a>\n                  </li>\n                  <li>\n                    <a\n                      className=\"text-white\"\n                      href=\"#pablo\"\n                      onClick={(e) => e.preventDefault()}\n                    >\n                      IELTS\n                    </a>\n                  </li>\n                  <li>\n                    <a\n                      className=\"text-white\"\n                      href=\"#pablo\"\n                      onClick={(e) => e.preventDefault()}\n                    >\n                      Email Marketing\n                    </a>\n                  </li>\n                </ul>\n              </Col>\n\n              <Col md=\"4\" className=\"text-white\">\n                <h5>Follow Us</h5>\n                <ul className=\"social-buttons\">\n                  <li>\n                    <Button\n                      className=\"btn-icon btn-neutral btn-round mr-1\"\n                      color=\"twitter\"\n                      href=\"#pablo\"\n                      onClick={(e) => e.preventDefault()}\n                    >\n                      <i className=\"fab fa-twitter\"></i>\n                    </Button>\n                  </li>\n                  <li>\n                    <Button\n                      className=\"btn-icon btn-neutral btn-round mr-1\"\n                      color=\"facebook\"\n                      href=\"#pablo\"\n                      onClick={(e) => e.preventDefault()}\n                    >\n                      <i className=\"fab fa-facebook-square\"></i>\n                    </Button>\n                  </li>\n                  <li>\n                    <Button\n                      className=\"btn-icon btn-neutral btn-round mr-1\"\n                      color=\"dribbble\"\n                      href=\"#pablo\"\n                      onClick={(e) => e.preventDefault()}\n                    >\n                      <i className=\"fab fa-dribbble\"></i>\n                    </Button>\n                  </li>\n                  <li>\n                    <Button\n                      className=\"btn-icon btn-neutral btn-round mr-1\"\n                      color=\"google\"\n                      href=\"#pablo\"\n                      onClick={(e) => e.preventDefault()}\n                    >\n                      <i className=\"fab fa-google-plus\"></i>\n                    </Button>\n                  </li>\n                  <li>\n                    <Button\n                      className=\"btn-icon btn-neutral btn-round\"\n                      color=\"instagram\"\n                      href=\"#pablo\"\n                      onClick={(e) => e.preventDefault()}\n                    >\n                      <i className=\"fab fa-instagram\"></i>\n                    </Button>\n                  </li>\n                </ul>\n                <h5>\n                  <small>Numbers Don't Lie</small>\n                </h5>\n                <h5>\n                  14.521 <small className=\"text-white\">Studens</small>\n                </h5>\n                <h5>\n                  1.423.183 <small className=\"text-white\">Transactions</small>\n                </h5>\n              </Col>\n            </Row>\n          </div>\n          <hr className=\"text-white\"></hr>\n          <div className=\"copyright text-white\">\n            Copyright © {new Date().getFullYear()} Omega All Rights Reserved.\n          </div>\n        </Container>\n      </footer>\n    </>\n  );\n};\n\nexport default DefaultFooter;\n","/*eslint-disable*/\nimport React from \"react\";\n\n// reactstrap components\ninterface DividerProps {\n  color?: string;\n}\nconst Divider: React.FC<DividerProps> = ({ color='grey' }) => {\n\n  return (\n    <div className={`w-full border border-` + {color}}/>\n  );\n};\n\nexport default Divider;\n","/*eslint-disable*/\nimport React from \"react\";\nimport { Link, useRouteMatch } from \"react-router-dom\";\nimport { Button, Modal, ModalBody } from \"reactstrap\";\nimport {\n  QuestionGroupFragment,\n  TestQuestionFragment,\n} from \"../../../schema/schema\";\n\n// reactstrap components;\ninterface QuestionPaletteProps {\n  testQuestions?: TestQuestionFragment[] | null;\n  answered: any;\n  isResult?: boolean;\n}\nconst QuestionPalette: React.FC<QuestionPaletteProps> = ({\n  testQuestions,\n  answered,\n  isResult,\n}) => {\n  const [questionsSorted, setQuestionSorted] = React.useState<\n    (QuestionGroupFragment & { displayOrder: number})[]\n  >([]);\n  let questions: (QuestionGroupFragment & { displayOrder: number})[] = [];\n  const questionsClone = testQuestions\n    ?.slice()\n    .sort((a, b) => a.displayOrder - b.displayOrder);\n  React.useEffect(() => {\n    questionsClone?.map((testQuestion) => {\n      let questionsGroup: (QuestionGroupFragment & { displayOrder: number})[] = [];\n      const questionFormatted = {...testQuestion.question, displayOrder: testQuestion.displayOrder} ;\n      questions.push(questionFormatted);\n      if (testQuestion.question.questionGroups.length > 0) {\n        questionsGroup = testQuestion.question.questionGroups.map((group, index) => { return {...group, displayOrder: testQuestion.displayOrder + 1 + index}});\n        questions = [...questions, ...questionsGroup];\n      }\n    });\n    setQuestionSorted(questions);\n  }, []);\n  const match = useRouteMatch();\n  const [modal1, setModal1] = React.useState(false);\n  const [modal2, setModal2] = React.useState(false);\n  answered.sort((a: any, b: any) => a.id - b.id);\n\n  return (\n    <section\n      className=\"rounded bg-brand text-white text-center p-4 d-flex flex-wrap flex-column sticky-top-130\"\n      style={{\n        maxHeight: \"600px\",\n      }}\n    >\n      <h4 className=\"mt-0\">Question Palette</h4>\n      <div\n        className=\"d-flex flex-wrap justify-content-start\"\n        style={{ maxHeight: 315, overflowY: \"auto\" }}\n      >\n        {questionsSorted.length > 0 &&\n          questionsSorted.map(\n            (question: QuestionGroupFragment & { displayOrder: number}, index: number) => {\n              let isChecked = false;\n              answered.map((e: any) => {\n                if (e.id === question.id) {\n                  isChecked = true;\n                }\n              });\n              return (\n                <span\n                  key={index}\n                  className={`+ ${\n                    isChecked ? \"bg-warning text-white\" : \"bg-white text-black\"\n                  } font-weight-bold`}\n                  style={{\n                    width: \"30px\",\n                    height: \"30px\",\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                    borderRadius: \"100%\",\n                    marginBottom: \"5px\",\n                    marginRight: \"6px\",\n                    cursor: \"pointer\",\n                  }}\n                  onClick={() => {\n                    const target = document.getElementById(\n                      \"question\" + question.id\n                    );\n                    target &&\n                      window.scrollTo({\n                        top: target.offsetTop + 100,\n                        behavior: \"smooth\",\n                      });\n                  }}\n                >\n                  {question.displayOrder}\n                </span>\n              );\n            }\n          )}\n      </div>\n      <div className=\"w-100 d-flex\">\n        <div className=\"d-flex align-items-center mr-2\">\n          <span\n            className={\"bg-warning text-white\"}\n            style={{\n              width: \"30px\",\n              height: \"30px\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              borderRadius: \"100%\",\n              marginBottom: \"5px\",\n              marginRight: \"6px\",\n            }}\n          ></span>\n          Answered\n        </div>\n        <div className=\"d-flex align-items-center\">\n          <span\n            className={\"bg-white text-black\"}\n            style={{\n              width: \"30px\",\n              height: \"30px\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              borderRadius: \"100%\",\n              marginBottom: \"5px\",\n              marginRight: \"6px\",\n            }}\n          ></span>\n          Unanswered\n        </div>\n      </div>\n      {!isResult && (\n        <div className=\"mt-auto mr-auto\">\n          <Button\n            className=\"bg-primary mx-auto font-weight-bold d-block\"\n            onClick={() => setModal1(true)}\n          >\n            Review\n          </Button>\n          <Modal isOpen={modal1} size=\"lg\" toggle={() => setModal1(false)}>\n            <div className=\"modal-header justify-content-center\">\n              <button\n                className=\"close\"\n                type=\"button\"\n                onClick={() => setModal1(false)}\n              >\n                <i className=\"now-ui-icons ui-1_simple-remove\"></i>\n              </button>\n              <h4 className=\"title title-up\">Review Answered</h4>\n            </div>\n            <ModalBody>\n              <h5>\n                Answered : {answered.length}/{questionsSorted.length}\n              </h5>\n              <div className=\"d-flex flex-wrap\">\n                {answered.map((ele: any, index: any) => {\n                  return (\n                    <span className=\"mr-5\" key={index}>\n                      <b className=\"font-weight-bold text-primary\">\n                        Question {ele.displayOrder}\n                      </b>{\" \"}\n                      : {ele.keyAnswer}\n                    </span>\n                  );\n                })}\n              </div>\n            </ModalBody>\n            <div className=\"modal-footer\">\n              <Button\n                color=\"danger\"\n                type=\"button\"\n                onClick={() => setModal1(false)}\n              >\n                Close\n              </Button>\n            </div>\n          </Modal>\n          <Button\n            onClick={() => setModal2(true)}\n            className=\"bg-primary mx-auto font-weight-bold d-block\"\n          >\n            Submit\n          </Button>\n\n          <Modal\n            modalClassName=\" modal-brand\"\n            toggle={() => setModal2(false)}\n            isOpen={modal2}\n            centered\n          >\n            <ModalBody>\n              <p>\n                Are you sure?{\" \"}\n                <i>\n                  (Answered : {answered.length}/{questionsSorted.length})\n                </i>\n              </p>\n            </ModalBody>\n            <div className=\"modal-footer\">\n              <Link\n                className=\"btn-transparent\"\n                to={`${match.url}/result`}\n                onClick={() => {\n                  setModal2(false);\n                }}\n              >\n                Submit\n              </Link>\n              <Button\n                className=\"btn-neutral\"\n                color=\"link\"\n                type=\"button\"\n                onClick={() => setModal2(false)}\n              >\n                Close\n              </Button>\n            </div>\n          </Modal>\n        </div>\n      )}\n    </section>\n  );\n};\n\nexport default QuestionPalette;\n","/*eslint-disable*/\nimport React from \"react\";\nimport { Label, Input, Button, Collapse, CardBody } from \"reactstrap\";\nimport config from \"../../config\";\nimport { QuestionFragment, QuestionGroupFragment } from \"../../schema/schema\";\n\ninterface QuestionsItemProps {\n  question: QuestionFragment | QuestionGroupFragment;\n  arrChecked: any[];\n  setArrChecked: (value: any) => void;\n  isSuccessful?: boolean;\n  index: number;\n}\nconst QuestionsItem: React.FC<QuestionsItemProps> = ({\n  question,\n  arrChecked,\n  setArrChecked,\n  isSuccessful,\n  index,\n}) => {\n  const [isOpenExplaination, setIsOpenExplaination] = React.useState(\"-1\");\n  const seekAudio = (secs: number) => {\n    const audio = document.getElementById(\n      \"audio1listening\"\n    ) as HTMLAudioElement;\n    audio!.currentTime = secs;\n    audio!.play();\n  };\n  const handleCheck = (questionId: string, ele: any) => {\n    const answeredObject = {\n      id: questionId,\n      keyAnswer: ele.keyAnswer,\n    };\n    if (arrChecked.length === 0) {\n      setArrChecked([...arrChecked, answeredObject]);\n    } else {\n      //check exist\n      let isExist = false;\n      isExist = arrChecked.find((e) => {\n        return e.id === questionId;\n      });\n      if (isExist) {\n        arrChecked.forEach((o, index) => {\n          if (o.id === questionId) {\n            arrChecked[index] = {\n              ...arrChecked[index],\n              keyAnswer: ele.keyAnswer,\n            };\n          }\n        });\n        setArrChecked(arrChecked);\n      } else {\n        setArrChecked([...arrChecked, answeredObject]);\n      }\n    }\n  };\n  const lengthOfGroups = (question as QuestionFragment).questionGroups?.length;\n  const [indexState] = React.useState(index + lengthOfGroups);\n  const indexes = index + indexState;\n\n  return (\n    <div className=\"mb-3\" id={\"question\" + question.id}>\n      <div className=\"d-flex justify-content-between align-items-center flex-wrap\">\n        {question && (\n          <h5 className=\"font-weight-bold\">{lengthOfGroups > 0 ? question.questionGroupName : question.questionName }</h5>\n        )}\n        <div>\n          {isSuccessful && (\n            <Button\n              className=\"rounded-fill bg-transparent border border-primary border-radius-fill text-primary\"\n              onClick={() => {\n                setIsOpenExplaination(question.id);\n                if (question.id === isOpenExplaination) {\n                  setIsOpenExplaination(\"-1\");\n                }\n              }}\n            >\n              Explain\n            </Button>\n          )}\n          {Boolean(question.audioSec) && (\n            <Button\n              className=\"rounded-fill bg-transparent border border-primary border-radius-fill text-primary\"\n              onClick={() => {\n                seekAudio(question.audioSec);\n              }}\n            >\n              Listen from here\n            </Button>\n          )}\n        </div>\n      </div>\n      <Collapse isOpen={isOpenExplaination === question.id}>\n        <CardBody>\n          <div\n            className=\"font-11 text-black font-weight-normal border border-info p-3 rounded\"\n            dangerouslySetInnerHTML={{\n              __html: question.explaination || \"\",\n            }}\n          />\n        </CardBody>\n      </Collapse>\n      {question.description && (\n        <p>\n          <i className=\"font-weight-normal\">{question.description}</i>\n        </p>\n      )}\n\n      <div\n        className=\"font-11 text-black font-weight-normal d-flex flex-wrap\"\n        dangerouslySetInnerHTML={{ __html: question.content || \"\" }}\n      />\n\n      {question.image && (\n        <div className=\"img\">\n          <img src={config.PATH_IMAGE + question.image} />\n        </div>\n      )}\n      {lengthOfGroups > 0 && <h5 className=\"font-weight-bold\">{question.questionName}</h5>}\n      <div className=\"pl-4\">\n        {question.answers.map((ele: any, index: any) => {\n          const isAnswer = ele.keyAnswer === question.result;\n          return (\n            ele.answerContent && (\n              <Label\n                className={`w-100 font-12 ${\n                  isAnswer && isSuccessful && \"text-warning font-weight-bold\"\n                }`}\n                key={index}\n              >\n                <Input\n                  type=\"radio\"\n                  onClick={() => {\n                    handleCheck(\n                      question.id,\n                      ele\n                    );\n                  }}\n                  name={`radio` + question.id}\n                />{\" \"}\n                {ele.keyAnswer} . {ele.answerContent}\n              </Label>\n            )\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default QuestionsItem;\n","/** @jsx jsx */\nimport { jsx, css } from \"@emotion/core\";\nimport React from \"react\";\nimport ReactAudioPlayer from \"react-audio-player\";\nimport { Button, Col, Container, Row } from \"reactstrap\";\nimport config from \"../../config\";\nimport {\n  QuestionGroupFragment,\n  SkillsType,\n  TestFragment,\n  TestQuestionFragment,\n} from \"../../schema/schema\";\nimport QuestionPalette from \"../../sections/Test/QuestionPalette\";\nimport QuestionsItem from \"./QuestionsItem\";\n\ninterface ListQuestionsProps {\n  testDetail?: TestFragment;\n  testQuestions?: TestQuestionFragment[];\n  arrChecked: any[];\n  setArrChecked: (value: any) => void;\n  isSuccessful?: boolean;\n}\n\nconst ListQuestions: React.FC<ListQuestionsProps> = ({\n  testDetail,\n  testQuestions,\n  arrChecked,\n  setArrChecked,\n  isSuccessful,\n}) => {\n  const [questionsSorted, setQuestionSorted] = React.useState<\n    (QuestionGroupFragment & { partId: string })[]\n  >([]);\n  let questions: (QuestionGroupFragment & { partId: string })[] = [];\n  const questionsClone = testQuestions\n    ?.slice()\n    .sort((a, b) => a.displayOrder - b.displayOrder);\n  React.useEffect(() => {\n    questionsClone?.map((testQuestion) => {\n      const testQuestionWithPart = {\n        ...testQuestion.question,\n        partId: testQuestion.part.id,\n      };\n      questions.push(testQuestionWithPart);\n      if (testQuestion.question.questionGroups.length > 0) {\n        const testQuestionsWithPart = testQuestion.question.questionGroups.map(\n          (group) => {\n            return { ...group, partId: testQuestion.part.id };\n          }\n        );\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        questions = [...questions, ...testQuestionsWithPart];\n      }\n    });\n    setQuestionSorted(questions);\n  }, []);\n  const parts = testDetail?.partAndAudioSecs;\n  const seekAudio = (secs: number) => {\n    const audio = document.getElementById(\n      \"audio1listening\"\n    ) as HTMLAudioElement;\n    audio!.currentTime = secs;\n    audio!.play();\n  };\n  return (\n    <Container\n      css={css`\n        audio::-webkit-media-controls-panel {\n          background: #c211a1;\n        }\n        audio::-webkit-media-controls-time-remaining-display,\n        audio::-webkit-media-controls-current-time-display,\n        audio::-webkit-media-controls-timeline {\n          color: white;\n        }\n      `}\n    >\n      <Row>\n        <Col md={isSuccessful ? \"12\" : \"8\"}>\n          {testDetail?.skillType === SkillsType.Listening &&\n            testDetail.audioUrl && (\n              <ReactAudioPlayer\n                src={config.PATH_IMAGE + testDetail.audioUrl}\n                className=\"mb-4 w-100 sticky-top-130\"\n                controls\n                controlsList={\"nodownload\"}\n                id=\"audio1listening\"\n              />\n            )}\n          {/* {typeSkill === \"listening\" && (\n                <div className=\"mb-4\">\n                  <i className=\"font-12 \">{questionsListening?.description}</i>\n                </div>\n              )} */}\n          {parts &&\n            parts.map((part, index_part) => {\n              const partDetail = testQuestions?.find(\n                (qp) => qp.part.id === part.partId\n              );\n              return (\n                <div key={index_part}>\n                  <div className=\"d-flex justify-content-between align-items-center flex-wrap\">\n                    <h3 className=\"mb-0\">{partDetail?.part.partName}</h3>\n                    {!!part.autdioSecs && part.autdioSecs > 0 && (\n                      <Button\n                        className=\"rounded-fill bg-transparent border border-primary border-radius-fill text-primary\"\n                        onClick={() => {\n                          seekAudio(part.autdioSecs!);\n                        }}\n                      >\n                        Listen from here\n                      </Button>\n                    )}\n                  </div>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: partDetail?.part.description || \"\",\n                    }}\n                  />\n                  {questionsSorted &&\n                    questionsSorted.map(\n                      (\n                        question: QuestionGroupFragment & { partId: string },\n                        index: number\n                      ) => {\n                        if (question.partId === part.partId) {\n                          return (\n                            <QuestionsItem\n                              question={question}\n                              index={index + 1}\n                              arrChecked={arrChecked}\n                              setArrChecked={setArrChecked}\n                              key={index}\n                              isSuccessful={isSuccessful}\n                            />\n                          );\n                        }\n                        return null;\n                      }\n                    )}\n                </div>\n              );\n            })}\n        </Col>\n        {!isSuccessful && (\n          <Col md=\"4\">\n            <QuestionPalette\n              testQuestions={testQuestions}\n              answered={arrChecked}\n            />\n          </Col>\n        )}\n      </Row>\n    </Container>\n  );\n};\n\nexport default ListQuestions;\n","import React from \"react\";\nimport { Col, Row } from \"reactstrap\";\nimport { TestFragment, TestQuestionFragment } from \"../../schema/schema\";\nimport QuestionPalette from \"../../sections/Test/QuestionPalette\";\nimport ListQuestions from \"../Questions/ListQuestions\";\n\ninterface ExplainationProps {\n    testQuestions: TestQuestionFragment[]; \n    testDetail: TestFragment;\n    arrChecked: any;\n    setArrChecked: any;\n}\n\nconst Explaination : React.FC<ExplainationProps> = ({testQuestions, testDetail, arrChecked, setArrChecked}) => {\n\n    return (\n        <div className=\"p-4\" style={{ maxWidth: 1920 }}>\n            <h2>Review & Explanations</h2>\n        <Row>\n                <Col md=\"8\">\n                    {/* //List of questions */}\n                    <ListQuestions testQuestions={testQuestions} testDetail={testDetail} arrChecked={arrChecked} setArrChecked={setArrChecked} isSuccessful/>\n                </Col>\n                <Col md=\"4\">\n                    <QuestionPalette testQuestions={testQuestions} answered={arrChecked} isResult/>\n                </Col>\n        </Row>\n        </div>\n    );\n}\n\nexport default Explaination;","/*eslint-disable*/\nimport React from \"react\";\n\n// reactstrap components\nimport { Col } from \"reactstrap\";\ninterface LeaderBoardProps {}\nconst LeaderBoard: React.FC<LeaderBoardProps> = ({}) => {\n  const data = [\n    {\n      name: \"Lâm Tâm Như\",\n      point: \"500\",\n    },\n    {\n      name: \"Triệu Vy\",\n      point: \"300\",\n    },\n    {\n      name: \"Quang Hải\",\n      point: \"600\",\n    },\n    {\n      name: \"Tuấn Hưng\",\n      point: \"759\",\n    },\n    {\n      name: \"Maria\",\n      point: \"548\",\n    },\n    {\n      name: \"Messi\",\n      point: \"657\",\n    },\n    {\n      name: \"Beckham\",\n      point: \"356\",\n    },\n    {\n      name: \"Neymar\",\n      point: \"467\",\n    },\n    {\n      name: \"Pogba\",\n      point: \"764\",\n    },\n    {\n      name: \"Kaka\",\n      point: \"768\",\n    },\n  ];\n  const colorBoard = ['text-danger', 'text-warning', 'text-info'] \n  return (\n      <section className=\"border border-success rounded px-3\">\n        <h4 className=\"text-center\">\n            <i className=\"text-warning now-ui-icons sport_trophy\"></i>Leader Board\n        </h4>\n        <ul className=\"d-flex flex-wrap ml-0 pl-0\">\n          {data.map((ele, index) => {\n            \n            return (\n              <li key={index} className={`w-100 list-none d-flex justify-content-between mb-2 font-weight-semi ` + colorBoard[index]} style={{ listStyle: 'none' }}>\n                  <div>\n                  <b>{index + 1}</b> .{ele.name}{\" \"}\n                  </div>\n                  <span className=\" text-black font-weight-semi ml-5\">\n                     {ele.point} points \n                  </span>{\" \"}\n              </li>\n            );\n          })}\n        </ul>\n      </section>\n  );\n};\n\nexport default LeaderBoard;\n","/*eslint-disable*/\nimport React from \"react\";\nimport { Row, Col, Container } from \"reactstrap\";\nimport {\n  QuestionGroupFragment,\n  TestQuestionFragment,\n} from \"../../schema/schema\";\nimport Explaination from \"../Explaination\";\nimport LeaderBoard from \"../LeaderBoard\";\n// reactstrap components\ninterface ScoreProps {\n  testDetail?: any;\n  testQuestions?: TestQuestionFragment[];\n  arrChecked: any;\n  setArrChecked: any;\n}\nconst Score: React.FC<ScoreProps> = ({\n  testDetail,\n  testQuestions,\n  arrChecked,\n  setArrChecked,\n}) => {\n  const [questionsSorted, setQuestionSorted] = React.useState<\n    QuestionGroupFragment[]\n  >([]);\n  let questions: QuestionGroupFragment[] = [];\n  const questionsClone = testQuestions\n    ?.slice()\n    .sort((a, b) => a.displayOrder - b.displayOrder);\n  React.useEffect(() => {\n    questionsClone?.map((testQuestion) => {\n      let questionsGroup: QuestionGroupFragment[] = [];\n      questions.push(testQuestion.question);\n      if (testQuestion.question.questionGroups.length > 0) {\n        questionsGroup = testQuestion.question.questionGroups;\n        questions = [...questions, ...questionsGroup];\n      }\n    });\n    setQuestionSorted(questions);\n  }, []);\n  let rightAnswer = 0;\n  questionsSorted &&\n    questionsSorted.forEach((question: QuestionGroupFragment) => {\n      arrChecked.forEach((e: any) => {\n        if (question.id === e.id && question.result === e.keyAnswer) {\n          rightAnswer = rightAnswer + 1;\n        }\n      });\n    });\n  const notPoint = (rightAnswer / questionsSorted.length!).toFixed(3);\n  const point = parseFloat(notPoint) * 10;\n  return (\n    <>\n      <Container>\n        <Row>\n          <Col md=\"8\">\n            <Row>\n              <Col md=\"3\">\n                <img src={require(\"../../assets/img/toiec.png\")} alt=\"\" />\n              </Col>\n              <Col md=\"9\">\n                <h2 className=\"font-weight-bold mb-1\">{testDetail?.title}</h2>\n                <div className=\"d-flex align-items-center\">\n                  <i className=\"now-ui-icons ui-1_calendar-60 mr-1\"></i>\n                  <p className=\"mb-0 font-9\">Published on: 14/08/2020</p>\n                </div>\n                <div className=\"d-flex align-items-center\">\n                  <i className=\"now-ui-icons tech_laptop mr-1\"></i>\n                  <p className=\"mb-0 font-9 font-weight-semi\">Views: 7,500</p>\n                </div>\n                <div className=\"d-flex align-items-center\">\n                  <i className=\"now-ui-icons media-1_button-play mr-1\"></i>\n                  <p className=\"mb-0 font-9 font-weight-semi\">\n                    Tests Taken: 400\n                  </p>\n                </div>\n              </Col>\n            </Row>\n            <div className=\"w-full media mt-3 flex-wrap\">\n              <div className=\"avatar\">\n                <img src={require(\"../../assets/img/ryan.jpg\")} alt=\"\" />\n              </div>\n              <div className=\"w-100 text-center mt-2\">\n                <h3 className=\"font-weight-bold\">Your score is :</h3>\n                <div className=\"d-flex justify-content-between\">\n                  <div\n                    className=\"rounded-circle border-2 border-success d-flex flex-column pt-4 align-items-center flex-wrap\"\n                    style={{\n                      width: \"120px\",\n                      height: \"120px\",\n                      border: \"5px solid\",\n                    }}\n                  >\n                    <span className=\"font-weight-bold\">Correct</span>\n                    <span className=\"font-weight-bold\">Answered</span>\n                    <span className=\"font-weight-bold text-success\">\n                      {rightAnswer}/{questionsSorted.length}\n                    </span>\n                  </div>\n\n                  <div\n                    className=\"rounded-circle border-2 border-primary d-flex justify-content-center align-items-center flex-wrap\"\n                    style={{\n                      width: \"140px\",\n                      height: \"140px\",\n                      border: \"5px solid\",\n                    }}\n                  >\n                    <span className=\"font-weight-bold text-primary font-20\">\n                      {point}\n                    </span>\n                  </div>\n\n                  <div\n                    className=\"rounded-circle border-2 border-success d-flex flex-column pt-4 align-items-center flex-wrap\"\n                    style={{\n                      width: \"120px\",\n                      height: \"120px\",\n                      border: \"5px solid\",\n                    }}\n                  >\n                    <span className=\"font-weight-bold\">Time Spent</span>\n                    <span className=\"font-weight-bold text-success\">40:00</span>\n                    <span className=\"font-weight-bold  font-8\">(40:00)</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"mt-5\">\n              <h3>\n                <i className=\"now-ui-icons objects_key-25\"></i>Answer Keys:\n              </h3>\n              <div className=\"d-flex align-items-center\">\n                <p className=\"d-flex align-items-center\">\n                  Your answer{\" \"}\n                  <span className=\"ml-1 bg-info width-1rem height-1rem d-inline-block\"></span>\n                </p>\n                <p className=\"d-flex align-items-center ml-4\">\n                  Answer Key{\" \"}\n                  <span className=\"ml-1 bg-warning width-1rem height-1rem d-inline-block\"></span>\n                </p>\n                <p className=\"d-flex align-items-center ml-4\">\n                  No Answer <span className=\"ml-1 font-italic\">N/A</span>\n                </p>\n              </div>\n              <div className=\"d-flex flex-wrap\">\n                {questionsSorted &&\n                  questionsSorted.map(\n                    (question: QuestionGroupFragment, index: any) => {\n                      const isCorrect = arrChecked.find((e: any) => {\n                        return (\n                          e.id === question.id &&\n                          e.keyAnswer === question.result\n                        );\n                      });\n                      return (\n                        <div\n                          key={index}\n                          className=\"d-flex align-items-center\"\n                          style={{ width: \"50%\" }}\n                        >\n                          <p\n                            className=\"mr-3 d-flex justify-content-center align-items-center text-white font-weight-bold bg-brand\"\n                            style={{ width: \"30px\", height: \"30px\" }}\n                          >\n                            {index + 1}\n                          </p>\n                          <p className=\"text-black font-italic text-info\">\n                            {isCorrect?.keyAnswer\n                              ? isCorrect?.keyAnswer\n                              : \"N/A\"}{\" \"}\n                          </p>{\" \"}\n                          <p className=\"text-center width-2rem\">-</p>\n                          <p className=\"text-black font-weight-bold mr-3 text-warning\">\n                            {\" \"}\n                            {question.result}\n                          </p>\n                          <p className=\"pt-1\">\n                            {isCorrect ? (\n                              <i className=\"now-ui-icons ui-1_check text-success\"></i>\n                            ) : (\n                              <i className=\"now-ui-icons ui-1_simple-remove text-danger\"></i>\n                            )}\n                          </p>\n                        </div>\n                      );\n                    }\n                  )}\n              </div>\n            </div>\n          </Col>\n          <Col md=\"4\">\n            <LeaderBoard />\n          </Col>\n        </Row>\n      </Container>\n      <Explaination\n        testDetail={testDetail!}\n        testQuestions={testQuestions!}\n        setArrChecked={setArrChecked}\n        arrChecked={arrChecked}\n      />\n    </>\n  );\n};\n\nexport default Score;\n","/*eslint-disable*/\nimport React from \"react\";\n\n// reactstrap components\nimport Score from \"../../../components/Score\";\nimport { Switch, Route, useRouteMatch, useParams } from \"react-router-dom\";\nimport {\n  TestFragment,\n} from \"../../../schema/schema\";\nimport ListQuestions from \"../../../components/Questions/ListQuestions\";\ninterface TestTakenProps {\n  setIsTaken?: (value: boolean) => void;\n  testsData?: TestFragment[] | null;\n}\nconst TestTaken: React.FC<TestTakenProps> = ({ testsData }) => {\n  const [arrChecked, setArrChecked] = React.useState<any[]>([]);\n  \n  const { testId } = useParams();\n  const testDetail = testsData?.find((test) => test.id === testId);\n\n  const match = useRouteMatch();\n \n  const testQuestionsSorted = testDetail?.testQuestions?.slice();\n  const testQuestions = testQuestionsSorted?.sort((a, b) => a.displayOrder - b.displayOrder);\n\n  return (\n    <>\n        <Switch>\n          <Route path={`${match.path}/result`}>\n            <Score\n              testQuestions={testQuestions}\n              arrChecked={arrChecked}\n              testDetail={testDetail}\n              setArrChecked={setArrChecked}\n            />\n          </Route>\n          <Route path={`${match.path}`}>\n            <ListQuestions testQuestions={testQuestions} testDetail={testDetail} arrChecked={arrChecked} setArrChecked={setArrChecked}/>\n          </Route>\n        </Switch>\n    </>\n  );\n};\n\nexport default TestTaken;\n","/** @jsx jsx */\nimport { jsx, css } from \"@emotion/core\";\nimport React from \"react\";\nimport Lottie from \"react-lottie\";\nimport animationHello from \"../../assets/lotties/35787-robot-says-hello.json\";\nimport animationLoading from \"../../assets/lotties/lf30_editor_e6dctybt.json\";\ninterface LoadingProps {\n  className?: string;\n  isWelcome?: boolean;\n  absolute?: boolean;\n}\n\nconst Loading: React.FC<LoadingProps> = ({ className, isWelcome, absolute }) => {\n  const [isDisplay, setIsDisplay] = React.useState(\"flex\");\n  const defaultOptionsHello = {\n    loop: 1,\n    autoplay: true,\n    animationData: animationHello,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n\n  const defaultOptionsLoading = {\n    loop: true,\n    autoplay: true,\n    animationData: animationLoading,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n\n  const onAnimCompleted = () => {\n    setIsDisplay(\"none\");\n  };\n  return (\n    <div\n      className={className}\n      css={css`\n        position: ${absolute ? 'absolute' : 'fixed'};\n        width: 100%;\n        top:0;\n        left:0;\n        height: ${absolute ? '100%' : '100vh'};\n        background: white;\n        z-index: 9999999999;\n        justify-content: center;\n        align-items: center;\n        flex-direction: column;\n        display: ${isDisplay};\n      `}\n    >\n      {/* <Lottie\n        options={defaultOptionsHello}\n        height={150}\n        width={200}\n        eventListeners={[\n          {\n            eventName: \"complete\",\n            callback: () => !isQuery && onAnimCompleted(),\n          },\n        ]}\n      /> */}\n      <Lottie\n        options={isWelcome ? defaultOptionsHello : defaultOptionsLoading}\n        height={isWelcome ? 150 : 200}\n        width={200}\n        style={{\n            marginTop: -90,\n            paddingLeft: 20,\n        }}\n      />\n    </div>\n  );\n};\n\nexport default Loading;\n","/*eslint-disable*/\nimport React from \"react\";\n\n// reactstrap components\nimport { Container, Row, Col, Table } from \"reactstrap\";\nimport {\n  useParams,\n  Link,\n  Switch,\n  Route,\n  useRouteMatch,\n  useHistory,\n} from \"react-router-dom\";\nimport TestTaken from \"../TestTake\";\nimport LeaderBoard from \"../../../components/LeaderBoard\";\nimport { SkillsType, useGetTestCategoryQuery } from \"../../../schema/schema\";\nimport Loading from \"../../../components/Loading\";\ninterface TestSkillsProps {\n  setIsTaken?: (value: boolean) => void;\n}\nconst TestSkills: React.FC<TestSkillsProps> = ({ setIsTaken }) => {\n  const { testCategoryId } = useParams() as { testCategoryId?: string };\n  const history = useHistory();\n  if (!testCategoryId) {\n    history.push(\"/home\");\n    return <></>\n  }\n  const match = useRouteMatch();\n  const {data, loading} = useGetTestCategoryQuery({\n    variables: {\n      id: testCategoryId,\n    }\n  })\n  \n  if(loading){\n    return <Loading />\n  }\n\n  const testCategory = data?.getTestCategory;\n  let tests = data?.getTestCategory.tests;\n  // reorder test skill LISTENING READING  \n  let shouldReorder = false;\n  shouldReorder = tests ? tests.some((e, i) => e.skillType === SkillsType.Listening && i !== 0) : false;\n  if(shouldReorder){\n    tests = tests?.reverse();\n  }\n  \n  return (\n    <Switch>\n      <Route path={`${match.path}/exam/:testId`}>\n        <TestTaken testsData={tests} setIsTaken={setIsTaken} />\n      </Route>\n      <Route path={`${match.path}`}>\n        <Container>\n          <section>\n            <Row>\n              <Col md=\"8\">\n                <Row>\n                  <Col md=\"3\">\n                    <img\n                      src={require(\"../../../assets/img/toiec.png\")}\n                      alt=\"\"\n                    />\n                  </Col>\n                  <Col md=\"9\">\n                    <h2 className=\"font-weight-bold mb-1\">\n                      {testCategory?.testCategoryName}\n                    </h2>\n                    <div className=\"d-flex align-items-center\">\n                      <i className=\"now-ui-icons ui-1_calendar-60 mr-1\"></i>\n                      <p className=\"mb-0 font-9\">Published on: 14/08/2020</p>\n                    </div>\n                    <div className=\"d-flex align-items-center\">\n                      <i className=\"now-ui-icons tech_laptop mr-1\"></i>\n                      <p className=\"mb-0 font-9 font-weight-semi\">\n                        Views: 7,500\n                      </p>\n                    </div>\n                    <div className=\"d-flex align-items-center\">\n                      <i className=\"now-ui-icons media-1_button-play mr-1\"></i>\n                      <p className=\"mb-0 font-9 font-weight-semi\">\n                        Tests Taken: 400\n                      </p>\n                    </div>\n                  </Col>\n                </Row>\n                <div className=\"mt-5\">\n                  <Table borderless className=\"text-center\">\n                    <thead>\n                      <tr>\n                        <th className=\"font-weight-bold\">Skills</th>\n                        <th className=\"font-weight-bold\">\n                          <i className=\"now-ui-icons tech_headphones mr-2\"></i>\n                          Listening\n                        </th>\n                        <th className=\"font-weight-bold\">\n                          <i className=\"now-ui-icons education_glasses mr-2\"></i>\n                          Reading\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr>\n                        <th scope=\"row\">{testCategory?.testCategoryName}</th>\n                        {tests &&\n                          tests.map((test) => {\n                            return (\n                              <td className=\"text-center py-0\">\n                                <Link\n                                  to={`${match.url}/exam/${test.id}`}\n                                  className={`d-block rounded border border-none ${\n                                    test.skillType === SkillsType.Reading\n                                      ? \"bg-success\"\n                                      : \"bg-info\"\n                                  } text-white p-2 width-8rem mx-auto`}\n                                  style={{\n                                    textDecoration: \"none\",\n                                  }}\n                                >\n                                  Take Test\n                                </Link>\n                              </td>\n                            );\n                          })}\n                      </tr>\n                    </tbody>\n                  </Table>\n                </div>\n              </Col>\n\n              <Col md=\"4\">\n                <LeaderBoard />\n              </Col>\n            </Row>\n          </section>\n        </Container>\n      </Route>\n    </Switch>\n  );\n};\n\nexport default TestSkills;\n","/** @jsx jsx */\nimport { jsx, css } from \"@emotion/core\";\nimport moment from \"moment\";\nimport React from \"react\";\nimport { Link, useRouteMatch } from \"react-router-dom\";\nimport { Button, Card, CardBody, CardSubtitle, CardTitle } from \"reactstrap\";\n// import { NavbarContext } from \"../../../components/Navbars/NavbarContext\";\n// import { useMe } from \"../../../hooks/useMe\";\nimport { TestCategoryInfoFragment } from \"../../../schema/schema\";\n\ninterface CardCategoryProps {\n  testCategory?: TestCategoryInfoFragment;\n}\nconst CardCategory: React.FC<CardCategoryProps> = ({ testCategory }) => {\n  // const me = useMe();\n  const match = useRouteMatch();\n\n  console.log(match);\n  // const { setModalLogin } = React.useContext(NavbarContext);\n  const dateFormatted = moment(testCategory?.createdAt).format('DD/MM/YYYY');\n  return (\n    <Link\n      className=\"font-12 font-weight-bold\"\n      // onClick={(e) => {\n      //   if (me.id === \"-1\") {\n      //     e.preventDefault();\n      //     setModalLogin(true);\n      //   }\n      // }}\n      to={`${match.url}/category/` + testCategory?.id}\n      css={css`\n        width: 30%;\n        margin-right: 1.5%;\n        &:nth-child(3) {\n          margin-right: 0;\n        }\n      `}\n    >\n      <Card className=\"border-brand rounded\">\n        <CardBody>\n          <CardTitle className=\"mt-0\">\n            {testCategory?.testCategoryName}\n          </CardTitle>\n          <CardSubtitle className=\"font-weight-normal mb-2 text-muted\">\n            {testCategory?.certificateType}\n          </CardSubtitle>\n          <div\n            css={css`\n              div {\n                margin-bottom: 0.4rem;\n              }\n              p {\n                color: black;\n              }\n            `}\n          >\n            <div className=\"d-flex align-items-center\">\n              <i className=\"now-ui-icons ui-1_calendar-60 mr-1\"></i>\n              <p className=\"mb-0 font-6\">Published on: {dateFormatted}</p>\n            </div>\n            <div className=\"d-flex align-items-center\">\n              <i className=\"now-ui-icons tech_laptop mr-1\"></i>\n              <p className=\"mb-0 font-6 font-weight-semi\">Views: 7,500</p>\n            </div>\n            <div className=\"d-flex align-items-center\">\n              <i className=\"now-ui-icons media-1_button-play mr-1\"></i>\n              <p className=\"mb-0 font-6 font-weight-semi\">Tests Taken: 400</p>\n            </div>\n          </div>\n          <Button\n            color={\"primary\"}\n            className=\"mx-auto btn btn-primary font-7 px-2 py-2\"\n          >\n            Take Test\n          </Button>\n        </CardBody>\n      </Card>\n    </Link>\n  );\n};\n\nexport default CardCategory;\n","/*eslint-disable*/\nimport React from \"react\";\n\n// reactstrap components\nimport { Row, Col, Container } from \"reactstrap\";\nimport { Link, useRouteMatch, Switch, Route } from \"react-router-dom\";\nimport Divider from \"../../../components/Divider\";\nimport TestSkills from \"../TestSkills\";\nimport LeaderBoard from \"../../../components/LeaderBoard\";\nimport { TestCategoryInfoFragment } from \"../../../schema/schema\";\nimport CardCategory from \"./CardCategory\";\ninterface TestCategoryProps {\n  testCategories?: TestCategoryInfoFragment[]; \n}\nconst TestCategory: React.FC<TestCategoryProps> = ({testCategories}) => {\n  \n  const match = useRouteMatch();\n  return (\n      <Switch>\n        <Route path={`${match.url}/category/:testCategoryId`}>\n          <TestSkills />\n        </Route>\n        <Route path={`${match.url}`}>\n          <Container>\n          <Row>\n            <Col md=\"8\">\n              <section className=\"py-5\">\n                <h3>\n                  <i className=\"now-ui-icons education_atom font-5 text-primary font-weight-bold\"></i>\n                  T1-TEST 1-40\n                </h3>\n                <div className=\"d-flex flex-wrap align-items-start\">\n                  {testCategories && testCategories.map((testCategory, index) => {\n                    return (\n                      <CardCategory key={index} testCategory={testCategory} />\n                    );\n                  })}\n                </div>\n              </section>\n              <Divider></Divider>\n              \n            </Col>\n            <Col md=\"4\">\n              <LeaderBoard />\n            </Col>\n          </Row>\n          </Container>\n        </Route>\n        \n      </Switch>\n  );\n};\n\nexport default TestCategory;\n","/*eslint-disable*/\nimport React from \"react\";\nimport { Breadcrumb, BreadcrumbItem } from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\n\ninterface BreadcrumbProps {}\nconst BreadcrumbMain: React.FC<BreadcrumbProps> = ({}) => {\n  const data = [\n      {\n          title: 'Home',\n          link: '/home',\n      },\n      {\n        title: 'Toeic',\n        link: '/toeic',\n    }\n  ]\n  return (\n      <Breadcrumb>\n          {data && data.map((ele, index) => {\n             return <BreadcrumbItem key={index}><Link to={ele.link}>{ele.title}</Link></BreadcrumbItem>\n          })}\n      </Breadcrumb>\n  );\n};\n\nexport default BreadcrumbMain;\n","export const capitalizeFirstLetter = (string: string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\nexport const HTMLToString = (html?: string): string => {\n  if(!html) return '';\n  let text = html;\n  text = text.replace(/\\n/gi, \"\");\n  text = text.replace(/<style([\\s\\S]*?)<\\/style>/gi, \"\");\n  text = text.replace(/<script([\\s\\S]*?)<\\/script>/gi, \"\");\n  text = text.replace(/<a.*?href=\"(.*?)[\\?\\\"].*?>(.*?)<\\/a.*?>/gi, \" $2 $1 \");\n  text = text.replace(/<\\/div>/gi, \"\\n\\n\");\n  text = text.replace(/<\\/li>/gi, \"\\n\");\n  text = text.replace(/<li.*?>/gi, \"  *  \");\n  text = text.replace(/<\\/ul>/gi, \"\\n\\n\");\n  text = text.replace(/<\\/p>/gi, \"\\n\\n\");\n  text = text.replace(/<br\\s*[\\/]?>/gi, \"\\n\");\n  text = text.replace(/<[^>]+>/gi, \"\");\n  text = text.replace(/^\\s*/gim, \"\");\n  text = text.replace(/ ,/gi, \",\");\n  text = text.replace(/ +/gi, \" \");\n  text = text.replace(/\\n+/gi, \"\\n\\n\");\n  return text;\n};","\nimport React from \"react\";\nimport TestCategory from \"./TestCategory\";\nimport BreadcrumbMain from \"../../components/Breadcrumb\";\nimport { useParams } from \"react-router-dom\";\nimport { EnglishCertificateType, useGetTestCategoriesInfoQuery } from \"../../schema/schema\";\nimport { capitalizeFirstLetter } from \"../../utils/string\";\nimport Loading from \"../../components/Loading\";\n\nconst Test: React.FC = () => {\n  const { type } = useParams() as any\n  const {data, loading} = useGetTestCategoriesInfoQuery({\n    variables: {\n      data: {\n        certificateType: capitalizeFirstLetter(type) as EnglishCertificateType,\n      }\n    }\n  })\n  if(loading){\n    return <Loading />\n  }\n  const testCategories = data?.getTestCategories.testCategories;\n  return (\n    <div className=\"noHeader pb-5\">\n      <BreadcrumbMain />\n      <TestCategory testCategories={testCategories}/>\n    </div>\n  );\n};\n\nexport default Test;\n","/*eslint-disable*/\nimport React from \"react\";\n\n// reactstrap components\nimport { Container, Button, Row, Col } from \"reactstrap\";\nimport Lottie from \"react-lottie\";\nimport animationTest from \"../../assets/lotties/lf30_editor_jlkqa2ui.json\";\n// core components\n\nconst IndexHeader = () => {\n  const pageHeader = React.useRef<HTMLDivElement>(null);\n  const defaultOptionsTest = {\n    loop: true,\n    autoplay: true,\n    animationData: animationTest,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  React.useEffect(() => {\n    if (window.innerWidth > 991) {\n      const updateScroll = () => {\n        let windowScrollTop = window.pageYOffset / 3;\n        if (pageHeader.current) {\n          pageHeader.current.style.transform =\n            \"translate3d(0,\" + windowScrollTop + \"px,0)\";\n        }\n      };\n      window.addEventListener(\"scroll\", updateScroll);\n      return function cleanup() {\n        window.removeEventListener(\"scroll\", updateScroll);\n      };\n    }\n  });\n\n  return (\n    <>\n      <div className=\"page-header clear-filter\" filter-color=\"purple\">\n        <div\n          className=\"page-header-image\"\n          style={{\n            backgroundImage:\n              \"url(\" + require(\"../../assets/img/header-m.jpg\") + \")\",\n          }}\n          ref={pageHeader}\n        ></div>\n        <Container>\n          <Row\n            style={{\n              marginTop: \"8rem\",\n            }}\n          >\n            <Col className=\"mr-auto text-left\" md=\"7\">\n              <h1 className=\"title\">POWPER ENGLISH</h1>\n              <h4 className=\"description\">\n                Tổ chức giáo dục POWPER ENGLISH cung cấp một trong những thư\n                viện tài nguyên luyện thi tiếng Anh trực tuyến lớn nhất Việt\n                Nam. Thư viện có hơn 3 vạn câu hỏi và đề mục chuyên đề luyện thi\n                tiếng Anh TOEIC, IELTS và Luyện thi đại học quốc gia.\n              </h4>\n              <br></br>\n              <div className=\"buttons d-flex\">\n                <Button\n                  className=\"mr-3 font-12 border border-white bg-transparent text-nowrap\"\n                  color=\"\"\n                  href=\"#pablo\"\n                  onClick={(e) => e.preventDefault()}\n                  size=\"lg\"\n                >\n                  Về chúng tôi\n                </Button>\n                <Button\n                  className=\"mr-3 font-12 d-flex\"\n                  color=\"primary\"\n                  href=\"#pablo\"\n                  onClick={(e) => e.preventDefault()}\n                  size=\"lg\"\n                  style={{\n                    width: \"fit-content\",\n                    maxHeight: 52,\n                    whiteSpace: 'nowrap',\n                    paddingRight: 25\n                  }}\n                >\n                  <span>Thi thử Online</span>\n                  <Lottie options={defaultOptionsTest} width={50} height={50} style={{\n                    margin: 'initial',\n                    marginTop: -15\n                  }}/>\n                </Button>\n              </div>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    </>\n  );\n};\n\nexport default IndexHeader;\n","import React from \"react\";\nimport { MeFragment, UserRole } from \"../schema/schema\";\nexport const notMe: MeFragment = {\n  firstName: \"\",\n  id: \"-1\",\n  lastName: \"\",\n  name: \"\",\n  email: \"\",\n  role: UserRole.Member,\n};\nexport const MeContext = React.createContext<MeFragment>({} as MeFragment);\n\nexport const useMe = (): MeFragment => {\n  return React.useContext(MeContext);\n};\n","import React from \"react\";\n\ninterface ErrorProps {\n  message?: string;\n  className?: string;\n  style?: any;\n}\n\nconst ErrorMessage: React.FC<ErrorProps> = ({ message, className, style }) => {\n  if (!message) {\n    return <></>;\n  }\n\n  return (\n    <div className={`text-danger d-flex mt-2 ${className}`} style={style}>\n      <span\n        style={{\n          width: \"15px\",\n          height: \"15px\",\n          borderRadius: \"100%\",\n          border: \"1px solid red\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        !\n      </span>{\" \"}\n      <span className=\"font-8 ml-2\">{message}</span>\n    </div>\n  );\n};\n\nexport default ErrorMessage;\n","import React from 'react';\n\nclass BrowserStorage {\n  // Desktop Notifications\n  public tokens = {\n      accessToken: '',\n      refreshToken: '',\n  };\n\n  private applyProperties(props: BrowserStorage): void {\n    Object.keys(props).map((key) => ((this as any)[key] = (props as any)[key]));\n  }\n\n  constructor() {\n    this.load();\n  }\n\n  public load(): BrowserStorage {\n    this.applyProperties({\n      ...JSON.parse(localStorage.getItem('powper') ?? '{}'),\n    });\n    return this;\n  }\n\n  public save(): void {\n    localStorage.setItem('powper', JSON.stringify(this));\n  }\n}\n\nconst useBrowserStorage = (): BrowserStorage => {\n  const [browserStorage] = React.useState(new BrowserStorage());\n  return browserStorage;\n};\n\nexport default useBrowserStorage;\n","const stripTypenames = <T>(obj: T, propToDelete = '__typename'): T => {\n  for (const property in obj) {\n    if (typeof obj[property] === 'object' && !(obj[property] instanceof File)) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      delete (obj as any).property;\n      const newData = stripTypenames(obj[property], propToDelete);\n      obj[property] = newData;\n    } else {\n      if (property === propToDelete) {\n        delete obj[property];\n      }\n    }\n  }\n  return obj;\n};\n\nexport default stripTypenames;\n","import { useFormik } from \"formik\";\nimport React from \"react\";\nimport {\n  Button,\n  Card,\n  CardBody,\n  Form,\n  FormGroup,\n  Input,\n  InputGroup,\n  InputGroupAddon,\n  InputGroupText,\n  Modal,\n  ModalFooter,\n} from \"reactstrap\";\nimport { useLoginMutation, useMeLazyQuery } from \"../../schema/schema\";\nimport * as yup from \"yup\";\nimport ErrorMessage from \"../../views/admin/components/Error\";\nimport useBrowserStorage from \"../../components/BrowserStorage\";\nimport stripTypenames from \"../../utils/stripTypenames\";\ninterface ModalLoginProps {\n  isOpen: boolean;\n  setIsOpen: (val: boolean) => void;\n}\nexport const ModalLogin: React.FC<ModalLoginProps> = ({\n  isOpen,\n  setIsOpen,\n}) => {\n  const browserStorage = useBrowserStorage();\n  const [nameFocus, setNameFocus] = React.useState(false);\n  const [passwordFocus, setPasswordFocus] = React.useState(false);\n  const [meQuery, meQueryResult] = useMeLazyQuery({ fetchPolicy: \"network-only\" });\n  const [loginMutation] = useLoginMutation();\n  const [shouldValidate, setShouldValidate] = React.useState(false);\n  React.useEffect(() => {\n    meQueryResult.data?.me && meQueryResult.refetch && meQueryResult.refetch();\n  }, [meQueryResult, meQueryResult.loading])\n  const formik = useFormik({\n    enableReinitialize: true,\n    validateOnChange: shouldValidate,\n    validateOnBlur: shouldValidate,\n    initialValues: {\n      email: \"\",\n      password: \"\",\n    },\n    validationSchema: yup.object().shape({\n      email: yup.string().trim().email().required(),\n      password: yup.string().min(8).required(),\n    }),\n    onSubmit: async (values) => {\n      try {\n        const result = await loginMutation({\n          variables: {\n            email: values.email,\n            password: values.password,\n          },\n        });\n        if (result.data?.login) {\n          setIsOpen(false);\n          browserStorage.tokens = stripTypenames(result.data?.login.impersonatingUser?.tokens!);\n          browserStorage.save();\n          meQuery();\n        }\n      } catch (e) {\n        if (\n          e.graphQLErrors &&\n          e.graphQLErrors[0]?.extensions?.code === \"INVITED_USER\" &&\n          e.graphQLErrors[0].extensions.exception?.invitedUser\n        ) {\n          return;\n        }\n      }\n    },\n  });\n  return (\n    <Modal\n      className=\"modal-login\"\n      modalClassName=\"modal-brand\"\n      isOpen={isOpen}\n      toggle={() => setIsOpen(false)}\n    >\n      <Card className=\"card-login card-plain\" data-background-color=\"\">\n        <div className=\"modal-header justify-content-center\">\n          <button\n            aria-hidden={true}\n            className=\"close\"\n            onClick={() => setIsOpen(false)}\n            type=\"button\"\n          >\n            <i className=\"now-ui-icons ui-1_simple-remove\"></i>\n          </button>\n          <div className=\"header header-info text-center\">\n            <div className=\"logo-container\">\n              <img alt=\"...\" src={require(\"../../assets/img/logo.png\")}></img>\n            </div>\n          </div>\n        </div>\n        <div className=\"modal-body\">\n          <Form action=\"\" className=\"form\" method=\"\">\n            <CardBody>\n              <FormGroup>\n                <InputGroup\n                  className={\n                    nameFocus\n                      ? \"no-border input-lg input-group-focus\"\n                      : \"no-border input-lg\"\n                  }\n                >\n                  <InputGroupAddon addonType=\"prepend\">\n                    <InputGroupText>\n                      <i className=\"now-ui-icons users_circle-08\"></i>\n                    </InputGroupText>\n                  </InputGroupAddon>\n                  <Input\n                    placeholder=\"Email\"\n                    type=\"text\"\n                    name=\"email\"\n                    onChange={formik.handleChange}\n                    onBlur={(e) => {\n                      setNameFocus(false);\n                      formik.handleBlur(e);\n                    }}\n                    onFocus={() => setNameFocus(true)}\n                  ></Input>\n                  \n                </InputGroup>\n                <ErrorMessage message={formik.errors.email} />\n              </FormGroup>\n              <FormGroup>\n                <InputGroup\n                  className={\n                    passwordFocus\n                      ? \"no-border input-lg input-group-focus\"\n                      : \"no-border input-lg\"\n                  }\n                >\n                  <InputGroupAddon addonType=\"prepend\">\n                    <InputGroupText>\n                      <i className=\"now-ui-icons ui-1_lock-circle-open\"></i>\n                    </InputGroupText>\n                  </InputGroupAddon>\n\n                  <Input\n                    placeholder=\"Password...\"\n                    type=\"text\"\n                    name=\"password\"\n                    onChange={formik.handleChange}\n                    onFocus={() => setPasswordFocus(true)}\n                    onBlur={(e) => {\n                      formik.handleBlur(e);\n                      setPasswordFocus(false);\n                    }}\n                  ></Input>\n                  \n                </InputGroup>\n                <ErrorMessage message={formik.errors.password} />\n              </FormGroup>\n            </CardBody>\n          </Form>\n        </div>\n        <ModalFooter className=\"text-center\">\n          <Button\n            block\n            className=\"bg-primary btn-round\"\n            color=\"info\"\n            href=\"#pablo\"\n            onClick={(e) => {\n              e.preventDefault();\n              formik.submitForm();\n              setShouldValidate(true);\n            }}\n            size=\"lg\"\n          >\n            Login\n          </Button>\n        </ModalFooter>\n      </Card>\n    </Modal>\n  );\n};\n","import React from \"react\";\nimport { TestGroupInfoFragment } from \"../../schema/schema\";\n\ninterface NavbarProps {\n  navbarColor: string;\n  setNavbarColor: (color: string) => void;\n  topFixed: string;\n  setTopFixed: (val: string) => void;\n  hiddenBrand: string;\n  setHiddenBrand: (val: string) => void;\n  modalLogin: boolean;\n  setModalLogin: (val: boolean) => void;\n  setIsStyle: (val: boolean) => void;\n  isStyle: boolean;\n  testGroupsData?: TestGroupInfoFragment[] | undefined;\n  setTestGroupsData: (val: TestGroupInfoFragment[] | undefined) => void;\n}\ninterface NavbarContextProviderProps {\n  isHomePage?: boolean;\n  isStyle?: boolean;\n}\n\nexport const NavbarContext = React.createContext<NavbarProps>(\n  ({} as any) as NavbarProps\n);\n\nconst useChatContextProvider = ({\n  isHomePage,\n}: NavbarContextProviderProps): NavbarProps => {\n  const [isStyle, setIsStyle] = React.useState(false);\n  const [navbarColor, setNavbarColor] = React.useState(!isStyle ? \"bg-primary\" : \"navbar-transparent\");\n  const [topFixed, setTopFixed] = React.useState(\"81px\");\n  const [hiddenBrand, setHiddenBrand] = React.useState(\"\");\n  const [modalLogin, setModalLogin] = React.useState(false);\n  const [testGroupsData, setTestGroupsData] = React.useState<TestGroupInfoFragment[] | undefined>(undefined);\n  const [y, setY] = React.useState(0);\n  const [scrolState, setScrolState] = React.useState('up');\n  const handleNavigation = (e: any) => {\n    const window = e.currentTarget;\n    if (y > window.scrollY) {\n        setScrolState('up');\n    } else if (y < window.scrollY) {\n        setScrolState('down');\n    }\n    setY(window.scrollY);\n  };\n\n  React.useMemo(() => {\n    document.body.classList.add(\"sidebar-collapse\");\n    document.documentElement.classList.remove(\"nav-open\");\n    window.addEventListener(\"scroll\", handleNavigation);\n    return function cleanup() {\n      document.body.classList.remove(\"sidebar-collapse\");\n      window.addEventListener(\"scroll\", handleNavigation);\n    };\n  },[y]);\n\n  React.useMemo(() => {\n    if (scrolState === 'up') {\n      setTopFixed('81px');\n      setNavbarColor(\"\");\n      setHiddenBrand(\"\");\n  } else {\n    setTopFixed('0px');\n      setNavbarColor(`${isStyle ? 'bg-black-blur' : 'bg-primary'}`);\n      setHiddenBrand(\"hide-nav\");\n  }\n\n  }, [scrolState])\n  const navbarContextProvider: NavbarProps = {\n    navbarColor,\n    setNavbarColor,\n    topFixed,\n    setTopFixed,\n    hiddenBrand,\n    setHiddenBrand,\n    modalLogin,\n    setModalLogin,\n    setIsStyle,\n    isStyle,\n    testGroupsData,\n    setTestGroupsData,\n  };\n  return navbarContextProvider;\n};\n\nconst NavBarContextProvider: React.FC<NavbarContextProviderProps> = ({\n  isHomePage,\n  children,\n}) => {\n  const navBarContextProvider = useChatContextProvider({\n    isHomePage,\n  });\n\n  return (\n    <NavbarContext.Provider value={navBarContextProvider}>\n      {children}\n    </NavbarContext.Provider>\n  );\n};\n\nexport default NavBarContextProvider;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n// reactstrap components\nimport {\n  Collapse,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  UncontrolledDropdown,\n  Navbar,\n  Nav,\n} from \"reactstrap\";\nimport { TestGroupChildInfoFragment, useGetTestGroupsInfoQuery } from \"../../schema/schema\";\nimport Loading from \"../Loading\";\nimport { NavbarContext } from \"./NavbarContext\";\ninterface ElementMenuProps {\n  title: string;\n  link: string;\n  id: string;\n}\ninterface DropdownMenuChildProps {\n  elements: TestGroupChildInfoFragment[];\n  className?: string;\n}\n\nexport const DropdownMenuChild: React.FC<DropdownMenuChildProps> = ({ elements, className }) => {\n\n  const eleSorted = elements.slice().sort((a, b) => a.displayOrder - b.displayOrder);\n  return (\n    <DropdownMenu\n      className={\n        `bg-brand border border-white rounded min-w-6rem text-left mt-3 min-w-full ${className}`\n      }\n    >\n      {eleSorted.map((eleChild, index) => {\n        return (\n          <DropdownItem\n            key={index}\n            to={`/home/${eleChild.certificateType.toLowerCase()}/${eleChild.groupType.toLowerCase()}/${eleChild.link}`}\n            tag={Link}\n            className={\"text-white font-weight-bold\"}\n          >\n            {eleChild.testGroupName.toUpperCase()}\n          </DropdownItem>\n        );\n      })}\n    </DropdownMenu>\n  );\n};\n\ninterface IndexNavbarProps {\n  isGeneral?: boolean;\n}\nconst IndexNavbar: React.FC<IndexNavbarProps> = ({ isGeneral }) => {\n  const { navbarColor, isStyle, setTestGroupsData } = React.useContext(NavbarContext);\n  const [collapseOpen, setCollapseOpen] = React.useState(false);\n  const {data, loading} = useGetTestGroupsInfoQuery({\n    variables: {\n      data: {},\n    },\n  });\n  const testGroups = data?.getTestGroups.testGroups;\n  \n  React.useEffect(() => {\n    !loading && setTestGroupsData(testGroups);\n  }, [loading])\n\n  if(loading){\n    return <Loading isWelcome />\n  }\n \n  return (\n    <>\n      {collapseOpen ? (\n        <div\n          id=\"bodyClick\"\n          onClick={() => {\n            document.documentElement.classList.toggle(\"nav-open\");\n            setCollapseOpen(false);\n          }}\n        />\n      ) : null}\n      <Navbar\n        className={`mb-0 ${isStyle ? '' : 'bg-primary'} ${navbarColor}`}\n        expand=\"lg\"\n      >\n        <div className=\"navbar-translate\">\n          {/* <UncontrolledTooltip target=\"#navbar-brand\">\n              Designed by Invision. Coded by Creative Tim\n            </UncontrolledTooltip> */}\n          <button\n            className=\"navbar-toggler navbar-toggler\"\n            onClick={() => {\n              document.documentElement.classList.toggle(\"nav-open\");\n              setCollapseOpen(!collapseOpen);\n            }}\n            aria-expanded={collapseOpen}\n            type=\"button\"\n          >\n            <span className=\"navbar-toggler-bar top-bar\"></span>\n            <span className=\"navbar-toggler-bar middle-bar\"></span>\n            <span className=\"navbar-toggler-bar bottom-bar\"></span>\n          </button>\n        </div>\n        <Collapse\n          className=\"justify-content-center wrapper\"\n          isOpen={collapseOpen}\n          navbar\n        >\n          <Nav navbar>\n            {testGroups?.map((ele, index) => {\n              \n              return (\n                <UncontrolledDropdown key={index} nav>\n                  <DropdownToggle\n                    caret={ele.testGroupsChild ? true : false}\n                    color=\"default\"\n                    href=\"#pablo\"\n                    nav\n                    onClick={(e) => e.preventDefault()}\n                    className=\"border border-white rounded-pill min-w-6rem text-center font-10 px-3 py-1\"\n                  >\n                    <p className=\"font-weight-bold\">{ele.testGroupName}</p>\n                  </DropdownToggle>\n                  {ele.testGroupsChild && (\n                    <DropdownMenuChild elements={ele.testGroupsChild} />\n                  )}\n                </UncontrolledDropdown>\n              );\n            })}\n          </Nav>\n        </Collapse>\n      </Navbar>\n    </>\n  );\n};\n\nexport default IndexNavbar;\n","/*eslint-disable*/\nimport { useApolloClient } from \"@apollo/react-hooks\";\nimport React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\n// reactstrap components\nimport {\n  Container,\n  Navbar,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n} from \"reactstrap\";\nimport { useMe } from \"../../hooks/useMe\";\nimport { ModalLogin } from \"../../sections/Login/ModalLogin\";\nimport IndexNavbar from \"../Navbars/IndexNavbar\";\nimport { NavbarContext } from \"../Navbars/NavbarContext\";\ninterface LogoProps {\n  className?: string;\n}\nexport const Logo: React.FC<LogoProps> = ({ className }) => {\n  return (\n    <a href=\"/\">\n      <img\n        className={className}\n        src={require(\"../../assets/img/logo.png\")}\n        alt=\"logo\"\n      />\n    </a>\n  );\n};\nconst loginDropdowns = [\n  {\n    title: \"Edit profile\",\n    link: \"/profile\",\n    id: \"profile\",\n  },\n];\nconst Brand: React.FC = () => {\n  const { hiddenBrand, modalLogin, setModalLogin, isStyle } = React.useContext(NavbarContext);\n \n  const me = useMe();\n  const history = useHistory();\n  const client = useApolloClient();\n  return (\n    <div className={`${isStyle ? 'bg-black-10' : '' } fixed-top`}>\n      <Navbar\n        className={`${hiddenBrand} header-logo z-header mb-0 ${!isStyle ? 'bg-brand' : ''}`}\n      >\n        <div className='container'>\n          <div className=\"w-100\">\n            <div className=\"d-flex align-items-center justify-content-between\">\n              <div className=\"d-flex align-items-center logo\">\n                <Logo className=\"width-3rem\" />\n                <h4 className=\"m-0 text-white ml-2 font-9\">POWPER ENGLISH</h4>\n              </div>\n              <ul className=\"list-unstyled profile mb-0\">\n                <UncontrolledDropdown nav className=\"list-style-none\">\n                  <DropdownToggle\n                    color=\"default\"\n                    href=\"#pablo\"\n                    nav\n                    onClick={() => {\n                      me.id === \"-1\" && setModalLogin(true);\n                    }}\n                    className=\"border border-white rounded-pill min-w-6rem text-center font-11 px-3 position-relative\"\n                  >\n                    <p className=\"font-weight-bold\">\n                      {me.id !== \"-1\" ? me.name : \"Đăng nhập/ Đăng ký\"}\n                    </p>\n                    {me.id !== \"-1\" && (\n                      <>\n                        <DropdownMenu\n                          className={`bg-brand border border-white rounded min-w-6rem text-left mt-3 min-w-full`}\n                        >\n                          <DropdownItem\n                            to='/profile'\n                            className={\"text-white font-weight-bold\"}\n                          >\n                            Profile\n                          </DropdownItem>\n                          <DropdownItem\n                            className={\"text-white font-weight-bold\"}\n                            onClick={() => {\n                              localStorage.clear();\n                              client.resetStore();\n                              history.push('/home')\n                            }}\n                          >\n                            Log out\n                          </DropdownItem>\n                        </DropdownMenu>\n                      </>\n                    )}\n                  </DropdownToggle>\n                </UncontrolledDropdown>\n              </ul>\n              <ModalLogin isOpen={modalLogin} setIsOpen={setModalLogin} />\n            </div>\n            {/* <Col md=\"4\">\n              <div className=\"d-flex align-items-center text-white h-100\">\n                <div className=\"mr-2\">\n                  <h2 className=\"mb-2\">180.900</h2>\n                  <p>TỔNG LƯỢT ĐĂNG KÝ</p>\n                </div>\n                <div className=\"ml-2\">\n                  <h2 className=\"mb-2\">1800</h2>\n                  <p>ĐĂNG KÝ HÔM NAY</p>\n                </div>\n              </div>\n            </Col> */}\n            {/* <Col md=\"6\">\n            <div className=\"d-flex align-items-center text-white h-100\">\n                <div className=\"mr-5 text-center\">\n                <p className=\"font-weight-bold font-12\">HOTLINE</p> <br/> <a href=\"tel:+84866644423\" className=\"font-weight-bold font-12\">08.666.444.23</a> \n                </div>\n              <div className=\"ml-auto\">\n                <p className=\"font-13 font-weight-bold\">”Học thật, thi thật”</p>\n                <br/>\n                <p>CEO  Ths Dương Thái Lực</p>\n              </div>\n              <div className=\"ml-auto\">\n                <img width=\"120px\" src={require(\"../../assets/img/teacher.png\")} alt=\"\"/>\n              </div>\n              </div>\n            </Col> */}\n          </div>\n        </div>\n      </Navbar>\n      <IndexNavbar />\n    </div>\n  );\n};\n\nexport default Brand;\n","/** @jsx jsx */\nimport { jsx, css } from \"@emotion/core\";\nimport React from \"react\";\nimport Brand from \"../../components/Brand\";\nimport NavBarContextProvider from \"../../components/Navbars/NavbarContext\";\nimport { MeContext, notMe } from \"../../hooks/useMe\";\nimport { useMeQuery } from \"../../schema/schema\";\ninterface LayoutProps {\n  isHomePage?: boolean;\n}\nconst Layout: React.FC<LayoutProps> = ({ children, isHomePage }) => {\n  const meQuery = useMeQuery();\n  let me = meQuery.data?.me;\n  if (!me) {\n    me = notMe;\n  }\n\n  return (\n    <MeContext.Provider value={me}>\n      <NavBarContextProvider>\n        <Brand />\n        <div\n          css={css`\n            padding-top: ${isHomePage ? \"0\" : \"180px\"};\n          `}\n        >\n          {children}\n        </div>\n      </NavBarContextProvider>\n    </MeContext.Provider>\n  );\n};\nexport default Layout;\n","/**  @jsx jsx */\nimport { jsx, css } from \"@emotion/core\";\nimport moment from \"moment\";\nimport React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Button, Card, CardTitle, Col, Container, Row } from \"reactstrap\";\nimport config from \"../../config\";\nimport { BlogFragment } from \"../../schema/schema\";\n\ninterface BlogDetailProps {\n  blogsData?: BlogFragment[];\n}\nconst BlogDetail: React.FC<BlogDetailProps> = ({ blogsData }) => {\n  const { blogId } = useParams() as { blogId?: string };\n  const blog = blogsData?.find((b) => b.id === blogId);\n  const dateFormatted = moment(blog?.createdAt).format(\"DD/MM/YYYY\");\n  return (\n    <React.Fragment>\n      <div className=\"container noHeader\">\n        <div className=\"content-center\">\n          <Row>\n            <Col className=\"ml-auto mr-auto text-center\" md=\"8\">\n              <h1 className=\"title\">{blog?.blogName}</h1>\n              {/* <h5>{blog?.author.firstName || '' + blog?.author.lastName}</h5> */}\n            </Col>\n          </Row>\n        </div>\n        <div className=\"d-flex\">\n          <div\n            className=\"button-container d-flex flex-column\"\n            css={css`\n              position: sticky;\n              top: 120px;\n              left: 100px;\n              align-self: flex-start;\n            `}\n          >\n            <Button\n              className=\"btn-icon btn-round mr-1\"\n              color=\"twitter\"\n              size=\"lg\"\n            >\n              <i className=\"fab fa-twitter\"></i>\n            </Button>\n            <Button\n              className=\"btn-icon btn-round mr-1\"\n              color=\"facebook\"\n              size=\"lg\"\n            >\n              <i className=\"fab fa-facebook-square\"></i>\n            </Button>\n            <Button className=\"btn-icon btn-round\" color=\"google\" size=\"lg\">\n              <i className=\"fab fa-google\"></i>\n            </Button>\n          </div>\n          <div\n            className=\"page-header-image\"\n            css={css`\n              max-width: 700px;\n              margin: 0 auto;\n            `}\n          >\n            <img\n              src={`${config.PATH_IMAGE + blog?.image}`}\n              alt=\"header\"\n              className=\"w-100 mx-auto\"\n            />\n          </div>\n        </div>\n\n        <div className=\"section\">\n          <Container>\n            <div dangerouslySetInnerHTML={{ __html: blog?.content! }}></div>\n            <h4>{dateFormatted}</h4>\n          </Container>\n\n          <Container>\n            <Row>\n              <Col className=\"ml-auto mr-auto\" md=\"8\">\n                <Row>\n                  <Col md=\"6\">\n                    <div className=\"blog-tags\">\n                      Tags:{\" \"}\n                      <label className=\"label label-info mr-1\">\n                        Photography\n                      </label>\n                      <label className=\"label label-info mr-1\">Stories</label>\n                      <label className=\"label label-info\">Castle</label>\n                    </div>\n                  </Col>\n                  <Col md=\"6\">\n                    <Button\n                      className=\"btn-round pull-right\"\n                      color=\"google\"\n                      href=\"#pablo\"\n                      onClick={(e) => e.preventDefault()}\n                    >\n                      <i className=\"fab fa-google\"></i> 232\n                    </Button>\n                    <Button\n                      className=\"btn-round pull-right\"\n                      color=\"twitter\"\n                      href=\"#pablo\"\n                      onClick={(e) => e.preventDefault()}\n                    >\n                      <i className=\"fab fa-twitter\"></i> 910\n                    </Button>\n                    <Button\n                      className=\"btn-round pull-right\"\n                      color=\"facebook\"\n                      href=\"#pablo\"\n                      onClick={(e) => e.preventDefault()}\n                    >\n                      <i className=\"fab fa-facebook-square\"></i> 872\n                    </Button>\n                  </Col>\n                </Row>\n                <hr></hr>\n                {/* <Card className=\"card-profile card-plain\">\n                  <Row>\n                    <Col md=\"2\">\n                      <div className=\"card-avatar\">\n                        <a href=\"#pablo\" onClick={(e) => e.preventDefault()}>\n                          <img\n                              alt=\"...\"\n                              className=\"img img-raised\"\n                              src={require(\"assets/img/mike.jpg\")}\n                            ></img>\n                        </a>\n                        <div className=\"ripple-container\"></div>\n                      </div>\n                    </Col>\n                    <Col md=\"8\">\n                      <CardTitle tag=\"h4\">Alec Thompson</CardTitle>\n                      <p className=\"description\">\n                        I've been trying to figure out the bed design for the\n                        master bedroom at our Hidden Hills compound...I like\n                        good music from Youtube.\n                      </p>\n                    </Col>\n                    <Col md=\"2\">\n                      <Button\n                        className=\"pull-right btn-round\"\n                        color=\"default\"\n                        type=\"button\"\n                      >\n                        Follow\n                      </Button>\n                    </Col>\n                  </Row>\n                </Card> */}\n              </Col>\n            </Row>\n          </Container>\n          {/* <Container>\n            <Col md=\"12\">\n              <h2 className=\"title text-center\">Similar Stories</h2>\n              <br></br>\n              <div className=\"blogs-1\" id=\"blogs-1\">\n                <Row>\n                  <Col className=\"ml-auto mr-auto\" md=\"10\">\n                    <Card className=\"card-plain card-blog\">\n                      <Row>\n                        <Col md=\"5\">\n                          <div className=\"card-image\">\n                            <img\n                              alt=\"...\"\n                              className=\"img img-raised rounded\"\n                              src={\"\"}\n                            ></img>\n                          </div>\n                        </Col>\n                        <Col md=\"7\">\n                          <h6 className=\"category text-info\">Enterprise</h6>\n                          <CardTitle tag=\"h3\">\n                            <a\n                              href=\"#pablo\"\n                              onClick={(e) => e.preventDefault()}\n                            >\n                              Warner Music Group buys concert discovery service\n                              Songkick\n                            </a>\n                          </CardTitle>\n                          <p className=\"card-description\">\n                            Warner Music Group announced today it’s acquiring\n                            the selected assets of the music platform Songkick,\n                            including its app for finding concerts and the\n                            company’s trademark.\n                          </p>\n                          <p className=\"author\">\n                            by{\" \"}\n                            <a\n                              href=\"#pablo\"\n                              onClick={(e) => e.preventDefault()}\n                            >\n                              <b>Sarah Perez</b>\n                            </a>\n                            , 2 days ago\n                          </p>\n                        </Col>\n                      </Row>\n                    </Card>\n                    <Card className=\"card-plain card-blog\">\n                      <Row>\n                        <Col md=\"7\">\n                          <h6 className=\"category text-danger\">\n                            <i className=\"now-ui-icons now-ui-icons media-2_sound-wave\"></i>{\" \"}\n                            Startup\n                          </h6>\n                          <CardTitle tag=\"h3\">\n                            <a\n                              href=\"#pablo\"\n                              onClick={(e) => e.preventDefault()}\n                            >\n                              Insticator raises $5.2M to help publishers\n                            </a>\n                          </CardTitle>\n                          <p className=\"card-description\">\n                            Insticator is announcing that it has raised $5.2\n                            million in Series A funding. The startup allows\n                            online publishers to add quizzes, polls and other\n                            interactive elements...\n                          </p>\n                          <p className=\"author\">\n                            by{\" \"}\n                            <a\n                              href=\"#pablo\"\n                              onClick={(e) => e.preventDefault()}\n                            >\n                              <b>Anthony Ha</b>\n                            </a>\n                            , 5 days ago\n                          </p>\n                        </Col>\n                        <Col md=\"5\">\n                          <div className=\"card-image\">\n                            <img\n                              alt=\"...\"\n                              className=\"img img-raised rounded\"\n                              src={\"\"}\n                            ></img>\n                          </div>\n                        </Col>\n                      </Row>\n                    </Card>\n                  </Col>\n                </Row>\n              </div>\n            </Col>\n          </Container> */}\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default BlogDetail;\n","/** @jsx jsx */\nimport { jsx, css } from \"@emotion/core\";\nimport moment from \"moment\";\nimport React from \"react\";\nimport { Link, useRouteMatch } from \"react-router-dom\";\nimport {\n  Card,\n  CardBody,\n  CardFooter,\n  CardTitle,\n  Col,\n  Container,\n  Row,\n} from \"reactstrap\";\nimport { NavbarContext } from \"../../components/Navbars/NavbarContext\";\nimport { Truncate } from \"../../components/Truncate\";\nimport config from \"../../config\";\nimport { BlogFragment, TestGroupInfoFragment } from \"../../schema/schema\";\nimport { HTMLToString } from \"../../utils/string\";\ninterface ListBlogProps {\n  blogsData?: BlogFragment[];\n  testGroupData?: TestGroupInfoFragment;\n}\nconst ListBlog: React.FC<ListBlogProps> = ({ blogsData, testGroupData }) => {\n  const match = useRouteMatch();\n  const { setIsStyle } = React.useContext(NavbarContext);\n  React.useEffect(() => {\n    setIsStyle(false);\n  }, []);\n  return (\n    <section className=\"pb-5 noHeader\" data-background-color=\"gray\">\n      <Container>\n        <Row>\n          <Col className=\"ml-auto mr-auto\" md=\"12\">\n            <h2 className=\"title\">{testGroupData?.testGroupName}</h2>\n            <Row>\n              {blogsData &&\n                blogsData.length > 0 &&\n                blogsData.map((blog, index) => {\n                  const dateCreated = moment(blog.createdAt).format('DD-MM-YYYY');\n                  if(index === 0){\n                    return (<React.Fragment>\n                      <Col md=\"5\">\n                          <div className=\"card-image\">\n                            <Link to={`${match.url}/${blog.id}`}>\n                            <img\n                              alt=\"...\"\n                              className=\"img img-raised rounded img-hover\"\n                              src={config.PATH_IMAGE + blog.image}\n                            ></img>\n                            </Link>\n                          </div>\n                        </Col>\n                        <Col md=\"7\">\n                          <h6 className=\"category text-primary mt-3\">\n                            {blog.testGroup.certificateType}\n                          </h6>\n                          <CardTitle tag=\"h3\">\n                          <Link className='text-brand' to={`${match.url}/${blog.id}`}\n                          >\n                              {blog.blogName}\n                            </Link>\n                          </CardTitle>\n                          <Truncate\n                            lines={4}\n                            className=\"card-description text-brand\"\n                          >\n                            {HTMLToString(blog.content)}\n                          </Truncate>\n                          <p className=\"author\">\n                            by{\" \"}\n                            <a\n                              href=\"#pablo\"\n                              onClick={(e) => e.preventDefault()}\n                            >\n                              <b>{blog.author.firstName + \" \" + blog.author.lastName}</b>\n                            </a>\n                            , <span className=\"font-italic font-9\">{dateCreated}</span>\n                          </p>\n                        </Col>\n                    </React.Fragment>)\n                  }\n                  return (\n                    <Col className='mt-5' md=\"4\">\n                      <Card className=\"card-blog card-hover\">\n                        <div className=\"card-image\">\n                          <Link\n                            to={`${match.url}/${blog.id}`}\n                            className=\"text-decoration-none border-0\"\n                            css={css`\n                              position: relative;\n                              padding: 33%;\n                              display: block;\n                              overflow: hidden;\n                            `}\n                          >\n                            <img\n                              alt=\"...\"\n                              className=\"img rounded\"\n                              src={config.PATH_IMAGE + blog.image}\n                              css={css`\n                                position: absolute;\n                                top: 0;\n                                left: 0;\n                                width: 100%;\n                              `}\n                            ></img>\n                          </Link>\n                        </div>\n                        <CardBody>\n                          <h6 className=\"category text-primary\">{blog.testGroup.certificateType}</h6>\n                          <CardTitle tag=\"h5\" className=\"text-brand\">{blog.blogName}</CardTitle>\n                          <Truncate\n                            lines={4}\n                            className=\"card-description text-brand font-10\"\n                          >\n                            {HTMLToString(blog.content)}\n                          </Truncate>\n                          <CardFooter className=\"px-0\">\n                            <div className=\"author\">\n                              {/* <img\n                                alt=\"...\"\n                                className=\"avatar img-raised\"\n                                // src={require(\"assets/img/julie.jpg\")}\n                              ></img> */}\n                              <span>\n                                by{\" \"}\n                                <a\n                                  href=\"#pablo\"\n                                  onClick={(e) => e.preventDefault()}\n                                >\n                                  <b>{blog.author.firstName + \" \" + blog.author.lastName}</b>\n                                </a>\n                                , <span className=\"font-italic font-8\">{dateCreated}</span>\n                              </span>\n                            </div>\n                          </CardFooter>\n                        </CardBody>\n                      </Card>\n                    </Col>\n                  );\n                })}\n            </Row>\n          </Col>\n        </Row>\n      </Container>\n    </section>\n  );\n};\n\nexport default ListBlog;\n","\nimport React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { Nav } from \"reactstrap\";\nimport PerfectScrollbar from \"perfect-scrollbar\";\n\nimport logo from \"../../logo-white.svg\";\n\nvar ps: PerfectScrollbar;\ninterface SidebarProps {\n  location?: any\n  refs?: React.Ref<HTMLElement>\n  backgroundColor: any\n  routes: any\n}\nclass Sidebar extends React.Component<SidebarProps> {\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(props: Readonly<SidebarProps>) {\n    super(props);\n    // this.activeRoute.bind(this);\n  }\n  // verifies if routeName is the one active (in browser input)\n  // activeRoute(routeName: any) {\n  //   return this.props.location.pathname.indexOf(routeName) > -1 ? \"active\" : \"\";\n  // }\n  sidebar = React.createRef<HTMLDivElement>();\n  componentDidMount() {\n    if (navigator.platform.indexOf(\"Win\") > -1 && this.sidebar.current) {\n      ps = new PerfectScrollbar(this.sidebar.current, {\n        suppressScrollX: true,\n        suppressScrollY: false,\n      });\n    }\n  }\n  componentWillUnmount() {\n    if (navigator.platform.indexOf(\"Win\") > -1) {\n      ps.destroy();\n    }\n  }\n  render() {\n    return (\n      <div className=\"sidebar\">\n        <div className=\"logo\">\n          <a\n            href=\"#/admin\"\n            className=\"simple-text logo-mini\"\n          >\n            <div className=\"logo-img\">\n              <img src={logo} alt=\"react-logo\" />\n            </div>\n          </a>\n          <a\n            href=\"#/admin\"\n            className=\"simple-text logo-normal\"\n          >\n            Omega English\n          </a>\n        </div>\n        <div className=\"sidebar-wrapper\" ref={this.sidebar}>\n          <Nav>\n            {this.props.routes.map((prop: { redirect: any; layout: any; path: any; pro: any; icon: string; name: React.ReactNode; }, key: string | number | undefined) => {\n              if (prop.redirect) return null;\n              return (\n                <li\n                  className={''}\n                  key={key}\n                >\n                  <NavLink\n                    to={prop.layout + prop.path}\n                    className=\"nav-link\"\n                    activeClassName=\"active\"\n                  >\n                    <i className={\"now-ui-icons \" + prop.icon} />\n                    <p>{prop.name}</p>\n                  </NavLink>\n                </li>\n              );\n            })}\n          </Nav>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Sidebar;\n","import React from \"react\";\nimport {\n  Route,\n  Switch,\n  useHistory,\n  useParams,\n  useRouteMatch,\n} from \"react-router-dom\";\nimport Loading from \"../../components/Loading\";\nimport { NavbarContext } from \"../../components/Navbars/NavbarContext\";\nimport {\n  useGetBlogsQuery,\n  useGetTestGroupInfoQuery,\n} from \"../../schema/schema\";\nimport BlogDetail from \"./BlogDetail\";\nimport ListBlog from \"./ListBlog\";\n\nconst Blog: React.FC = () => {\n  const history = useHistory();\n  const match = useRouteMatch();\n  const { testGroupsData } = React.useContext(NavbarContext)\n  const { link } = useParams() as { link?: string };\n  if (!link) {\n    history.push(\"/home\");\n  }\n  const testGroupData = testGroupsData?.find((e) => e.link === link);\n  const { data: blogsQuery, loading } = useGetBlogsQuery({\n    variables: {\n      data: {\n        testGroupId: testGroupData?.id,\n      },\n    },\n  });\n  const blogsData = blogsQuery?.getBlogs.blogs;\n\n  if (loading) {\n    return <Loading />;\n  }\n  return (\n    <>\n      <Switch>\n        <Route path={`${match.url}/:blogId`}>\n          <BlogDetail blogsData={blogsData} />\n        </Route>\n        <Route path={match.url}>\n          <ListBlog blogsData={blogsData} />\n        </Route>\n      </Switch>\n    </>\n  );\n};\n\nexport default Blog;\n","import React from \"react\";\nimport HomePage from \"../sections/home\";\nimport DefaultFooter from \"../components/Footers/DefaultFooter\";\nimport { Route, Switch, useRouteMatch } from \"react-router-dom\";\nimport Test from \"../sections/Test\";\nimport IndexHeader from \"../components/Headers/IndexHeader\";\n// import Loading from \"../components/Loading\";\nimport Layout from \"./layout/Layout\";\nimport Blog from \"../sections/Blog\";\n\nconst Index: React.FC = () => {\n  const match = useRouteMatch();\n  return (\n    <Layout isHomePage>\n      <div className=\"wrapper\">\n        <Switch>\n          <Route path={`${match.path}/:type/test/:link`}>\n            <Test />\n          </Route>\n          <Route path={`${match.path}/:type/blog/:link`}>\n            <Blog />\n          </Route>\n          <Route path={match.path}>\n            <IndexHeader />\n            <HomePage />\n          </Route>\n        </Switch>\n      </div>\n      <DefaultFooter />\n    </Layout>\n  );\n};\n\nexport default Index;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  Dropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  Container,\n  InputGroup,\n  InputGroupText,\n  InputGroupAddon,\n  Input,\n} from \"reactstrap\";\n\nconst HeaderAdmin: React.FC = ({}) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n  const [dropdownOpen, setDropdownOpen] = React.useState(false);\n  const [color, setColor] = React.useState(\"transparent\");\n  const sidebarToggle = React.useRef<HTMLButtonElement>(null);\n  const toggle = () => {\n    if (isOpen) {\n      setColor(\"transparent\");\n    } else {\n      setColor(\"white\");\n    }\n    setIsOpen(!isOpen);\n  };\n  const dropdownToggle = () => {\n    setDropdownOpen(!dropdownOpen);\n  };\n  const openSidebar = () => {\n    // document.documentElement.classList.toggle(\"nav-open\");\n    // sidebarToggle.current && sidebarToggle.current.classList.toggle(\"toggled\");\n  };\n  const updateColor = () => {\n    if (window.innerWidth < 993 && isOpen) {\n      setColor(\"white\");\n    } else {\n      setColor(\"transparent\");\n    }\n  };\n\n  return (\n    <Navbar color={\"white\"} expand=\"lg\" className={\"navbar-absolute fixed-top\"}>\n      <Container fluid>\n        <div className=\"navbar-wrapper\">\n          <div className=\"navbar-toggle\">\n            <button\n              type=\"button\"\n              ref={sidebarToggle}\n              className=\"navbar-toggler\"\n              onClick={() => openSidebar()}\n            >\n              <span className=\"navbar-toggler-bar bar1\" />\n              <span className=\"navbar-toggler-bar bar2\" />\n              <span className=\"navbar-toggler-bar bar3\" />\n            </button>\n          </div>\n          <NavbarBrand href=\"/\"></NavbarBrand>\n        </div>\n        <NavbarToggler onClick={toggle}>\n          <span className=\"navbar-toggler-bar navbar-kebab\" />\n          <span className=\"navbar-toggler-bar navbar-kebab\" />\n          <span className=\"navbar-toggler-bar navbar-kebab\" />\n        </NavbarToggler>\n        <Collapse isOpen={isOpen} navbar className=\"justify-content-end\">\n          <form>\n            <InputGroup className=\"no-border\">\n              <Input placeholder=\"Search...\" />\n              <InputGroupAddon addonType=\"append\">\n                <InputGroupText>\n                  <i className=\"now-ui-icons ui-1_zoom-bold\" />\n                </InputGroupText>\n              </InputGroupAddon>\n            </InputGroup>\n          </form>\n          <Nav navbar>\n            <NavItem>\n              <Link to=\"#pablo\" className=\"nav-link\">\n                <i className=\"now-ui-icons media-2_sound-wave\" />\n                <p>\n                  <span className=\"d-lg-none d-md-block\">Stats</span>\n                </p>\n              </Link>\n            </NavItem>\n            <Dropdown nav isOpen={dropdownOpen} toggle={() => dropdownToggle()}>\n              <DropdownToggle caret nav>\n                <i className=\"now-ui-icons location_world\" />\n                <p>\n                  <span className=\"d-lg-none d-md-block\">Some Actions</span>\n                </p>\n              </DropdownToggle>\n              <DropdownMenu right>\n                <DropdownItem tag=\"a\">Action</DropdownItem>\n                <DropdownItem tag=\"a\">Another Action</DropdownItem>\n                <DropdownItem tag=\"a\">Something else here</DropdownItem>\n              </DropdownMenu>\n            </Dropdown>\n            <NavItem>\n              <Link to=\"#pablo\" className=\"nav-link\">\n                <i className=\"now-ui-icons users_single-02\" />\n                <p>\n                  <span className=\"d-lg-none d-md-block\">Account</span>\n                </p>\n              </Link>\n            </NavItem>\n          </Nav>\n        </Collapse>\n      </Container>\n    </Navbar>\n  );\n};\n\nexport default HeaderAdmin;\n","\nimport React from \"react\";\nimport { Container } from \"reactstrap\";\n// used for making the prop types of this component\nimport PropTypes from \"prop-types\";\ninterface FooterAdminProps {\n  isDefault?: boolean;\n  fluid?: boolean;\n  className?: string;\n}\n\nconst FooterAdmin : React.FC<FooterAdminProps> = ({\n  isDefault,\n  fluid,\n  className\n}) => {\n  \n    return (\n      <footer\n        className={\"footer\" + (isDefault ? \" footer-default\" : \"\") + ` ${className}`}\n      >\n        <Container fluid={fluid ? true : false}>\n          <nav>\n            <ul>\n              <li>\n                <a\n                  href=\"/english-front-end#/home\"\n                >\n                  Omega English\n                </a>\n              </li>\n              <li>\n                <a\n                  href=\"javascript:0;\"\n                >\n                  About Us\n                </a>\n              </li>\n              \n            </ul>\n          </nav>\n          <div className=\"copyright\">\n            &copy; {1900 + new Date().getFullYear()}, Designed by{\" \"}\n            <a\n              href=\"javascript:0;\"\n              rel=\"noopener noreferrer\"\n            >\n              Omega English\n            </a>\n          </div>\n        </Container>\n      </footer>\n    );\n}\n\n\n\nexport default FooterAdmin;\n","/*!\n\n=========================================================\n* Now UI Dashboard React - v1.4.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/now-ui-dashboard-react\n* Copyright 2020 Creative Tim (https://www.creative-tim.com)\n* Licensed under MIT (https://github.com/creativetimofficial/now-ui-dashboard-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\n/*eslint-disable*/\nimport React, { Component } from \"react\";\n\nclass FixedPlugin extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      classes: \"dropdown show\",\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    if (this.state.classes === \"dropdown\") {\n      this.setState({ classes: \"dropdown show\" });\n    } else {\n      this.setState({ classes: \"dropdown\" });\n    }\n  }\n  render() {\n    return (\n      <div className=\"fixed-plugin\">\n        <div className={this.state.classes}>\n          <div onClick={this.handleClick}>\n            <i className=\"fa fa-cog fa-2x\" />\n          </div>\n          <ul className=\"dropdown-menu show\">\n            <li className=\"header-title\">SIDEBAR BACKGROUND</li>\n            <li className=\"adjustments-line\">\n              <div className=\"badge-colors text-center\">\n                <span\n                  className={\n                    this.props.bgColor === \"yellow\"\n                      ? \"badge filter badge-yellow active\"\n                      : \"badge filter badge-yellow\"\n                  }\n                  data-color=\"yellow\"\n                  onClick={() => {\n                    this.props.handleColorClick(\"yellow\");\n                  }}\n                />\n                <span\n                  className={\n                    this.props.bgColor === \"blue\"\n                      ? \"badge filter badge-blue active\"\n                      : \"badge filter badge-blue\"\n                  }\n                  data-color=\"blue\"\n                  onClick={() => {\n                    this.props.handleColorClick(\"blue\");\n                  }}\n                />\n                <span\n                  className={\n                    this.props.bgColor === \"green\"\n                      ? \"badge filter badge-green active\"\n                      : \"badge filter badge-green\"\n                  }\n                  data-color=\"green\"\n                  onClick={() => {\n                    this.props.handleColorClick(\"green\");\n                  }}\n                />\n                <span\n                  className={\n                    this.props.bgColor === \"orange\"\n                      ? \"badge filter badge-orange active\"\n                      : \"badge filter badge-orange\"\n                  }\n                  data-color=\"orange\"\n                  onClick={() => {\n                    this.props.handleColorClick(\"orange\");\n                  }}\n                />\n                <span\n                  className={\n                    this.props.bgColor === \"red\"\n                      ? \"badge filter badge-red active\"\n                      : \"badge filter badge-red\"\n                  }\n                  data-color=\"red\"\n                  onClick={() => {\n                    this.props.handleColorClick(\"red\");\n                  }}\n                />\n              </div>\n            </li>\n\n            <li className=\"button-container\">\n              <a\n                href=\"https://www.creative-tim.com/product/now-ui-dashboard-pro-react?ref=nudr-fixed-plugin\"\n                target=\"_blank\"\n                className=\"btn btn-primary btn-block btn-round\"\n              >\n                Buy pro\n              </a>\n              <a\n                href=\"https://www.creative-tim.com/product/now-ui-dashboard-react?ref=nudr-fixed-plugin\"\n                target=\"_blank\"\n                className=\"btn btn-warning btn-block btn-round\"\n              >\n                Download free\n              </a>\n              <a\n                href=\"https://demos.creative-tim.com/now-ui-dashboard-react/#/documentation/tutorial?ref=nudr-fixed-plugin\"\n                className=\"btn btn-block btn-round btn-info\"\n              >\n                Documentation\n              </a>\n            </li>\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default FixedPlugin;\n","/*!\n\n=========================================================\n* Now UI Dashboard React - v1.4.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/now-ui-dashboard-react\n* Copyright 2020 Creative Tim (https://www.creative-tim.com)\n* Licensed under MIT (https://github.com/creativetimofficial/now-ui-dashboard-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\nimport React from \"react\";\n// react plugin used to create charts\nimport { Line, Bar } from \"react-chartjs-2\";\n\n// reactstrap components\nimport {\n  Card,\n  CardHeader,\n  CardBody,\n  CardFooter,\n  CardTitle,\n  Row,\n  Col,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  Table,\n  Button,\n  Label,\n  FormGroup,\n  Input,\n  UncontrolledTooltip,\n} from \"reactstrap\";\n\n// core components\n// import PanelHeader from \"../components/PanelHeader/index.js\";\n\nimport {\n  // dashboardPanelChart,\n  dashboardShippedProductsChart,\n  dashboardAllProductsChart,\n  dashboard24HoursPerformanceChart,\n} from \"../variables/charts.js\";\n\nclass Dashboard extends React.Component {\n  render() {\n    return (\n      <>\n        {/* <PanelHeader\n          size=\"lg\"\n          content={\n            <Line\n              data={dashboardPanelChart.data}\n              options={dashboardPanelChart.options}\n            />\n          }\n        /> */}\n        <div className=\"content\">\n          <Row>\n            <Col xs={12} md={4}>\n              <Card className=\"card-chart\">\n                <CardHeader>\n                  <h5 className=\"card-category\">Global Sales</h5>\n                  <CardTitle tag=\"h4\">Shipped Products</CardTitle>\n                  <UncontrolledDropdown>\n                    <DropdownToggle\n                      className=\"btn-round btn-outline-default btn-icon\"\n                      color=\"default\"\n                    >\n                      <i className=\"now-ui-icons loader_gear\" />\n                    </DropdownToggle>\n                    <DropdownMenu right>\n                      <DropdownItem>Action</DropdownItem>\n                      <DropdownItem>Another Action</DropdownItem>\n                      <DropdownItem>Something else here</DropdownItem>\n                      <DropdownItem className=\"text-danger\">\n                        Remove data\n                      </DropdownItem>\n                    </DropdownMenu>\n                  </UncontrolledDropdown>\n                </CardHeader>\n                <CardBody>\n                  <div className=\"chart-area\">\n                    <Line\n                      data={dashboardShippedProductsChart.data}\n                      options={dashboardShippedProductsChart.options}\n                    />\n                  </div>\n                </CardBody>\n                <CardFooter>\n                  <div className=\"stats\">\n                    <i className=\"now-ui-icons arrows-1_refresh-69\" /> Just\n                    Updated\n                  </div>\n                </CardFooter>\n              </Card>\n            </Col>\n            <Col xs={12} md={4}>\n              <Card className=\"card-chart\">\n                <CardHeader>\n                  <h5 className=\"card-category\">2020 Sales</h5>\n                  <CardTitle tag=\"h4\">All products</CardTitle>\n                  <UncontrolledDropdown>\n                    <DropdownToggle\n                      className=\"btn-round btn-outline-default btn-icon\"\n                      color=\"default\"\n                    >\n                      <i className=\"now-ui-icons loader_gear\" />\n                    </DropdownToggle>\n                    <DropdownMenu right>\n                      <DropdownItem>Action</DropdownItem>\n                      <DropdownItem>Another Action</DropdownItem>\n                      <DropdownItem>Something else here</DropdownItem>\n                      <DropdownItem className=\"text-danger\">\n                        Remove data\n                      </DropdownItem>\n                    </DropdownMenu>\n                  </UncontrolledDropdown>\n                </CardHeader>\n                <CardBody>\n                  <div className=\"chart-area\">\n                    <Line\n                      data={dashboardAllProductsChart.data}\n                      options={dashboardAllProductsChart.options}\n                    />\n                  </div>\n                </CardBody>\n                <CardFooter>\n                  <div className=\"stats\">\n                    <i className=\"now-ui-icons arrows-1_refresh-69\" /> Just\n                    Updated\n                  </div>\n                </CardFooter>\n              </Card>\n            </Col>\n            <Col xs={12} md={4}>\n              <Card className=\"card-chart\">\n                <CardHeader>\n                  <h5 className=\"card-category\">Email Statistics</h5>\n                  <CardTitle tag=\"h4\">24 Hours Performance</CardTitle>\n                </CardHeader>\n                <CardBody>\n                  <div className=\"chart-area\">\n                    <Bar\n                      data={dashboard24HoursPerformanceChart.data}\n                      options={dashboard24HoursPerformanceChart.options}\n                    />\n                  </div>\n                </CardBody>\n                <CardFooter>\n                  <div className=\"stats\">\n                    <i className=\"now-ui-icons ui-2_time-alarm\" /> Last 7 days\n                  </div>\n                </CardFooter>\n              </Card>\n            </Col>\n          </Row>\n          <Row>\n            <Col xs={12} md={6}>\n              <Card className=\"card-tasks\">\n                <CardHeader>\n                  <h5 className=\"card-category\">Backend Development</h5>\n                  <CardTitle tag=\"h4\">Tasks</CardTitle>\n                </CardHeader>\n                <CardBody>\n                  <div className=\"table-full-width table-responsive\">\n                    <Table>\n                      <tbody>\n                        <tr>\n                          <td>\n                            <FormGroup check>\n                              <Label check>\n                                <Input defaultChecked type=\"checkbox\" />\n                                <span className=\"form-check-sign\" />\n                              </Label>\n                            </FormGroup>\n                          </td>\n                          <td className=\"text-left\">\n                            Sign contract for \"What are conference organizers\n                            afraid of?\"\n                          </td>\n                          <td className=\"td-actions text-right\">\n                            <Button\n                              className=\"btn-round btn-icon btn-icon-mini btn-neutral\"\n                              color=\"info\"\n                              id=\"tooltip731609871\"\n                              type=\"button\"\n                            >\n                              <i className=\"now-ui-icons ui-2_settings-90\" />\n                            </Button>\n                            <UncontrolledTooltip\n                              delay={0}\n                              target=\"tooltip731609871\"\n                            >\n                              Edit Task\n                            </UncontrolledTooltip>\n                            <Button\n                              className=\"btn-round btn-icon btn-icon-mini btn-neutral\"\n                              color=\"danger\"\n                              id=\"tooltip923217206\"\n                              type=\"button\"\n                            >\n                              <i className=\"now-ui-icons ui-1_simple-remove\" />\n                            </Button>\n                            <UncontrolledTooltip\n                              delay={0}\n                              target=\"tooltip923217206\"\n                            >\n                              Remove\n                            </UncontrolledTooltip>\n                          </td>\n                        </tr>\n                        <tr>\n                          <td>\n                            <FormGroup check>\n                              <Label check>\n                                <Input type=\"checkbox\" />\n                                <span className=\"form-check-sign\" />\n                              </Label>\n                            </FormGroup>\n                          </td>\n                          <td className=\"text-left\">\n                            Lines From Great Russian Literature? Or E-mails From\n                            My Boss?\n                          </td>\n                          <td className=\"td-actions text-right\">\n                            <Button\n                              className=\"btn-round btn-icon btn-icon-mini btn-neutral\"\n                              color=\"info\"\n                              id=\"tooltip907509347\"\n                              type=\"button\"\n                            >\n                              <i className=\"now-ui-icons ui-2_settings-90\" />\n                            </Button>\n                            <UncontrolledTooltip\n                              delay={0}\n                              target=\"tooltip907509347\"\n                            >\n                              Edit Task\n                            </UncontrolledTooltip>\n                            <Button\n                              className=\"btn-round btn-icon btn-icon-mini btn-neutral\"\n                              color=\"danger\"\n                              id=\"tooltip496353037\"\n                              type=\"button\"\n                            >\n                              <i className=\"now-ui-icons ui-1_simple-remove\" />\n                            </Button>\n                            <UncontrolledTooltip\n                              delay={0}\n                              target=\"tooltip496353037\"\n                            >\n                              Remove\n                            </UncontrolledTooltip>\n                          </td>\n                        </tr>\n                        <tr>\n                          <td>\n                            <FormGroup check>\n                              <Label check>\n                                <Input defaultChecked type=\"checkbox\" />\n                                <span className=\"form-check-sign\" />\n                              </Label>\n                            </FormGroup>\n                          </td>\n                          <td className=\"text-left\">\n                            Flooded: One year later, assessing what was lost and\n                            what was found when a ravaging rain swept through\n                            metro Detroit\n                          </td>\n                          <td className=\"td-actions text-right\">\n                            <Button\n                              className=\"btn-round btn-icon btn-icon-mini btn-neutral\"\n                              color=\"info\"\n                              id=\"tooltip326247652\"\n                              type=\"button\"\n                            >\n                              <i className=\"now-ui-icons ui-2_settings-90\" />\n                            </Button>\n                            <UncontrolledTooltip\n                              delay={0}\n                              target=\"tooltip326247652\"\n                            >\n                              Edit Task\n                            </UncontrolledTooltip>\n                            <Button\n                              className=\"btn-round btn-icon btn-icon-mini btn-neutral\"\n                              color=\"danger\"\n                              id=\"tooltip389516969\"\n                              type=\"button\"\n                            >\n                              <i className=\"now-ui-icons ui-1_simple-remove\" />\n                            </Button>\n                            <UncontrolledTooltip\n                              delay={0}\n                              target=\"tooltip389516969\"\n                            >\n                              Remove\n                            </UncontrolledTooltip>\n                          </td>\n                        </tr>\n                      </tbody>\n                    </Table>\n                  </div>\n                </CardBody>\n                <CardFooter>\n                  <hr />\n                  <div className=\"stats\">\n                    <i className=\"now-ui-icons loader_refresh spin\" /> Updated 3\n                    minutes ago\n                  </div>\n                </CardFooter>\n              </Card>\n            </Col>\n            <Col xs={12} md={6}>\n              <Card>\n                <CardHeader>\n                  <h5 className=\"card-category\">All Persons List</h5>\n                  <CardTitle tag=\"h4\">Employees Stats</CardTitle>\n                </CardHeader>\n                <CardBody>\n                  <Table responsive>\n                    <thead className=\"text-primary\">\n                      <tr>\n                        <th>Name</th>\n                        <th>Country</th>\n                        <th>City</th>\n                        <th className=\"text-right\">Salary</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr>\n                        <td>Dakota Rice</td>\n                        <td>Niger</td>\n                        <td>Oud-Turnhout</td>\n                        <td className=\"text-right\">$36,738</td>\n                      </tr>\n                      <tr>\n                        <td>Minerva Hooper</td>\n                        <td>Curaçao</td>\n                        <td>Sinaai-Waas</td>\n                        <td className=\"text-right\">$23,789</td>\n                      </tr>\n                      <tr>\n                        <td>Sage Rodriguez</td>\n                        <td>Netherlands</td>\n                        <td>Baileux</td>\n                        <td className=\"text-right\">$56,142</td>\n                      </tr>\n                      <tr>\n                        <td>Doris Greene</td>\n                        <td>Malawi</td>\n                        <td>Feldkirchen in Kärnten</td>\n                        <td className=\"text-right\">$63,542</td>\n                      </tr>\n                      <tr>\n                        <td>Mason Porter</td>\n                        <td>Chile</td>\n                        <td>Gloucester</td>\n                        <td className=\"text-right\">$78,615</td>\n                      </tr>\n                    </tbody>\n                  </Table>\n                </CardBody>\n              </Card>\n            </Col>\n          </Row>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Dashboard;\n","/** @jsx jsx */\nimport { jsx, css } from \"@emotion/core\";\nimport React from \"react\";\ninterface PanelHeaderProps {\n  className?: string;\n  height?: string;\n}\n\nconst PanelHeader: React.FC<PanelHeaderProps> = ({\n  children,\n  className,\n  height = \"200\",\n}) => {\n  return (\n    <div\n      className={`panel-header d-flex align-items-center justify-content-center ${className}`}\n      css={css`\n        height: ${height === 'auto' ? height : height + 'px'};\n        margin-top: 68px;\n      `}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default PanelHeader;\n","import { ReactNotificationOptions } from \"react-notifications-component\";\n\nexport const notificationAdd = (\n  name: string,\n  action = \"Created\",\n  type = \"success\" as any,\n  options = {}\n) => {\n  const notification: ReactNotificationOptions = {\n    ...options,\n    title: \"Success!\",\n    message: `You've ${action} ${name} success`,\n    type: type,\n    insert: \"top\",\n    container: \"top-right\",\n    animationIn: [\"animated\", \"fadeIn\"],\n    animationOut: [\"animated\", \"fadeOut\"],\n    dismiss: {\n      duration: 2000,\n      pauseOnHover: true,\n    },\n  };\n  return notification;\n};\n","import React from 'react';\nimport { Editor } from '@tinymce/tinymce-react';\n  interface TinyMCETextareaProps {\n    textareaName: string;\n    onEditorChange: any;\n    value: any;\n    height?: number;\n  }\n\n const TinyMCETextarea : React.FC<TinyMCETextareaProps> = ({onEditorChange, textareaName, height, ...props}) => {\n\n\n     return (\n       <Editor\n         apiKey=\"f9b9q8eygntqnp8oisdg1ssr6mp1s0e4ydnhym3v1kyidgx1\"\n         initialValue=\"<p>This is the initial content of the editor</p>\"\n         init={{\n           height: height || 400,\n           menubar: true,\n           plugins: [\n             'advlist autolink lists link image charmap print preview anchor',\n             'searchreplace visualblocks code fullscreen',\n             'insertdatetime media table paste code help wordcount'\n           ],\n           toolbar:\n             'undo redo bold italic underline strikethrough superscript subscript codeformat \\\n             | formats blockformats fontformats fontsizes align \\\n             | forecolor backcolor | removeformat \\\n             | link image charmap print preview anchor \\\n             | a11ycheck code permanentpen table', \n         }}\n         \n         onEditorChange={onEditorChange}\n         textareaName={textareaName}\n         \n\n         {...props}\n       />\n     );\n   }\n\n export default TinyMCETextarea;","import React from \"react\";\nimport {\n  Row,\n  Col,\n  Card,\n  CardHeader,\n  CardBody,\n  FormGroup,\n  Input,\n  Form,\n  Button,\n} from \"reactstrap\";\nimport Select from \"react-select\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport {\n  EnglishCertificateType,\n  SkillsType,\n  useCreatePartMutation,\n  useGetPartLazyQuery,\n  useUpdatePartMutation,\n  NewPartInput,\n} from \"../../../../schema/schema\";\nimport ErrorMessage from \"../Error\";\nimport { store } from \"react-notifications-component\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { notificationAdd } from \"../../utils/Notification\";\nimport TinyMCETextarea from \"../TinyMCETextarea\";\n\ninterface CreateEditPartProps {\n  partId?: string;\n}\nexport const EnglishCertificateOptions = [\n  {\n    value: \"\",\n    label: \"Chose type of test\",\n  },\n  {\n    value: EnglishCertificateType.Toeic,\n    label: EnglishCertificateType.Toeic,\n  },\n  {\n    value: EnglishCertificateType.Ielts,\n    label: EnglishCertificateType.Ielts,\n  },\n  {\n    value: EnglishCertificateType.University,\n    label: 'Luyện thi đại học',\n  },\n  {\n    value: EnglishCertificateType.ExtraCourses,\n    label: 'Khoá học tặng kèm',\n  },\n  {\n    value: EnglishCertificateType.Coop,\n    label: 'Cộng tác',\n  },\n  {\n    value: EnglishCertificateType.Support,\n    label: 'Hổ trợ 24/7',\n  },\n];\n\nexport const SkillsTypeOptions = [\n  {\n    value: \"\",\n    label: \"Chose type of skill\",\n  },\n  {\n    value: SkillsType.Reading,\n    label: SkillsType.Reading,\n  },\n  {\n    value: SkillsType.Listening,\n    label: SkillsType.Listening,\n  },\n];\n\nconst CreateAndEditPart: React.FC<CreateEditPartProps> = () => {\n  const { partId } = useParams() as {partId?: string};\n  let notification = notificationAdd(\"Part\");\n  if (partId) {\n    notification = notificationAdd(\"Part\", \"Updated\");\n  }\n  const [certificateTypeSelect, setCertificateTypeSelect] = React.useState(\n    EnglishCertificateOptions[0]\n  );\n  const [skillTypeSelect, setSkillTypeSelect] = React.useState(\n    SkillsTypeOptions[0]\n  );\n  let initialValues: NewPartInput = {\n    partName: \"\",\n    description: \"\",\n    certificateType: EnglishCertificateOptions[0]\n      .value as EnglishCertificateType,\n    skillType: SkillsTypeOptions[0].value as SkillsType,\n  };\n  const [getPartQuery, getPartResponse] = useGetPartLazyQuery();\n\n  React.useEffect(() => {\n    if (!partId) {\n      return;\n    }\n    getPartQuery({\n      variables: {\n        id: partId,\n      },\n    });\n  }, [partId]);\n  if (getPartResponse.data) {\n    const { __typename, ...data } = getPartResponse.data.part;\n    initialValues = data;\n  }\n  React.useEffect(() => {\n    if (getPartResponse.data) {\n      SkillsTypeOptions.find((prop, key) => {\n        if (prop.value === initialValues.skillType) {\n          setSkillTypeSelect(SkillsTypeOptions[key]);\n        }\n      });\n      EnglishCertificateOptions.find((prop, key) => {\n        if (prop.value === initialValues.certificateType) {\n          setCertificateTypeSelect(EnglishCertificateOptions[key]);\n        }\n      });\n    }\n  }, [getPartResponse]);\n  const [createPart] = useCreatePartMutation();\n  const [updatePart] = useUpdatePartMutation();\n  const [shouldValidate, setShouldValidate] = React.useState(false);\n  const formik = useFormik({\n    enableReinitialize: true,\n    validateOnChange: shouldValidate,\n    validateOnBlur: shouldValidate,\n    initialValues: initialValues,\n    validationSchema: yup.object().shape({\n      partName: yup.string().required(\"Part Name is a required field\"),\n      description: yup.string().required(\"Description is a required field\"),\n      certificateType: yup\n        .string()\n        .required(\"Certificate Type is a required field\"),\n      skillType: yup.string().required(\"Skill Type is a required field\"),\n    }),\n    onSubmit: async (values) => {\n      if (partId) {\n        const result = await updatePart({\n          variables: {\n            data: values\n          },\n        });\n        if (result.data?.updatePart) {\n          store.addNotification(notification);\n          getPartResponse.refetch && getPartResponse.refetch();\n        }\n      } else {\n        const result = await createPart({\n          variables: {\n            data: values,\n          },\n        });\n        if (result.data?.createPart) {\n          store.addNotification(notification);\n          formik.resetForm();\n        }\n      }\n    },\n  });\n\n\n  return (\n    <>\n      <Form onSubmit={formik.handleSubmit}>\n        <Row>\n          <Col>\n            <Card>\n              <CardHeader className=\"d-flex justify-content-between align-items-center\">\n                <h5 className=\"title\">{!partId ? 'Create Part' : 'Update Part'}</h5>\n                <div>\n                  <Button\n                    type=\"button\"\n                    className=\"bg-info font-weight-bold font-10\"\n                    onClick={() => {\n                      formik.submitForm();\n                      setShouldValidate(true);\n                    }}\n                  >\n                    Submit\n                  </Button>\n                  <Link\n                    to={`/admin/toeic/part`}\n                    className=\"bg-danger btn font-weight-bold font-10\"\n                  >\n                    Cancel\n                  </Link>\n                </div>\n              </CardHeader>\n              <CardBody>\n                <Row>\n                  <Col className=\"pr-1\" md=\"6\">\n                    <FormGroup>\n                      <label>Part Name</label>\n                      <Input\n                        placeholder=\"Part Name\"\n                        name=\"partName\"\n                        type=\"text\"\n                        onChange={formik.handleChange}\n                        onBlur={formik.handleBlur}\n                        value={formik.values.partName}\n                        className={formik.errors.partName && \"input-error\"}\n                      />\n\n                      <ErrorMessage message={formik.errors.partName} />\n                    </FormGroup>\n                  </Col>\n                  <Col md=\"3\" className=\"pl-1\">\n                    <FormGroup>\n                      <label>Type of test</label>\n                      <Select\n                        className=\"react-select react-select-primary\"\n                        onChange={(opt: any) => {\n                          setCertificateTypeSelect(opt);\n                          formik.setFieldValue(\"certificateType\", opt.value);\n                        }}\n                        value={certificateTypeSelect}\n                        classNamePrefix=\"react-select\"\n                        placeholder=\"Chose type of Test\"\n                        name=\"certificateType\"\n                        options={EnglishCertificateOptions}\n                      ></Select>\n                      <ErrorMessage message={formik.errors.certificateType} />\n                    </FormGroup>\n                  </Col>\n                  <Col md=\"3\" className=\"pl-1\">\n                    <FormGroup>\n                      <label>Skill</label>\n                      <Select\n                        className=\"react-select react-select-primary\"\n                        onChange={(opt: any) => {\n                          setSkillTypeSelect(opt);\n                          formik.setFieldValue(\"skillType\", opt.value);\n                        }}\n                        classNamePrefix=\"react-select\"\n                        placeholder=\"Single Select\"\n                        value={skillTypeSelect}\n                        name=\"skillType\"\n                        options={SkillsTypeOptions}\n                      ></Select>\n                      <ErrorMessage message={formik.errors.skillType} />\n                    </FormGroup>\n                  </Col>\n                </Row>\n                <Row className=\"mt-3\">\n                  <Col className=\"pr-1\" md=\"6\">\n                    <FormGroup>\n                      <label>Description</label>\n                      <TinyMCETextarea\n                        textareaName=\"description\"\n                        onEditorChange={(e: any) => {\n                          formik.setFieldValue(\"description\", e);\n                        }}\n                        value={formik.values.description}\n                      />\n                      <ErrorMessage message={formik.errors.description} />\n                    </FormGroup>\n                  </Col>\n                </Row>\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n      </Form>\n    </>\n  );\n};\n\nexport default CreateAndEditPart;\n","import React from \"react\";\nimport ImageUploader from \"react-images-upload\";\nimport { Spinner } from \"reactstrap\";\nimport config from \"../../../../config\";\nimport { MediaType } from \"../../../../schema/schema\";\nimport \"./index.css\";\ninterface ImageUploadProps {\n  url?: string;\n  singleImage?: boolean;\n  setPath?: (val: string) => void;\n  type: MediaType;\n  isShowPreview?: boolean;\n  classNameContainer?: string;\n  path?: string | null;\n}\n\nconst ImageUpload: React.FC<ImageUploadProps> = ({\n  type,\n  url,\n  singleImage,\n  setPath,\n  isShowPreview = true,\n  classNameContainer,\n  path\n}) => {\n  const [loading, setLoading] = React.useState(false);\n  const [pathPreview, setPathPreview] = React.useState(\"\");\n  React.useEffect(() => {\n    url && setPathPreview(url);\n  }, [url]);\n  const handleImageChange = async (e: any, p: any) => {\n    const data = new FormData();\n    data.append(\"file\", e[0]);\n    data.append(\"name\", e[0].name);\n    data.append(\"type\", e[0].type);\n    data.append(\"typeFolder\", type.toLowerCase());\n    setLoading(true);\n\n    await fetch(config.UPLOAD_MEDIA + \"media\", {\n      method: \"POST\",\n      body: data,\n      credentials: 'same-origin',\n      headers: {\n        Accept: \"application/json\",\n      },\n    }).then((response) =>\n      response.json().then((res) => {\n        if (res.success) {\n          setLoading(false);\n          setPath && setPath(res.data.path);\n          setPathPreview(config.PATH_IMAGE + res.data.path);\n        }\n      })\n    );\n  };\n\n  return (\n    <div className=\"w-100 text-center wrapper-input-image\">\n      <ImageUploader\n        className={`w-100 ml-auto ${classNameContainer}`}\n        withIcon={false}\n        buttonText={`${path || url ? 'Edit' : 'Choose images'}`}\n        onChange={(e, p) => {\n          handleImageChange(e, p);\n        }}\n        imgExtension={[\".jpg\", \".gif\", \".png\", \".gif\", \".jpeg\"]}\n        maxFileSize={5242880}\n        singleImage={singleImage}\n      />\n      {isShowPreview && <React.Fragment>\n        {loading && <Spinner color=\"primary\" />}\n        {!loading && pathPreview && (\n          <div className=\"position-relative wrapper-img\">\n            <img className=\"img\" src={pathPreview} alt=\"\" />\n            <span\n              className=\"position-absolute\"\n              onClick={() => {\n                setPathPreview(\"\");\n                setPath && setPath(\"\");\n              }}\n            >\n              X\n            </span>\n          </div>\n        )}\n      </React.Fragment>}\n    </div>\n  );\n};\n\nexport default ImageUpload;\n","\nimport React, { useState } from 'react';\nimport { EnglishCertificateType, PartIdsInput, TestQuestionFragment, useUpdateTestMutation } from '../../../../schema/schema';\n\ninterface QuestionContext {\n    setIsOpenModal: (isOpenModal: boolean) => void;\n    isOpenModal: boolean;\n    certificateType: EnglishCertificateType;\n    questions?: TestQuestionFragment[];\n    setPartId: (partId: string) => void;\n    partId: string;\n    setIsOpenModalCreateQuestion: (value: boolean) => void;\n    isOpenModalCreateQuestion: boolean;\n    setQuestionIdModal: (questionId: string) => void;\n    questionIdModal: string;\n    isOpenModalAddPart: boolean;\n    setIsOpenModalAddPart: (value: boolean) => void;\n    partIds?: PartIdsInput;\n    setPartIds: (val: PartIdsInput) => void;\n    updateTestMutation: any;\n    updateTestMutationResult: any;\n    isOpenModalAddTest: boolean;\n    setIsOpenModalAddTest: (val: boolean) => void;\n    isOpenModalAddTestCategory: boolean;\n    setIsOpenModalAddTestCategory: (val: boolean) => void;\n}\ninterface QuestionContextProviderProps {\n    certificateType: EnglishCertificateType;\n}\n\nexport const QuestionContext = React.createContext<QuestionContext>(({} as any) as QuestionContext);\n\nconst useQuestionProvider = ({\n    certificateType\n}: QuestionContextProviderProps): QuestionContext => {\n    const [updateTestMutation, updateTestMutationResult] = useUpdateTestMutation();\n    const [partId, setPartId] = React.useState('');\n    const [isOpenModal, setIsOpenModal] = React.useState(false);\n    const [isOpenModalCreateQuestion, setIsOpenModalCreateQuestion] = React.useState(false);\n    const [isOpenModalAddPart, setIsOpenModalAddPart] = React.useState(false);\n    const [isOpenModalAddTest, setIsOpenModalAddTest] = React.useState(false);\n    const [isOpenModalAddTestCategory, setIsOpenModalAddTestCategory] = React.useState(false);\n    const [questionIdModal, setQuestionIdModal] = React.useState('');\n    const [partIds, setPartIds] = React.useState<PartIdsInput>()\n    React.useEffect(() => {\n        !isOpenModalCreateQuestion && setQuestionIdModal('');\n    },[isOpenModalCreateQuestion])\n\n    const questionProvider: QuestionContext = {\n        setIsOpenModal,\n        isOpenModal,\n        certificateType,\n        isOpenModalCreateQuestion,\n        setIsOpenModalCreateQuestion,\n        partId,\n        setPartId,\n        questionIdModal,\n        setQuestionIdModal,\n        isOpenModalAddPart,\n        setIsOpenModalAddPart,\n        partIds,\n        setPartIds,\n        updateTestMutation,\n        updateTestMutationResult,\n        isOpenModalAddTest,\n        setIsOpenModalAddTest,\n        isOpenModalAddTestCategory,\n        setIsOpenModalAddTestCategory,\n    };\n    return questionProvider;\n};\n\nconst QuestionContextProvider: React.FC<QuestionContextProviderProps> = ({ children, certificateType }) => {\n    const questionContextProvider = useQuestionProvider({ certificateType });\n\n    return <QuestionContext.Provider value={questionContextProvider}>{children}</QuestionContext.Provider>;\n};\n\nexport default QuestionContextProvider;\n","import React from \"react\";\nimport { Button } from \"reactstrap\";\ninterface ButtonAddProps {\n    onClick?: () => void;\n    text?: string;\n  }\n\nexport const ButtonAdd: React.FC<ButtonAddProps> = ({\n    onClick,\n    text\n  }) => {\n    return (\n      <div>\n        <Button\n          className=\"btn-icon btn-round mr-1\"\n          color=\"success\"\n          size=\"md\"\n          type=\"button\"\n          onClick={() => {\n            onClick && onClick()\n          }}\n        >\n          <i className=\"now-ui-icons ui-1_simple-add\"></i>\n        </Button>\n        <span className=\"font-weight-bold font-10\">{text || `Add`}</span>\n      </div>\n    );\n  };\n  ","import React from \"react\";\nimport { Button, Modal, ModalFooter } from \"reactstrap\";\n\ninterface ModalDeleteProps {\n  isOpen: boolean;\n  callback?: any;\n  loading?: boolean;\n  onClose?: (val: boolean) => void;\n}\n\nconst ModalDelete: React.FC<ModalDeleteProps> = ({\n  isOpen,\n  callback,\n  loading,\n  onClose,\n}) => {\n  return (\n    <Modal\n      className=\"modal-login\"\n      modalClassName=\"modal-brand\"\n      isOpen={isOpen}\n      centered\n      toggle={() => onClose && onClose(false)}\n    >\n      <div className=\"modal-header justify-content-center\">\n        <button\n          aria-hidden={true}\n          className=\"close\"\n          onClick={() => onClose && onClose(false)}\n          type=\"button\"\n        >\n          <i className=\"now-ui-icons ui-1_simple-remove\"></i>\n        </button>\n        <div className=\"header header-info text-center\">Are you sure?</div>\n      </div>\n      <div className=\"modal-body\"></div>\n      <ModalFooter className=\"text-center\">\n        <Button\n          className=\"bg-primary btn-round w-100\"\n          color=\"info\"\n          onClick={() => {\n            callback();\n            onClose && onClose(false);\n          }}\n          type=\"button\"\n          size=\"lg\"\n          disabled={loading}\n        >\n          {loading ? \"Loading...\" : \"Submit\"}\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n};\n\nexport default ModalDelete;\n","import React from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport {\n  Row,\n  Col,\n  Card,\n  CardHeader,\n  CardBody,\n  FormGroup,\n  Input,\n  Form,\n  Button,\n  CustomInput,\n} from \"reactstrap\";\nimport { notificationAdd } from \"../../utils/Notification\";\nimport {\n  EnglishCertificateOptions,\n  SkillsTypeOptions,\n} from \"./CreateAndEditPart\";\nimport {\n  NewQuestionInput,\n  QuestionType,\n  useCreateQuestionMutation,\n  SkillsType,\n  AnswersInput,\n  useGetPartsLazyQuery,\n  useGetQuestionLazyQuery,\n  useUpdateQuestionMutation,\n  MediaType,\n  TestQuestionInputId,\n  EnglishCertificateType,\n  AnswersGroupInput,\n  QuestionFragment,\n  useRemoveQuestionMutation,\n} from \"../../../../schema/schema\";\nimport Select from \"react-select\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport { store } from \"react-notifications-component\";\nimport ErrorMessage from \"../Error\";\nimport TinyMCETextarea from \"../TinyMCETextarea\";\nimport ImageUpload from \"../ImageUploader/index\";\nimport config from \"../../../../config\";\nimport { QuestionContext } from \"./QuestionContext\";\nimport { ButtonAdd } from \"../ButtonQuestion/ButtonAdd\";\nimport ModalDelete from \"../Modal/Delete\";\n\ninterface CreateAndEditQuestionProps {\n  modal?: boolean;\n  skillType?: SkillsType;\n  dataTestQuestionInput?: TestQuestionInputId;\n  refetchTestQuestions?: any;\n  setIdForced?: (value: number) => void;\n}\nlet PartsOptions = [\n  {\n    value: \"0\",\n    label: \"Chose part\",\n  },\n];\nconst answersKey: AnswersInput[] = [\n  {\n    keyAnswer: \"A\",\n    answerContent: \"\",\n  },\n  {\n    keyAnswer: \"B\",\n    answerContent: \"\",\n  },\n  {\n    keyAnswer: \"C\",\n    answerContent: \"\",\n  },\n  {\n    keyAnswer: \"D\",\n    answerContent: \"\",\n  },\n];\nconst CreateAndEditQuestionForm: React.FC<CreateAndEditQuestionProps> = ({\n  modal,\n  skillType,\n  dataTestQuestionInput,\n  refetchTestQuestions,\n  setIdForced,\n}) => {\n  const [path, setPath] = React.useState<string | null>(null);\n  const [isOpenModalDelete, setIsOpenModalDelete] = React.useState(false);\n  const [\n    removeQuestionMutation,\n    removeQuestionMutationResult,\n  ] = useRemoveQuestionMutation();\n\n  const [idRemove, setIdRemove] = React.useState(\"\");\n  const removeTestQuestion = () => {\n    removeQuestionMutation({\n      variables: {\n        id: idRemove,\n      },\n    });\n  };\n  const answersKeyVcl: AnswersInput[] = [\n    {\n      keyAnswer: \"A\",\n      answerContent: \"\",\n    },\n    {\n      keyAnswer: \"B\",\n      answerContent: \"\",\n    },\n    {\n      keyAnswer: \"C\",\n      answerContent: \"\",\n    },\n    {\n      keyAnswer: \"D\",\n      answerContent: \"\",\n    },\n  ];\n  const questionContext = React.useContext(QuestionContext);\n\n  React.useEffect(() => {\n    formik.setFieldValue(\"image\", path);\n  }, [path]);\n\n  const { questionId } = useParams();\n  const [answersKeyState, setAnswerKeyState] = React.useState(answersKeyVcl);\n  // const [answersKeyGroupState, setAnswerKeyGroupState] = React.useState(answersKeyVcl);\n  let notification = notificationAdd(\"Question\");\n  const questionIdFinal = questionId\n    ? questionId\n    : questionContext.questionIdModal;\n  if (questionIdFinal) {\n    notification = notificationAdd(\"Question\", \"Updated\");\n  }\n\n  const [certificateTypeSelect, setCertificateTypeSelect] = React.useState(\n    EnglishCertificateOptions[0]\n  );\n  const [skillTypeSelect, setSkillTypeSelect] = React.useState(\n    SkillsTypeOptions[0]\n  );\n\n  const [partSelect, setPartSelect] = React.useState(PartsOptions[0]);\n  const [partsQuery, partsResponse] = useGetPartsLazyQuery();\n  const parts = partsResponse.data?.getParts.parts;\n  React.useEffect(() => {\n    partsQuery({\n      variables: {\n        data: {\n          certificateType: certificateTypeSelect.value as EnglishCertificateType,\n        },\n      },\n    });\n    PartsOptions = [\n      {\n        value: \"0\",\n        label: \"Chose part\",\n      },\n    ];\n    if (parts) {\n      parts\n        .filter((part) => part.skillType === skillTypeSelect.value)\n        .map((part) => {\n          const optionPart = {\n            value: part.id,\n            label: part.partName,\n          };\n          PartsOptions = [...PartsOptions, optionPart];\n          return part;\n        });\n    }\n  }, [certificateTypeSelect, skillTypeSelect, parts]);\n\n  let initialValues: NewQuestionInput = {\n    questionName: \"\",\n    explaination: \"\",\n    audioSec: 0,\n    audioSecVN: 0,\n    questionType: QuestionType.SingleChoice,\n    content: \"\",\n    answers: answersKey,\n    certificateType: questionContext.certificateType,\n    skillType: skillType\n      ? skillType\n      : (SkillsTypeOptions[0].value as SkillsType),\n    result: \"\",\n    image: \"\",\n    description: \"\",\n    testId: dataTestQuestionInput?.testId,\n    partId: dataTestQuestionInput?.partId,\n    questionGroupName: \"\",\n  };\n  const [isCheckedResult, setIsCheckedResult] = React.useState(\n    initialValues.result\n  );\n  const [getQuestionQuery, getQuestionRespone] = useGetQuestionLazyQuery();\n\n  React.useEffect(() => {\n    if (!questionIdFinal) {\n      return;\n    }\n    getQuestionQuery({\n      variables: {\n        id: questionIdFinal,\n      },\n    });\n  }, [questionIdFinal]);\n\n  //refresh test questions\n  React.useEffect(() => {\n    removeQuestionMutationResult.data?.removeQuestion &&\n      refetchTestQuestions &&\n      refetchTestQuestions();\n  }, [removeQuestionMutationResult.loading]);\n\n  const [answersGroupsArr, setAnswersGroupsArr] = React.useState<\n    AnswersGroupInput[]\n  >([]);\n  const handleRemoveQuestionGroup = (id?: string | null) => {\n    if (questionId || modal) {\n      setIsOpenModalDelete(true);\n      id && setIdRemove(id);\n    }\n    setAnswersGroupsArr([...answersGroupsArr.filter((a) => a.id !== id)]);\n  };\n  let urlDefault: string = \"\";\n  let answers: any;\n  let dataQuestion: QuestionFragment | undefined;\n  if (getQuestionRespone.data) {\n    const {\n      __typename,\n      questionGroups,\n      questionGroupOrder,\n      isGroup,\n      ...data\n    } = getQuestionRespone.data.question;\n    dataQuestion = { ...data, questionGroups, questionGroupOrder, isGroup };\n\n    answers = data.answers.map((answer) => {\n      const { __typename, ...answerData } = answer;\n      return answerData;\n    });\n    urlDefault = config.PATH_IMAGE + data.image;\n\n    initialValues = {\n      ...data,\n      answers,\n    };\n  }\n  React.useMemo(() => {\n    if (dataQuestion?.questionGroups) {\n      const answersGroupsArrBE = dataQuestion.questionGroups.map((group) => {\n        return {\n          answers: group.answers.map((answer) => {\n            const { __typename, ...answerData } = answer;\n            return answerData;\n          }),\n          id: group.id,\n          order: group.questionGroupOrder,\n          description: group.description,\n          result: group.result,\n          questionName: group.questionName,\n          explaination: group.explaination,\n        };\n      });\n      setAnswersGroupsArr(answersGroupsArrBE);\n    }\n  }, [getQuestionRespone.data]);\n\n  React.useEffect(() => {\n    if (getQuestionRespone.data) {\n      SkillsTypeOptions.find((prop, key) => {\n        if (prop.value === initialValues.skillType) {\n          setSkillTypeSelect(SkillsTypeOptions[key]);\n        }\n        return prop;\n      });\n      EnglishCertificateOptions.find((prop, key) => {\n        if (prop.value === initialValues.certificateType) {\n          setCertificateTypeSelect(EnglishCertificateOptions[key]);\n        }\n        return prop;\n      });\n      setIsCheckedResult(getQuestionRespone.data.question.result);\n      setAnswerKeyState(answers);\n    }\n  }, [getQuestionRespone]);\n  const [createQuestion] = useCreateQuestionMutation();\n  const [updateQuestion] = useUpdateQuestionMutation();\n\n  const [shouldValidate, setShouldValidate] = React.useState(false);\n\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: initialValues,\n    validateOnChange: shouldValidate,\n    validateOnBlur: shouldValidate,\n    validationSchema: yup.object().shape({\n      questionName: yup.string().required(\"Part Name is a required field\"),\n      certificateType: yup\n        .string()\n        .required(\"Certificate Type is a required field\"),\n      skillType: yup.string().required(\"Skill Type is a required field\"),\n      result: yup.string().required(\"Result is a required field\"),\n      audioSec: yup.number().required(\"Audio Seconds must be number\"),\n    }),\n    onSubmit: async (values) => {\n      if (questionIdFinal) {\n        const result = await updateQuestion({\n          variables: {\n            data: {\n              ...values,\n              answers: answersKeyState,\n              answersGroup: answersGroupsArr,\n            },\n          },\n        });\n        if (result.data?.updateQuestion) {\n          store.addNotification(notification);\n          getQuestionRespone.refetch && getQuestionRespone.refetch();\n          refetchTestQuestions && refetchTestQuestions();\n        }\n      } else {\n        const result = await createQuestion({\n          variables: {\n            data: {\n              ...values,\n              answers: answersKeyState,\n              answersGroup: answersGroupsArr,\n            },\n          },\n        });\n        if (result.data?.createQuestion) {\n          store.addNotification(notification);\n          setIdForced && setIdForced(parseInt(result.data?.createQuestion.id));\n          setAnswerKeyState(answersKeyVcl);\n          refetchTestQuestions && refetchTestQuestions();\n        }\n      }\n    },\n  });\n\n  return (\n    <div>\n      <Form onSubmit={formik.handleSubmit}>\n        <Row>\n          <Col>\n            <Card>\n              <CardHeader className={`d-flex justify-content-between align-items-center ${modal && 'sticky-top py2 px-4 bg-white'}`}>\n                <h5 className=\"title\">\n                  {!questionId && !modal ? \"Create Question\" : \"Update Question\"}\n                </h5>\n                <div>\n                  <Button\n                    type=\"button\"\n                    className=\"bg-info font-weight-bold font-10\"\n                    onClick={() => {\n                      formik.submitForm();\n                      setShouldValidate(true);\n                    }}\n                  >\n                    Submit\n                  </Button>\n                  {!modal && (\n                    <Link\n                      to={`/admin/toeic/questions`}\n                      className=\"bg-danger btn font-weight-bold font-10\"\n                    >\n                      Cancel\n                    </Link>\n                  )}\n                </div>\n              </CardHeader>\n              <CardBody>\n                <Row>\n                  <Col className=\"pr-1\" md=\"6\">\n                    <FormGroup>\n                      <label>Question Name</label>\n                      <Input\n                        placeholder=\"Question Name\"\n                        name=\"questionName\"\n                        type=\"text\"\n                        onChange={formik.handleChange}\n                        onBlur={formik.handleBlur}\n                        value={formik.values.questionName}\n                      />\n                    </FormGroup>\n                    <ErrorMessage message={formik.errors.questionName} />\n                  </Col>\n                  <Col className=\"pr-1\" md=\"6\">\n                    <FormGroup>\n                      <label>Question Group Name</label>\n                      <Input\n                        placeholder=\"Question Name\"\n                        name=\"questionGroupName\"\n                        type=\"text\"\n                        onChange={formik.handleChange}\n                        onBlur={formik.handleBlur}\n                        value={formik.values.questionGroupName || \"\"}\n                      />\n                    </FormGroup>\n                    <ErrorMessage message={formik.errors.questionGroupName} />\n                  </Col>\n                  <Input type=\"hidden\" name=\"testId\" />\n                </Row>\n                {!modal && (\n                  <Row>\n                    <Col md=\"4\" className=\"pr-1\">\n                      <FormGroup>\n                        <label>Type of test</label>\n                        <Select\n                          className=\"react-select react-select-primary\"\n                          onChange={(opt: any) => {\n                            setPartSelect(PartsOptions[0]);\n                            setCertificateTypeSelect(opt);\n                            formik.setFieldValue(\"certificateType\", opt.value);\n                          }}\n                          value={certificateTypeSelect}\n                          classNamePrefix=\"react-select\"\n                          placeholder=\"Chose type of Test\"\n                          name=\"certificateType\"\n                          options={EnglishCertificateOptions}\n                        ></Select>\n                        <ErrorMessage message={formik.errors.certificateType} />\n                      </FormGroup>\n                    </Col>\n                    <Col md=\"4\" className=\"pr-1 pl-1\">\n                      <FormGroup>\n                        <label>Skill</label>\n                        <Select\n                          className=\"react-select react-select-primary\"\n                          onChange={(opt: any) => {\n                            setPartSelect(PartsOptions[0]);\n                            setSkillTypeSelect(opt);\n                            formik.setFieldValue(\"skillType\", opt.value);\n                          }}\n                          classNamePrefix=\"react-select\"\n                          placeholder=\"Single Select\"\n                          value={skillTypeSelect}\n                          name=\"skillType\"\n                          options={SkillsTypeOptions}\n                        ></Select>\n                        <ErrorMessage message={formik.errors.skillType} />\n                      </FormGroup>\n                    </Col>\n                    <Col md=\"4\" className=\"pl-1\">\n                      <FormGroup>\n                        <label>Part</label>\n                        <Select\n                          className=\"react-select react-select-primary\"\n                          onChange={(opt: any) => {\n                            setPartSelect(opt);\n                            formik.setFieldValue(\"partId\", opt.value);\n                          }}\n                          classNamePrefix=\"react-select\"\n                          placeholder=\"Single Select\"\n                          value={partSelect}\n                          name=\"partId\"\n                          options={PartsOptions}\n                        ></Select>\n                        <ErrorMessage message={formik.errors.partId} />\n                      </FormGroup>\n                    </Col>\n                  </Row>\n                )}\n                <Row>\n                  <Col className=\"pr-1 \" md=\"6\">\n                    <FormGroup>\n                      <label>Audio Second</label>\n                      <Input\n                        placeholder=\"Audio Second\"\n                        name=\"audioSec\"\n                        type=\"number\"\n                        onChange={formik.handleChange}\n                        onBlur={formik.handleBlur}\n                        value={formik.values.audioSec}\n                      />\n                    </FormGroup>\n                    <ErrorMessage message={formik.errors.audioSec} />\n                  </Col>\n                  <Col className=\"pr-1 \" md=\"6\">\n                    <FormGroup>\n                      <label>Audio Second Vietnam</label>\n                      <Input\n                        placeholder=\"Audio Second Vietnam\"\n                        name=\"audioSecVN\"\n                        type=\"number\"\n                        onChange={formik.handleChange}\n                        onBlur={formik.handleBlur}\n                        value={formik.values.audioSecVN}\n                      />\n                    </FormGroup>\n                    <ErrorMessage message={formik.errors.audioSecVN} />\n                  </Col>\n                </Row>\n                <Row>\n                  <Col className=\"\" md=\"12\">\n                    <FormGroup>\n                      <label>Content</label>\n                      <TinyMCETextarea\n                        textareaName=\"content\"\n                        onEditorChange={(e: any) => {\n                          formik.setFieldValue(\"content\", e);\n                        }}\n                        value={formik.values.content}\n                      />\n                    </FormGroup>\n                    <ErrorMessage message={formik.errors.content} />\n                  </Col>\n                </Row>\n                <Row>\n                  <Col className=\"\" md=\"12\">\n                    <FormGroup>\n                      <label>Explaination</label>\n                      <TinyMCETextarea\n                        textareaName=\"explaination\"\n                        onEditorChange={(e: any) => {\n                          formik.setFieldValue(\"explaination\", e);\n                        }}\n                        value={formik.values.explaination}\n                      />\n                    </FormGroup>\n                    <ErrorMessage message={formik.errors.explaination} />\n                  </Col>\n                </Row>\n\n                <Row>\n                  <Col className=\"pr-1\" md=\"6\">\n                    <FormGroup className=\"d-flex justify-content-between\">\n                      <label>Answers Key</label>\n                      <label className=\"position-relative\">\n                        Result\n                        <ErrorMessage\n                          style={{\n                            position: \"absolute\",\n                            left: \"60px\",\n                            top: \"-6px\",\n                            minWidth: \"200px\",\n                            fontWeight: \"normal\",\n                          }}\n                          message={formik.errors.result}\n                        />\n                      </label>\n                    </FormGroup>\n                    {answersKeyVcl.map(\n                      (answer: AnswersInput, index: number) => {\n                        return (\n                          <>\n                            <FormGroup\n                              className=\"d-flex align-items-center\"\n                              key={index}\n                            >\n                              <label className=\"mr-2\">{answer.keyAnswer}</label>\n                              <div className=\"w-100\">\n                                <Input\n                                  type=\"text\"\n                                  onKeyUp={(opt: any) => {\n                                    const res = answersKeyState.map((a) => {\n                                      if (a.keyAnswer === answer.keyAnswer) {\n                                        a.answerContent = opt.target.value;\n                                      }\n                                      return a;\n                                    });\n                                    setAnswerKeyState(res);\n                                  }}\n                                  onBlur={formik.handleBlur}\n                                  name=\"answers\"\n                                  defaultValue={\n                                    formik.values.answers[index]\n                                      .answerContent || \"\"\n                                  }\n                                />\n                                {formik.errors.answers && (\n                                  <ErrorMessage\n                                    message={\n                                      formik.errors.answers[index] as string\n                                    }\n                                  />\n                                )}\n                              </div>\n                              <CustomInput\n                                type=\"radio\"\n                                className=\"ml-3 mr-3\"\n                                id={`result${answer.keyAnswer}`}\n                                value={answer.keyAnswer!}\n                                name=\"result\"\n                                checked={answer.keyAnswer === isCheckedResult}\n                                onChange={(e) => {\n                                  formik.handleChange(e);\n                                  setIsCheckedResult(answer.keyAnswer!);\n                                }}\n                                onBlur={formik.handleBlur}\n                              />\n                            </FormGroup>\n                          </>\n                        );\n                      }\n                    )}\n                  </Col>\n                  <Col className=\"pl-1 mt-4\" md=\"6\">\n                    <Input\n                      placeholder=\"Chose file\"\n                      name=\"image\"\n                      type=\"hidden\"\n                    />\n                    <ImageUpload\n                      type={MediaType.Image}\n                      setPath={setPath}\n                      url={urlDefault}\n                      singleImage\n                    />\n                    <ErrorMessage message={formik.errors.image} />\n                  </Col>\n                </Row>\n                <Row>\n                  <Col md=\"12\">\n                    <div>\n                      {answersGroupsArr.map((a, index_a) => {\n                        return (\n                          <div key={index_a} className=\"pt-3 mt-4 border-top\">\n                            <FormGroup className=\"row flex-nowrap justify-content-between align-items-center w-50\">\n                              <div className=\"col-7\">\n                                <Input\n                                  placeholder=\"Enter question name\"\n                                  onChange={(e) => {\n                                    setAnswersGroupsArr(\n                                      answersGroupsArr.map((ele) => {\n                                        if (ele.id === a.id) {\n                                          return {\n                                            ...ele,\n                                            questionName: e.target.value,\n                                          };\n                                        }\n                                        return ele;\n                                      })\n                                    );\n                                  }}\n                                  defaultValue={a.questionName || \"\"}\n                                />\n                              </div>\n                              <Button\n                                className=\"btn-icon btn-round text-center\"\n                                color=\"danger\"\n                                size=\"sm\"\n                                type=\"button\"\n                                onClick={async (e) => {\n                                  e.preventDefault();\n                                  handleRemoveQuestionGroup(a.id);\n                                }}\n                              >\n                                <i className=\"now-ui-icons ui-1_simple-remove\"></i>\n                              </Button>\n                            </FormGroup>\n                            <FormGroup className=\"d-flex flex-wrap w-100\">\n                              <label className=\"mr-2 w-100\">Description</label>\n                              <TinyMCETextarea\n                                textareaName={`description${index_a}`}\n                                onEditorChange={(e: any) => {\n                                  setAnswersGroupsArr(\n                                    answersGroupsArr.map((ele) => {\n                                      if (ele.id === a.id) {\n                                        return {\n                                          ...ele,\n                                          description: e,\n                                        };\n                                      }\n                                      return ele;\n                                    })\n                                  );\n                                }}\n                                value={a.description || \"\"}\n                                height={200}\n                              />\n                            </FormGroup>\n                            <FormGroup className=\"d-flex flex-wrap w-100\">\n                              <label className=\"mr-2 w-100\">Explaination</label>\n                              <TinyMCETextarea\n                                textareaName={`explaination${index_a}`}\n                                onEditorChange={(e: any) => {\n                                  setAnswersGroupsArr(\n                                    answersGroupsArr.map((ele) => {\n                                      if (ele.id === a.id) {\n                                        return {\n                                          ...ele,\n                                          explaination: e,\n                                        };\n                                      }\n                                      return ele;\n                                    })\n                                  );\n                                }}\n                                value={a.explaination || \"\"}\n                                height={200}\n                              />\n                            </FormGroup>\n                            {a.answers && (\n                              <div className=\"w-50\">\n                                {a.answers.map(\n                                  (answer: AnswersInput, index: number) => {\n                                    return (\n                                      <>\n                                        <FormGroup\n                                          className=\"d-flex align-items-center\"\n                                          key={index}\n                                        >\n                                          <label className=\"mr-2\">\n                                            {answer.keyAnswer}\n                                          </label>\n                                          <div className=\"w-100\">\n                                            <Input\n                                              type=\"text\"\n                                              onKeyUp={(opt: any) => {\n                                                const answersGroup = answersGroupsArr.find(\n                                                  (e) => e.id === a.id\n                                                );\n                                                const res = answersGroup?.answers?.map(\n                                                  (aR) => {\n                                                    if (\n                                                      aR.keyAnswer ===\n                                                      answer.keyAnswer\n                                                    ) {\n                                                      aR.answerContent =\n                                                        opt.target.value;\n                                                    }\n                                                    return aR;\n                                                  }\n                                                );\n                                                res &&\n                                                  answersGroup &&\n                                                  setAnswersGroupsArr(\n                                                    answersGroupsArr.map(\n                                                      (ele) => {\n                                                        if (ele.id === a.id) {\n                                                          return {\n                                                            ...ele,\n                                                            answers: res,\n                                                          };\n                                                        }\n                                                        return ele;\n                                                      }\n                                                    )\n                                                  );\n                                              }}\n                                              name=\"answersGroup\"\n                                              defaultValue={\n                                                answer.answerContent || \"\"\n                                              }\n                                            />\n                                          </div>\n                                          <CustomInput\n                                            type=\"radio\"\n                                            className=\"ml-3 mr-3\"\n                                            id={`result-group_${\n                                              index_a + index\n                                            }_${answer.keyAnswer}`}\n                                            value={answer.keyAnswer!}\n                                            checked={\n                                              answer.keyAnswer === a.result\n                                            }\n                                            onChange={() => {\n                                              setAnswersGroupsArr(\n                                                answersGroupsArr.map((ele) => {\n                                                  if (ele.id === a.id) {\n                                                    return {\n                                                      ...ele,\n                                                      result: answer.keyAnswer,\n                                                    };\n                                                  }\n                                                  return ele;\n                                                })\n                                              );\n                                            }}\n                                          />\n                                        </FormGroup>\n                                      </>\n                                    );\n                                  }\n                                )}{\" \"}\n                              </div>\n                            )}\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </Col>\n                  <Col md=\"12\">\n                    <ButtonAdd\n                      onClick={() => {\n                        const answersGroupEle: AnswersGroupInput = {\n                          order: answersGroupsArr.length + 1,\n                          answers: answersKeyVcl,\n                          id: (answersGroupsArr.length + 1).toString(),\n                          isNew: true,\n                        };\n                        setAnswersGroupsArr([\n                          ...answersGroupsArr,\n                          answersGroupEle,\n                        ]);\n                      }}\n                      text=\"Add Question\"\n                    />\n                  </Col>\n                </Row>\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n      </Form>\n      <ModalDelete\n        isOpen={isOpenModalDelete}\n        onClose={setIsOpenModalDelete}\n        callback={removeTestQuestion}\n        loading={removeQuestionMutationResult.loading}\n      />\n    </div>\n  );\n};\nconst CreateAndEditQuestion: React.FC<CreateAndEditQuestionProps> = ({\n  modal,\n  skillType,\n  dataTestQuestionInput,\n  refetchTestQuestions,\n}) => {\n  const [idForced, setIdForced] = React.useState(0);\n  return (\n    <div>\n      <CreateAndEditQuestionForm\n        key={idForced}\n        modal={modal}\n        skillType={skillType}\n        dataTestQuestionInput={dataTestQuestionInput}\n        refetchTestQuestions={refetchTestQuestions}\n        setIdForced={setIdForced}\n      />\n    </div>\n  );\n};\n\nexport default CreateAndEditQuestion;\n","/** @jsx jsx */\nimport { jsx, css } from \"@emotion/core\";\nimport React from \"react\";\nimport Loading from \"../../../../components/Loading\";\n\ninterface LazyLoadProps {\n  className?: string;\n  refetchQuery?: any;\n  isHeightFull?: boolean;\n  loading?: boolean;\n}\n\nconst LazyLoad: React.FC<LazyLoadProps> = ({\n  className,\n  refetchQuery,\n  children,\n  isHeightFull,\n  loading,\n}) => {\n  const bodyRef = React.useRef<HTMLDivElement>(null);\n  const handleScroll = () => {\n    \n    const node = bodyRef.current;\n    if (!node) return;\n    const bottom =\n      Math.floor(node.scrollHeight - node.scrollTop) === node.clientHeight;\n      console.log('hello', bottom)\n    if (bottom) {\n       \n      refetchQuery && refetchQuery();\n    }\n  };\n  return (\n    <div\n      ref={bodyRef}\n      className={`${className} card-body position-relative`}\n      css={css`\n        overflow-y: auto;\n        ${!isHeightFull ? 'max-height: 40rem;' : 'height: 100%;'}\n        min-height: 20rem;\n      `}\n      onScroll={handleScroll}\n    >\n      {loading && <Loading absolute/>}\n      {children}\n    </div>\n  );\n};\n\nexport default LazyLoad;\n","import React from \"react\";\nimport { Link, useRouteMatch } from \"react-router-dom\";\nimport Select from \"react-select\";\nimport {\n  CardHeader,\n  CardTitle,\n  Table,\n  Badge,\n  Button,\n  Input,\n  Label,\n} from \"reactstrap\";\nimport {\n  useGetQuestionsQuery,\n  EnglishCertificateType,\n  SkillsType,\n  QuestionFilterTypeInput,\n  TestQuestionInputId,\n  PartIdAndQuestionIdsInput,\n  useRemoveQuestionMutation,\n} from \"../../../../schema/schema\";\nimport LazyLoad from \"../LazyLoad\";\nimport ModalDelete from \"../Modal/Delete\";\n// import { Route, Switch, Redirect } from \"react-router-dom\";\ninterface ListQuestionsProps {\n  setIconPills?: (val: string) => void;\n  modal?: boolean;\n  skillType?: SkillsType;\n  dataTestQuestionInput?: TestQuestionInputId;\n  refetchTestQuestions?: any;\n  arrQuestionIds?: PartIdAndQuestionIdsInput;\n  setArrQuestionIds?: (val: PartIdAndQuestionIdsInput) => void;\n}\nconst optionsFilter = [\n  {\n    value: null,\n    label: 'All',\n  },\n  {\n    value: SkillsType.Reading,\n    label: SkillsType.Reading,\n  },\n  {\n    value: SkillsType.Listening,\n    label: SkillsType.Listening,\n  },\n];\nconst ListQuestions: React.FC<ListQuestionsProps> = ({\n  setIconPills,\n  modal,\n  skillType,\n  dataTestQuestionInput,\n  arrQuestionIds,\n  setArrQuestionIds,\n}) => {\n  const [isOpenModalDelete, setIsOpenModalDelete] = React.useState(false);\n  const match = useRouteMatch();\n  const [currentFilter, setCurrentFilter] = React.useState(skillType);\n  const [\n    removeQuestionMutation,\n    removeQuestionMutationResult,\n  ] = useRemoveQuestionMutation();\n  const [idRemove, setIdRemove] = React.useState(\"\");\n  const removeQuestion = async (): Promise<void> => {\n    await removeQuestionMutation({\n      variables: {\n        id: idRemove,\n      }\n    });\n  }\n\n  const [searchName, setSearchName] = React.useState(\"\");\n  const questionsFilter: QuestionFilterTypeInput = React.useMemo(() => {\n    return {\n      certificateType: EnglishCertificateType.Toeic,\n      skillType: currentFilter,\n      testId: dataTestQuestionInput?.testId,\n      title: searchName,\n    };\n  }, [currentFilter, dataTestQuestionInput, searchName]);\n\n  \n  const questionsQuery = useGetQuestionsQuery({\n    variables: {\n      data: questionsFilter,\n    },\n  });\n\n  React.useEffect(() => {\n    if(removeQuestionMutationResult.data?.removeQuestion){\n      questionsQuery.refetch();\n    }\n  }, [questionsQuery, removeQuestionMutationResult.data])\n  \n  const fetchMoreQuestions = React.useCallback((): void => {\n    if (\n      questionsQuery.loading ||\n      !questionsQuery.data ||\n      !questionsQuery.data.questions ||\n      !questionsQuery.data.questions.nextCursor\n    )\n      return;\n    questionsQuery.fetchMore({\n      variables: {\n        data: {\n          ...questionsFilter,\n          cursor:\n            questionsQuery.data && questionsQuery.data.questions?.nextCursor,\n        },\n      },\n      updateQuery: (prev, next) => {\n        return {\n          ...prev,\n          questions: {\n            ...prev.questions,\n            questions: [\n              ...prev.questions.questions,\n              ...(next.fetchMoreResult\n                ? next.fetchMoreResult.questions.questions\n                : []),\n            ],\n            nextCursor: next?.fetchMoreResult?.questions?.nextCursor ?? null,\n          },\n        };\n      },\n    });\n  }, [questionsFilter, questionsQuery]);\n\n  React.useEffect(() => {\n    setIconPills && setIconPills(\"questions\");\n    questionsQuery.refetch();\n    setArrQuestionIds &&\n      setArrQuestionIds({\n        partId: dataTestQuestionInput?.partId,\n        questionIds: [],\n      });\n  }, []);\n\n\n  const questions = questionsQuery.data?.questions.questions;\n  return (\n    <>\n      {!modal && (\n        <CardHeader>\n          <div className=\"d-flex justify-content-between\">\n            <CardTitle tag=\"h4\">List Of Questions</CardTitle>\n            <Select\n              onChange={(opt: any) => {\n                setCurrentFilter(opt.value);\n              }}\n              placeholder=\"Filter\"\n              className=\"width-10rem z-header\"\n              classNamePrefix=\"react-select\"\n              options={optionsFilter}\n            />\n          </div>\n        </CardHeader>\n      )}\n      <LazyLoad\n        isHeightFull={modal ? true : false}\n        className=\"p-0\"\n        refetchQuery={fetchMoreQuestions}\n        loading={questionsQuery.loading}\n      >\n        <div className=\"sticky-top bg-white p-2\">\n          <Input\n            placeholder=\"Search by name\"\n            onChange={(e) => {\n              setSearchName(e.target.value);\n            }}\n          />\n        </div>\n        <Table responsive>\n          <thead className=\"text-primary\">\n            <tr>\n              {modal && (\n                <th\n                  className=\"form-check m-0 p-td-initial\"\n                  style={{ width: \"5%\" }}\n                >\n                  <Label check>\n                    <Input defaultChecked={false} o type=\"checkbox\"></Input>\n                    <span className=\"form-check-sign\"></span>\n                  </Label>\n                </th>\n              )}\n              {!modal && (\n                <th className=\"text-right\" style={{ width: \"5%\" }}></th>\n              )}\n              <th className=\"text-left font-weight-semi\">Question Name</th>\n              <th className=\"text-center font-weight-semi\">Certificate</th>\n              <th className=\"text-center font-weight-semi\">Skill</th>\n              <th className=\"text-center font-weight-semi\">Question Type</th>\n              {!modal && (\n                <th className=\"text-center font-weight-semi\">Actions</th>\n              )}\n            </tr>\n          </thead>\n          <tbody>\n            {questions &&\n              questions\n                .map((q, index) => {\n                  return (\n                    <tr key={index}>\n                      {modal && (\n                        <td className=\"form-check m-0 p-td-initial\">\n                          <Label check>\n                            <Input\n                              type=\"checkbox\"\n                              onChange={async (e) => {\n                                if (!arrQuestionIds) {\n                                  return;\n                                }\n                                if (e.target.checked) {\n                                  const arrQuestionId =\n                                    arrQuestionIds.questionIds;\n                                  arrQuestionId.push(q.id);\n                                  setArrQuestionIds &&\n                                    setArrQuestionIds({\n                                      ...arrQuestionIds,\n                                      questionIds: arrQuestionId,\n                                    });\n                                } else {\n                                  const arrQuestionId =\n                                    arrQuestionIds.questionIds;\n                                  setArrQuestionIds &&\n                                    setArrQuestionIds({\n                                      ...arrQuestionIds,\n                                      questionIds: arrQuestionId.filter(\n                                        (a) => a !== q.id\n                                      ),\n                                    });\n                                }\n                              }}\n                            />\n                            <span className=\"form-check-sign\"></span>\n                          </Label>\n                        </td>\n                      )}\n                      {!modal && <td>{index + 1}</td>}\n                      <td className=\"text-left font-weight-semi\">\n                        {q.questionName}\n                      </td>\n                      <td className=\"text-center\">\n                        {q.certificateType === EnglishCertificateType.Toeic ? (\n                          <Badge color=\"primary\">{q.certificateType}</Badge>\n                        ) : (\n                          <Badge color=\"brand\">{q.certificateType}</Badge>\n                        )}\n                      </td>\n                      <td className=\"text-center\">\n                        {q.skillType === SkillsType.Reading ? (\n                          <Badge color=\"success\">{q.skillType}</Badge>\n                        ) : (\n                          <Badge color=\"info\">{q.skillType}</Badge>\n                        )}\n                      </td>\n                      <td className=\"text-center font-weight-semi\">\n                        {q.questionType}\n                      </td>\n                      {!modal && (\n                        <td className=\"text-center\">\n                          <Button\n                            className=\"btn-icon btn-round mr-1\"\n                            color=\"info\"\n                            size=\"sm\"\n                            type=\"button\"\n                          >\n                            <i className=\"now-ui-icons users_single-02\"></i>\n                          </Button>\n                          <Link\n                            className=\"btn btn-sm mr-1 btn-warning btn-icon btn-round\"\n                            to={`${match.url}/${q.id}/edit`}\n                          >\n                            <i className=\"now-ui-icons ui-2_settings-90\"></i>\n                          </Link>\n                          <Button\n                            className=\"btn-icon btn-round\"\n                            color=\"danger\"\n                            size=\"sm\"\n                            type=\"button\"\n                            onClick={() => {setIdRemove(q.id); setIsOpenModalDelete(true)}}\n                          >\n                            <i className=\"now-ui-icons ui-1_simple-remove\"></i>\n                          </Button>\n                        </td>\n                      )}\n                    </tr>\n                  );\n                })}\n          </tbody>\n        </Table>\n        <ModalDelete\n          isOpen={isOpenModalDelete}\n          onClose={setIsOpenModalDelete}\n          callback={removeQuestion}\n          loading={removeQuestionMutationResult.loading}\n        />\n      </LazyLoad>\n    </>\n  );\n};\n\nexport default ListQuestions;\n","import React from \"react\";\nimport {\n  Modal,\n  ModalBody,\n  Button,\n  Spinner\n} from \"reactstrap\";\nimport {\n  PartIdAndQuestionIdsInput,\n  SkillsType,\n  TestQuestionInputId,\n  useCreateListTestQuestionsMutation\n} from \"../../../../schema/schema\";\nimport ListQuestions from \"./ListQuestions\";\nimport { QuestionContext } from \"./QuestionContext\";\n\ninterface ModalListQuestionsProps {\n  skillType: SkillsType;\n  dataTestQuestionInput: TestQuestionInputId;\n  refetchTestQuestions?: any;\n}\n\n\nconst ModalListQuestions: React.FC<ModalListQuestionsProps> = ({\n  skillType,\n  dataTestQuestionInput,\n  refetchTestQuestions,\n}) => {\n  const questionContext = React.useContext(QuestionContext);\n  const [arrQuestionIds, setArrQuestionIds] = React.useState<PartIdAndQuestionIdsInput>();\n  const [createListTestQuestionsMutation, resultCreateListTestQuestionsMutation] = useCreateListTestQuestionsMutation()\n  React.useEffect(() => {\n    if(resultCreateListTestQuestionsMutation.data?.createListTestQuestions){\n      refetchTestQuestions && refetchTestQuestions();\n      questionContext.setIsOpenModal(false);\n    }\n  },[resultCreateListTestQuestionsMutation.loading])\n  \n  return (\n    <>\n      <Modal\n        className=\"height-modal-80vh\"\n        contentClassName=\"h-100\"\n        size=\"lg\"\n        centered\n        isOpen={questionContext.isOpenModal}\n        toggle={() => questionContext.setIsOpenModal(false)}\n      >\n        <div className=\"modal-header justify-content-center\">\n          <button\n            className=\"close\"\n            type=\"button\"\n            onClick={() => questionContext.setIsOpenModal(false)}\n          >\n            <i className=\"now-ui-icons ui-1_simple-remove\"></i>\n          </button>\n          <h4 className=\"title title-up\">List of Questions</h4>\n        </div>\n        <ModalBody className='overflow-hidden'>\n          <ListQuestions modal skillType={skillType} dataTestQuestionInput={dataTestQuestionInput} arrQuestionIds={arrQuestionIds} setArrQuestionIds={setArrQuestionIds}/>\n        </ModalBody>\n        <div className=\"modal-footer\">\n          <Button\n            className=\"ml-auto\"\n            color=\"info\"\n            type=\"button\"\n            disabled={arrQuestionIds?.questionIds && arrQuestionIds?.questionIds?.length > 0 ? false : true}\n            onClick={async () => {\n              arrQuestionIds && arrQuestionIds.questionIds && arrQuestionIds.questionIds.length > 0 && await createListTestQuestionsMutation({\n                variables: {\n                  data: {\n                    testId: dataTestQuestionInput.testId,\n                    partIdAndQuestionIdsInput: [arrQuestionIds]\n                  }\n                }\n              })\n            }}\n          >\n            {!resultCreateListTestQuestionsMutation.loading ? 'Add Questions' : <Spinner color=\"primary\" />}\n          </Button>\n        </div>\n      </Modal>\n    </>\n  );\n};\n\nexport default ModalListQuestions;\n","import React from \"react\";\nimport { Button } from \"reactstrap\";\nimport { QuestionContext } from \"../QuestionsAndTest/QuestionContext\";\ninterface ButtonCreateQuestionProps {\n    partId: string;\n  }\n\nexport const ButtonCreateQuestion: React.FC<ButtonCreateQuestionProps> = ({\n    partId,\n  }) => {\n    const questionContext = React.useContext(QuestionContext);\n    return (\n      <div>\n        <Button\n          className=\"btn-icon btn-round mr-1\"\n          color=\"success\"\n          size=\"md\"\n          type=\"button\"\n          onClick={() => {\n            questionContext.setIsOpenModalCreateQuestion(true);\n            questionContext.setPartId(partId);\n          }}\n        >\n          <i className=\"now-ui-icons ui-1_simple-add\"></i>\n        </Button>\n        <span className=\"font-weight-bold font-10\">Create Question</span>\n      </div>\n    );\n  };\n  ","import { url } from \"inspector\";\nimport React from \"react\";\nimport ReactAudioPlayer from \"react-audio-player\";\nimport { Button, Spinner } from \"reactstrap\";\nimport config from \"../../../../config\";\nimport { MediaType } from \"../../../../schema/schema\";\n// import \"./index.css\";\ninterface ImageUploadProps {\n  url?: string;\n  type: MediaType;\n  onChange: (val: string) => void;\n  onClick: () => void;\n}\n\nconst AudioUpload: React.FC<ImageUploadProps> = ({\n  type,\n  url,\n  onChange,\n  onClick\n}) => {\n  const [loading, setLoading] = React.useState(false);\n  const [pathPreview, setPathPreview] = React.useState<string>();\n  React.useEffect(() => {\n    setPathPreview(url);\n  },[url])\n\n  const handleChange = async (e: any) => {\n    const file = e.target.files[0];\n    if(!file){\n        return;\n    }\n    const data = new FormData();\n    data.append(\"file\", file);\n    data.append(\"name\", file?.name);\n    data.append(\"type\", file?.type);\n    data.append(\"typeFolder\", type.toLowerCase());\n    setLoading(true);\n\n    await fetch(config.UPLOAD_MEDIA + \"media\", {\n      method: \"POST\",\n      body: data,\n      credentials: 'same-origin',\n      headers: {\n        Accept: \"application/json\",\n      },\n    }).then((response) =>\n      response.json().then((res) => {\n        if (res.success) {\n          setLoading(false);\n          setPathPreview(res.data.path);\n          onChange(res.data.path);\n        }\n      })\n    );\n  };\n\n  return (\n      <>\n    <div className=\"w-100 wrapper-input-image position-relative\">\n      <input\n        className=\"w-100 ml-auto\"\n        type=\"file\"\n        onChange={handleChange}\n        accept=\"audio/*\"\n      />\n      <Button className=\"btn border-primary bg-transparent text-primary border\">{pathPreview ? 'Replace Audio' : 'Upload Audio'}</Button>\n      \n    </div>\n   \n    {loading && <Spinner color=\"primary\" />}\n    {!loading && pathPreview && (\n        <div className=\"position-relative\">\n        <ReactAudioPlayer\n          src={config.PATH_IMAGE + (url ? url : pathPreview)}\n          className=\"mb-4\"\n          controls\n          controlsList={\"nodownload\"}\n          id=\"audio1listening\"\n        />\n        <a onClick={() => {\n            setPathPreview('');\n            onClick();\n        }} className=\"bg-danger text-white d-block position-absolute font-weight-bold\" style={{\n            borderRadius: '100%',\n            width: '28px',\n            height: '28px',\n            right: '-40px',\n            top: '13px',\n            textAlign: 'center',\n            fontSize: '11px',\n            paddingTop: '5px',\n            cursor: 'pointer'\n        }}>X</a>\n        </div>\n      )}\n      </>\n  );\n};\n\nexport default AudioUpload;\n","import React from \"react\";\nimport { Button } from \"reactstrap\";\nimport { QuestionContext } from \"../QuestionsAndTest/QuestionContext\";\ninterface ButtonAddQuestionProps {\n    partId?: string;\n  }\n\nexport const ButtonAddPart: React.FC<ButtonAddQuestionProps> = ({\n    \n  }) => {\n    const questionContext = React.useContext(QuestionContext);\n    return (\n      <div>\n        <Button\n          className=\"btn-icon btn-round mr-1 text-white\"\n          color=\"success\"\n          size=\"md\"\n          type=\"button\"\n          onClick={() => {\n            questionContext.setIsOpenModalAddPart(true);\n            // questionContext.setPartId(partId);\n          }}\n        >\n          <i className=\"now-ui-icons ui-1_simple-add\"></i>\n        </Button>\n        <span className=\"font-weight-bold font-13 ml-2 text-white\">Add Part</span>\n      </div>\n    );\n  };\n  ","/** @jsx jsx */\nimport { jsx, css } from \"@emotion/core\";\nimport React from \"react\";\nimport { store } from \"react-notifications-component\";\nimport { Badge, Button, Input, Spinner } from \"reactstrap\";\nimport {\n  EnglishCertificateType,\n  TestQuestionFragment,\n  useRemoveTestQuestionMutation,\n  useUpdateTestQuestionMutation,\n} from \"../../../../../schema/schema\";\nimport { notificationAdd } from \"../../../utils/Notification\";\nimport ModalDelete from \"../../Modal/Delete\";\nimport { QuestionContext } from \"../QuestionContext\";\n\ninterface ListQuestionExam {\n  questions?: TestQuestionFragment[];\n  partId: string;\n  refetchTestQuestions?: any;\n}\nconst ListQuestionExam: React.FC<ListQuestionExam> = ({\n  questions,\n  partId,\n  refetchTestQuestions,\n}) => {\n  const [isOpenModalDelete, setIsOpenModalDelete] = React.useState(false);\n  const questionContext = React.useContext(QuestionContext);\n  const notification = notificationAdd(\"Question\", \"Updated\");\n  const [\n    updateTestQuestionMutation,\n    updateTestQuestionMutationResult,\n  ] = useUpdateTestQuestionMutation();\n  const [\n    removeTestQuestionMutation,\n    removeTestQuestionMutationResult,\n  ] = useRemoveTestQuestionMutation();\n\n  const [idRemove, setIdRemove] = React.useState(\"\");\n  const removeTestQuestion = () => {\n    removeTestQuestionMutation({\n      variables: {\n        id: idRemove,\n      },\n    });\n  };\n\n  React.useEffect(() => {\n    if (removeTestQuestionMutationResult.data?.removeTestQuestion) {\n      refetchTestQuestions && refetchTestQuestions();\n      const notificationD = notificationAdd(\"Question\", \"Deleted\", \"danger\");\n      store.addNotification(notificationD);\n    }\n    if (updateTestQuestionMutationResult.data?.updateTestQuestion) {\n      refetchTestQuestions && refetchTestQuestions();\n      store.addNotification(notification);\n    }\n  }, [\n    removeTestQuestionMutationResult.loading,\n    updateTestQuestionMutationResult.loading,\n  ]);\n\n  return (\n    <React.Fragment>\n      <div className=\"d-flex px-2 justify-content-between align-items-center\">\n        <span\n          style={{ width: \"10%\" }}\n          className=\"font-10 text-primary text-center font-weight-semi\"\n        >\n          Order\n        </span>\n        <span\n          style={{ width: \"35%\" }}\n          className=\"font-10 text-primary text-center font-weight-semi\"\n        >\n          Question Name\n        </span>\n        <span\n          style={{ width: \"15%\" }}\n          className=\"font-10 text-primary text-center font-weight-semi\"\n        >\n          Certificate\n        </span>\n        <span\n          style={{ width: \"25%\" }}\n          className=\"font-10 text-primary text-center font-weight-semi\"\n        >\n          Question Type\n        </span>\n        <span\n          style={{ width: \"15%\" }}\n          className=\"font-10 text-primary text-center font-weight-semi\"\n        >\n          Action\n        </span>\n      </div>\n      <div>\n        <React.Fragment>\n          {questions &&\n            questions.map((q, q_index) => {\n              let q_order = q.displayOrder;\n\n              if (q.part.id === partId) {\n                return (\n                  <React.Fragment>\n                    <div\n                      className=\"d-flex px-2 justify-content-between align-items-center\"\n                      key={q_index}\n                    >\n                      <span\n                        style={{ width: \"10%\" }}\n                        className=\"d-flex font-10 text-center text-primary font-weight-semi\"\n                      >\n                        <Input\n                          key={q.id}\n                          defaultValue={q.displayOrder}\n                          type=\"number\"\n                          onChange={(e) => {\n                            q_order = parseInt(e.target.value);\n                          }}\n                        />\n                        <Button\n                          className=\"btn-icon btn-round ml-1 my-0\"\n                          color=\"info\"\n                          size=\"sm\"\n                          type=\"button\"\n                          onClick={async (e) => {\n                            e.preventDefault();\n                            await updateTestQuestionMutation({\n                              variables: {\n                                data: {\n                                  id: q.id,\n                                  displayOrder: q_order,\n                                },\n                              },\n                            });\n                          }}\n                        >\n                          <i className=\"now-ui-icons ui-1_check\"></i>\n                        </Button>\n                      </span>\n                      <span\n                        style={{ width: \"35%\" }}\n                        className=\"font-10 text-center text-primary font-weight-semi\"\n                      >\n                        {q.question.questionName}\n                      </span>\n                      <span style={{ width: \"15%\" }} className=\"text-center\">\n                        {q.question.certificateType ===\n                        EnglishCertificateType.Toeic ? (\n                          <Badge color=\"primary\">\n                            {q.question.certificateType}\n                          </Badge>\n                        ) : (\n                          <Badge color=\"brand\">\n                            {q.question.certificateType}\n                          </Badge>\n                        )}\n                      </span>\n                      <span\n                        style={{ width: \"25%\" }}\n                        className=\"font-10 text-primary text-center\"\n                      >\n                        {q.question.questionType}{\" \"}\n                        {q.question.questionGroups.length > 0 && (\n                          <span className=\"font-weight-bold\">[Group]</span>\n                        )}\n                      </span>\n                      <div\n                        className=\"d-flex justify-content-center\"\n                        style={{ width: \"15%\" }}\n                      >\n                        <Button\n                          className=\"btn btn-sm mr-1 btn-warning btn-icon btn-round\"\n                          onClick={() => {\n                            questionContext.setQuestionIdModal(q.question.id);\n                            questionContext.setIsOpenModalCreateQuestion(true);\n                          }}\n                        >\n                          <i className=\"now-ui-icons ui-2_settings-90\"></i>\n                        </Button>\n                        <Button\n                          className=\"btn-icon btn-round text-center\"\n                          color=\"danger\"\n                          size=\"sm\"\n                          type=\"button\"\n                          onClick={() => {\n                            setIdRemove(q.id);\n                            setIsOpenModalDelete(true);\n                          }}\n                        >\n                          <i className=\"now-ui-icons ui-1_simple-remove\"></i>\n                        </Button>\n                      </div>\n                    </div>\n                    {q.question.questionGroups.length > 0 && (\n                      <div\n                        className=\"py-2\"\n                        css={css`\n                          background: rgba(0, 0, 0, 0.1);\n                        `}\n                      >\n                        {q.question.questionGroups.map((q_group, index_g) => {\n                          return (\n                            <div\n                              className=\"d-flex px-2 justify-content-between align-items-center\"\n                              key={`group` + index_g}\n                            >\n                              <span style={{ width: \"10%\", height: \"15px\" }}>\n                                <div className=\"border-bottom border-left border-primary w-50 mx-auto h-100\"></div>\n                              </span>\n                              <span\n                                style={{ width: \"35%\" }}\n                                className=\"font-10 text-center text-primary font-weight-semi\"\n                              >\n                                {q_group.questionName}\n                              </span>\n                              <span\n                                style={{ width: \"15%\" }}\n                                className=\"text-center\"\n                              >\n                                {q_group.certificateType ===\n                                EnglishCertificateType.Toeic ? (\n                                  <Badge color=\"primary\">\n                                    {q_group.certificateType}\n                                  </Badge>\n                                ) : (\n                                  <Badge color=\"brand\">\n                                    {q_group.certificateType}\n                                  </Badge>\n                                )}\n                              </span>\n                              <span\n                                style={{ width: \"25%\" }}\n                                className=\"font-10 text-primary text-center\"\n                              >\n                                {q_group.questionType}\n                              </span>\n                              <span style={{ width: \"15%\" }}></span>\n                            </div>\n                          );\n                        })}\n                      </div>\n                    )}\n                  </React.Fragment>\n                );\n              }\n            })}\n        </React.Fragment>\n        <ModalDelete\n          isOpen={isOpenModalDelete}\n          onClose={setIsOpenModalDelete}\n          callback={removeTestQuestion}\n          loading={removeTestQuestionMutationResult.loading}\n        />\n      </div>{\" \"}\n    </React.Fragment>\n  );\n};\n\nexport default ListQuestionExam;\n","import React from \"react\";\nimport {\n  PartFragment,\n  SkillsType,\n  NewTestInput,\n  TestQuestionFragment,\n  TestFragment,\n  AudioSecondsInput,\n  MediaType,\n  PartAndAudioSeconds,\n} from \"../../../../../schema/schema\";\nimport {\n  Button,\n  Row,\n  Col,\n  Form,\n  FormGroup,\n  Input,\n} from \"reactstrap\";\nimport { useFormik } from \"formik\";\nimport ErrorMessage from \"../../Error\";\nimport { ButtonCreateQuestion } from \"../../ButtonQuestion/ButtonCreateQuestion\";\nimport { QuestionContext } from \"../QuestionContext\";\nimport { notificationAdd } from \"../../../utils/Notification\";\nimport { store } from \"react-notifications-component\";\nimport _ from \"lodash\";\nimport * as yup from \"yup\";\nimport { Link } from \"react-router-dom\";\nimport AudioUpload from \"../../AudioUploader\";\nimport { ButtonAddPart } from \"../../ButtonQuestion/ButtonAddPart\";\nimport ListQuestionExam from \"./ListQuestionExam\";\ninterface ExamProps {\n  dataParts?: PartFragment[];\n  skillType: SkillsType;\n  questions?: TestQuestionFragment[];\n  refetchTestQuestions?: any;\n  testData?: TestFragment;\n  refetchTest?: any;\n}\n\nconst Exam: React.FC<ExamProps> = ({\n  dataParts,\n  skillType,\n  questions,\n  refetchTestQuestions,\n  testData,\n}) => {\n  const questionContext = React.useContext(QuestionContext);\n  const notification = notificationAdd(\"Test\", \"Update\");\n  const [partAndAudioSeconds, setPartAndAudioSeconds] = React.useState<\n    AudioSecondsInput[]\n  >([]);\n\n\n\n  let partAndAudioSecondsDefault: PartAndAudioSeconds[] = [];\n  React.useEffect(() => {\n    if (testData?.partAndAudioSecs) {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      partAndAudioSecondsDefault = testData?.partAndAudioSecs.map((p) => {\n        const { __typename, ...data } = p;\n        return data;\n      });\n    }\n    setPartAndAudioSeconds(partAndAudioSecondsDefault);\n  }, [dataParts]);\n  let initialValues: NewTestInput = {\n    id: testData?.id,\n    certificateType: testData?.certificateType,\n    explaination: testData?.explaination || \"\",\n    testName: testData?.testName!,\n    skillType: testData?.skillType,\n    partAndAudioSecs:\n      partAndAudioSeconds.length > 0\n        ? partAndAudioSeconds\n        : partAndAudioSecondsDefault,\n    audioUrl: testData?.audioUrl,\n  };\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: initialValues,\n    validationSchema: yup.object().shape({\n      testName: yup.string().required(\"Test Name is a required field\"),\n    }),\n    onSubmit: async (values) => {\n      const result = await questionContext.updateTestMutation({\n        variables: {\n          data: values,\n        },\n      });\n      if (result.data?.updateTest) {\n        store.addNotification(notification);\n        partAndAudioSeconds.sort((a, b) => a.displayOrder! - b.displayOrder!);\n        setPartAndAudioSeconds(partAndAudioSeconds);\n      }\n    },\n  });\n\n  return (\n    <Form onSubmit={formik.handleSubmit}>\n      <Row>\n      \n        <Col md={12}>\n          <div className=\"d-flex justify-content-between pl-5 align-items-end\">\n            <FormGroup className=\"w-50\">\n              <label>Test Name</label>\n              <Input\n                placeholder=\"Test Name\"\n                name=\"testName\"\n                type=\"text\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.testName || \"\"}\n                className={formik.errors.testName && \"input-error\"}\n              />\n              <ErrorMessage message={formik.errors.testName} />\n            </FormGroup>\n\n            <div>\n              <Button\n                type=\"submit\"\n                className=\"bg-info font-weight-bold font-10\"\n              >\n                Submit\n              </Button>\n              <Link\n                to={`/admin/toeic/tests`}\n                className=\"bg-danger btn font-weight-bold font-10\"\n              >\n                Cancel\n              </Link>\n            </div>\n          </div>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <div className=\"w-50 pl-5 d-flex\">\n            \n            <FormGroup>\n              <label>Audio</label>\n              <Input placeholder=\"Chose file\" name=\"audioUrl\" type=\"hidden\" />\n              <AudioUpload\n                type={MediaType.Audio}\n                url={testData?.audioUrl}\n                onChange={(e: string) => {\n                  formik.setFieldValue(\"audioUrl\", e);\n                }}\n                onClick={() => {\n                  formik.setFieldValue(\"audioUrl\", \"\");\n                }}\n              />\n            </FormGroup>\n          </div>\n         \n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <ul className=\"list-style-none mt-4\">\n            {partAndAudioSeconds &&\n              partAndAudioSeconds.map((p, index: number) => {\n                  const part =\n                    dataParts && dataParts.find((part) => part.id === p.partId);\n                  return (\n                    <div key={index}>\n                      <li className=\"bg-primary d-flex justify-content-between align-items-center\">\n                        <h4 className=\"p-2 text-white my-0\">\n                          {part?.partName}\n                        </h4>\n                        <div className=\"ml-auto d-flex align-items-center pr-2\">\n                          {skillType === SkillsType.Listening && (\n                            <FormGroup className=\"width-15rem d-flex mr-4 justify-content-between align-items-center\">\n                              <label className=\"text-white font-10\">\n                                Audio Seconds\n                              </label>\n                              <Input\n                                placeholder=\"Seconds\"\n                                type=\"number\"\n                                onChange={async (e) => {\n                                  let res = _.cloneDeep(partAndAudioSeconds);\n                                  res = res.map((pp) => {\n                                    if (pp.partId === p.partId) {\n                                      pp.autdioSecs = parseInt(e.target.value);\n                                    }\n                                    return pp;\n                                  });\n                                  setPartAndAudioSeconds(res);\n                                  formik.setFieldValue(\n                                    \"partAndAudioSecs\",\n                                    partAndAudioSeconds\n                                  );\n                                }}\n                                value={\n                                  partAndAudioSeconds[index].autdioSecs || 0\n                                }\n                                onBlur={formik.handleBlur}\n                                className={`width-7rem bg-white`}\n                              />\n                            </FormGroup>\n                          )}\n                          <FormGroup className=\" d-flex mr-4 justify-content-between align-items-center\">\n                            <label className=\"text-white font-10\">Order</label>\n                            <Input\n                              placeholder=\"Order\"\n                              type=\"number\"\n                              onChange={async (e) => {\n                                let res = _.cloneDeep(partAndAudioSeconds);\n                                res = res.map((pp) => {\n                                  if (pp.partId === p.partId) {\n                                    pp.displayOrder = parseInt(e.target.value);\n                                  }\n                                  return pp;\n                                });\n                                setPartAndAudioSeconds(res);\n                                formik.setFieldValue(\n                                  \"partAndAudioSecs\",\n                                  partAndAudioSeconds\n                                );\n                              }}\n                              value={\n                                partAndAudioSeconds[index].displayOrder || 0\n                              }\n                              onBlur={formik.handleBlur}\n                              className={`ml-3 width-4rem bg-white`}\n                            />\n                          </FormGroup>\n                          <Button\n                            className=\"btn-icon btn-round text-center\"\n                            color=\"danger\"\n                            size=\"sm\"\n                            type=\"button\"\n                            onClick={async (e) => {\n                              e.preventDefault();\n                              const res = partAndAudioSeconds.filter(\n                                (pp) => pp.partId !== p.partId\n                              );\n                              setPartAndAudioSeconds(res);\n                              await questionContext.updateTestMutation({\n                                variables: {\n                                  data: {\n                                    partAndAudioSecs: res,\n                                    id: testData?.id,\n                                  },\n                                },\n                              });\n                            }}\n                          >\n                            <i className=\"now-ui-icons ui-1_simple-remove\"></i>\n                          </Button>\n                        </div>\n                      </li>\n                      <ButtonCreateQuestion partId={p.partId!} />\n                      \n                      <ListQuestionExam questions={questions} partId={p.partId!} refetchTestQuestions={refetchTestQuestions} />\n                    </div>\n                  );\n                })}\n            <div className=\"mb-2 bg-primary d-flex justify-content-between align-items-center pl-2\">\n              <ButtonAddPart />\n            </div>\n          </ul>\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n\nexport default Exam;\n","import React from \"react\";\nimport { Modal, ModalBody, Button } from \"reactstrap\";\nimport { SkillsType, TestQuestionInputId } from \"../../../../schema/schema\";\nimport CreateAndEditQuestion from \"./CreateAndEditQuestion\";\nimport { QuestionContext } from \"./QuestionContext\";\n\ninterface ModalCreateQuestionProps {\n  skillType: SkillsType;\n  refetchTestQuestions?: any;\n  dataTestQuestionInput: TestQuestionInputId;\n}\n\nconst ModalCreateQuestion: React.FC<ModalCreateQuestionProps> = ({\n  skillType,\n  refetchTestQuestions,\n  dataTestQuestionInput,\n}) => {\n  const questionContext = React.useContext(QuestionContext);\n  return (\n    <>\n      <Modal\n        className='px-4 mw-100 w-100 '\n        contentClassName=\"h-100\"\n        size=\"lg\"\n        centered\n        isOpen={questionContext.isOpenModalCreateQuestion}\n        toggle={() => questionContext.setIsOpenModalCreateQuestion(false)}\n        key={questionContext.isOpenModalCreateQuestion.toString()}\n      >\n        <div className=\"modal-header justify-content-center\">\n          <button\n            className=\"close\"\n            type=\"button\"\n            onClick={() => questionContext.setIsOpenModalCreateQuestion(false)}\n          >\n            <i className=\"now-ui-icons ui-1_simple-remove\"></i>\n          </button>\n          <h4 className=\"title title-up\">List of Questions</h4>\n        </div>\n        <ModalBody>\n          <CreateAndEditQuestion dataTestQuestionInput={dataTestQuestionInput} modal refetchTestQuestions={refetchTestQuestions}  skillType={skillType} />\n        </ModalBody>\n      </Modal>\n    </>\n  );\n};\n\nexport default ModalCreateQuestion;\n","import React from \"react\";\nimport {\n  CardHeader,\n  CardTitle,\n  CardBody,\n  Table,\n  Badge,\n  Button,\n  Label,\n  Input,\n} from \"reactstrap\";\nimport {\n  useGetPartsQuery,\n  EnglishCertificateType,\n  SkillsType,\n  PartFilterInput,\n  PartAndAudioSeconds,\n} from \"../../../../schema/schema\";\nimport { Link, useRouteMatch } from \"react-router-dom\";\nimport _ from \"lodash\";\nimport { QuestionContext } from \"./QuestionContext\";\nimport LazyLoad from \"../LazyLoad\";\ninterface ListPartProps {\n  setIconPills?: (val: string) => void;\n  modal?: boolean;\n  skillType?: SkillsType;\n  dataUpdateTest?: PartAndAudioSeconds[];\n  setDataUpdateTest?: (val: PartAndAudioSeconds[]) => void;\n}\n\nconst ListPart: React.FC<ListPartProps> = ({\n  setIconPills,\n  modal,\n  skillType,\n  dataUpdateTest,\n  setDataUpdateTest,\n}) => {\n  const match = useRouteMatch();\n  const questionContext = React.useContext(QuestionContext);\n  const partsFilter: PartFilterInput = {\n    certificateType: EnglishCertificateType.Toeic,\n    skillType,\n    partIds:\n      questionContext.partIds?.ids.length! > 0 ? questionContext.partIds : null,\n  };\n\n  const { data, loading, refetch } = useGetPartsQuery({\n    variables: {\n      data: partsFilter,\n    },\n  });\n\n  React.useEffect(() => {\n    setIconPills && setIconPills(\"part\");\n    refetch();\n  }, []);\n  const parts = data?.getParts.parts;\n  return (\n    <>\n      {!modal && (\n        <CardHeader>\n          <CardTitle tag=\"h4\">List of Parts</CardTitle>\n        </CardHeader>\n      )}\n      <LazyLoad\n        isHeightFull={modal ? true : false}\n        className=\"p-0\"\n        refetchQuery={refetch}\n        loading={loading}\n      >\n        <Table responsive>\n          <thead className=\"text-primary font-10\">\n            <tr>\n              {modal && (\n                <th\n                  className=\"form-check m-0 p-td-initial\"\n                  style={{ width: \"5%\" }}\n                >\n                  <Label check>\n                    <Input defaultChecked={false} o type=\"checkbox\"></Input>\n                    <span className=\"form-check-sign\"></span>\n                  </Label>\n                </th>\n              )}\n              {!modal && (\n                <th className=\"text-right\" style={{ width: \"5%\" }}></th>\n              )}\n              <th className=\"text-center font-weight-semi\">Part Name</th>\n              <th className=\"text-center font-weight-semi\">Certificate</th>\n              <th className=\"text-center font-weight-semi\">Skill</th>\n              <th className=\"text-center font-weight-semi\">Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {parts &&\n              parts.map((part, index) => {\n                return (\n                  <tr key={index}>\n                    {modal && (\n                      <td className=\"form-check m-0 p-td-initial\">\n                        <Label check>\n                          <Input\n                            type=\"checkbox\"\n                            onChange={async (e) => {\n                              if (e.target.checked) {\n                                const data: PartAndAudioSeconds = {\n                                  partId: part.id,\n                                  autdioSecs: 0,\n                                  displayOrder: 0,\n                                };\n                                setDataUpdateTest!([...dataUpdateTest!, data]);\n                              } else {\n                                setDataUpdateTest!(\n                                  dataUpdateTest!.filter(\n                                    (d) => d.partId !== part.id\n                                  )\n                                );\n                              }\n                            }}\n                          />\n                          <span className=\"form-check-sign\"></span>\n                        </Label>\n                      </td>\n                    )}\n                    {!modal && <td>{index + 1}</td>}\n                    <td className=\"text-left font-weight-semi\">\n                      {part.partName}\n                    </td>\n                    <td className=\"text-center\">\n                      {part.certificateType === EnglishCertificateType.Toeic ? (\n                        <Badge color=\"primary\">{part.certificateType}</Badge>\n                      ) : (\n                        <Badge color=\"brand\">{part.certificateType}</Badge>\n                      )}\n                    </td>\n                    <td className=\"text-center\">\n                      {part.skillType === SkillsType.Reading ? (\n                        <Badge color=\"success\">{part.skillType}</Badge>\n                      ) : (\n                        <Badge color=\"info\">{part.skillType}</Badge>\n                      )}\n                    </td>\n                    <td className=\"text-center\">\n                      <Button\n                        className=\"btn-icon btn-round mr-1\"\n                        color=\"info\"\n                        size=\"sm\"\n                        type=\"button\"\n                      >\n                        <i className=\"now-ui-icons users_single-02\"></i>\n                      </Button>\n                      <Link\n                        className=\"btn btn-sm mr-1 btn-warning btn-icon btn-round\"\n                        to={`${match.url}/${part.id}/edit`}\n                      >\n                        <i className=\"now-ui-icons ui-2_settings-90\"></i>\n                      </Link>\n                      <Button\n                        className=\"btn-icon btn-round\"\n                        color=\"danger\"\n                        size=\"sm\"\n                        type=\"button\"\n                      >\n                        <i className=\"now-ui-icons ui-1_simple-remove\"></i>\n                      </Button>\n                    </td>\n                  </tr>\n                );\n              })}\n          </tbody>\n        </Table>\n      </LazyLoad>\n    </>\n  );\n};\n\nexport default ListPart;\n","import React from \"react\";\nimport { Modal, ModalBody, Button, Spinner } from \"reactstrap\";\nimport {\n  AudioSecondsInput,\n  PartAndAudioSeconds,\n  PartFragment,\n  PartIdsInput,\n  SkillsType,\n} from \"../../../../schema/schema\";\nimport ListPart from \"./ListPart\";\nimport { QuestionContext } from \"./QuestionContext\";\n\ninterface ModalPartProps {\n  skillType: SkillsType;\n  dataParts?: PartFragment[];\n  partIds?: PartIdsInput;\n  partAndAudioSecs?: PartAndAudioSeconds[] | null;\n  testId?: string;\n  refechParts?: any;\n}\n\nconst ModalPart: React.FC<ModalPartProps> = ({\n  skillType,\n  dataParts,\n  partIds,\n  partAndAudioSecs,\n  testId,\n  refechParts\n}) => {\n  const questionContext = React.useContext(QuestionContext);\n  const [dataUpdateTest, setDataUpdateTest] = React.useState<PartAndAudioSeconds[]>([]);\n  \n  React.useEffect(() => {\n    console.log('partAndAudioSecs', partAndAudioSecs)\n    if (partAndAudioSecs && partAndAudioSecs?.length > 0) {\n      let hello : PartAndAudioSeconds[] = [];\n      partAndAudioSecs.map((p) => {\n        const { __typename, ...data } = p;\n        hello.push(data);\n      });\n      setDataUpdateTest(hello);\n    }\n  },[partAndAudioSecs])\n  \n  // console.log('AAAAA', dataUpdateTest)\n//   partIds &&\n//     partIds.ids.map((pId) => {\n//       const data: PartAndAudioSeconds = {\n//         partId: pId,\n//         autdioSecs: 0,\n//         displayOrder: 0,\n//       };\n//       dataUpdateTest.push(data);\n//     });\n  React.useEffect(() => {\n    questionContext.setIsOpenModalAddPart(false);\n  },[questionContext.updateTestMutationResult.loading])\n\n  return (\n    <>\n      <Modal\n        className=\"height-modal-80vh\"\n        contentClassName=\"h-100\"\n        size=\"lg\"\n        centered\n        isOpen={questionContext.isOpenModalAddPart}\n        toggle={() => questionContext.setIsOpenModalAddPart(false)}\n      >\n        <div className=\"modal-header justify-content-center\">\n          <button\n            className=\"close\"\n            type=\"button\"\n            onClick={() => questionContext.setIsOpenModalAddPart(false)}\n          >\n            <i className=\"now-ui-icons ui-1_simple-remove\"></i>\n          </button>\n          <h4 className=\"title title-up\">List of Parts</h4>\n        </div>\n        <ModalBody>\n          <ListPart modal skillType={skillType} dataUpdateTest={dataUpdateTest} setDataUpdateTest={setDataUpdateTest}/>\n        </ModalBody>\n        <div className=\"modal-footer\">\n          <Button\n            className=\"ml-auto\"\n            color=\"info\"\n            type=\"button\"\n            disabled={dataUpdateTest.length > 0 ? false : true}\n            onClick={async () => {\n                dataUpdateTest.length > 0 &&\n                questionContext.updateTestMutation({\n                  variables: {\n                    data: {\n                      partAndAudioSecs: dataUpdateTest,\n                      id: testId,\n                    },\n                  },\n                });\n            }}\n          >\n            {!questionContext.updateTestMutationResult.loading ? (\n              \"Add Parts\"\n            ) : (\n              <Spinner color=\"primary\" />\n            )}\n          </Button>\n        </div>\n      </Modal>\n    </>\n  );\n};\n\nexport default ModalPart;\n","import React from \"react\";\nimport {\n  Row,\n  Col,\n  Card,\n  CardHeader,\n  CardBody\n} from \"reactstrap\";\nimport {\n  SkillsType,\n  QuestionFragment,\n  TestFragment, TestQuestionInputId, useGetTestQuestionsLazyQuery, useGetTestLazyQuery, PartFragment, useGetPartsFromIdsLazyQuery, PartIdsInput\n} from \"../../../../schema/schema\";\nimport ModalListQuestions from \"./ModalListQuestions\";\nimport Exam from \"./TemplateCreateTest/Exam\";\nimport ModalCreateQuestion from \"./ModalCreateQuestion\";\nimport { useParams } from \"react-router-dom\";\nimport { QuestionContext } from \"./QuestionContext\";\nimport ModalPart from \"./ModalPart\";\n\n\n\nexport interface ArrayQuestionIds {\n  skillType: SkillsType,\n  questions?: (QuestionFragment & { partId: string })[]\n}\ninterface CreateAndEditTestProps {\n}\n\nconst CreateAndEditTest: React.FC<CreateAndEditTestProps> = ({ }) => {\n  const questionContext = React.useContext(QuestionContext);\n  const { id } = useParams();\n  // create and mark it draft\n  const [getTestQuery, getTestResponse] = useGetTestLazyQuery();\n\n  React.useEffect(() => {\n    id && getTestQuery({\n      variables: {\n        id,\n      }\n    })\n  }, [id])\n  let testData: TestFragment | undefined;\n  if (getTestResponse.data) {\n    testData = getTestResponse.data.test;\n  }\n  const dataTestQuestionInput: TestQuestionInputId = {\n    testId: testData && testData.id,\n    partId: questionContext.partId,\n  }\n  \n\n  const [testQuestionsQuery, testQuestionsResponse] = useGetTestQuestionsLazyQuery()\n  const [partsQuery, partsQueryResponse] = useGetPartsFromIdsLazyQuery()\n  const variablesTestQuestion = {\n    testId: id\n  }\n  React.useEffect(() => {\n    questionContext.setPartIds({\n      ids: []\n    })\n    if(testData && testData.partAndAudioSecs?.length){\n      const ids: string[] = [];\n      testData.partAndAudioSecs.map((p) => {\n        ids.push(p.partId!);\n        questionContext.setPartIds({\n          ids,\n        })\n      });\n    }\n  },[getTestResponse.data?.test])\n\n  React.useEffect(() => {\n    refetchTest();\n  },[questionContext.updateTestMutationResult.data])\n  React.useEffect(() => {\n    questionContext.partIds?.ids && questionContext.partIds?.ids.length > 0 && partsQuery({\n      variables: {\n        data: questionContext.partIds\n      }\n    })\n  },[questionContext.partIds?.ids.length])\n  React.useEffect(() => {\n    if (testData) {\n      return;\n    }\n    testQuestionsQuery({\n      variables: variablesTestQuestion,\n    })\n  }, [testData])\n  const refetchTestQuestions = () => {\n    testQuestionsResponse.refetch && testQuestionsResponse.refetch(variablesTestQuestion)\n  }\n  const refetchTest =  () => {\n    getTestResponse.refetch && getTestResponse.refetch({id})\n  }\n\n  const refechParts = () => {\n    partsQueryResponse.refetch && partsQueryResponse.refetch({data: questionContext.partIds})\n  }\n  const testQuestions = testQuestionsResponse.data?.getTestQuestions;\n  if (getTestResponse.loading) {\n    return <>{'...loading'}</>\n  }\n  const skillType = testData?.skillType!;\n  const dataParts = partsQueryResponse.data?.getPartsFromIds;\n  const partAndAudioSecs = testData?.partAndAudioSecs;\n  return (\n    <Card>\n      <CardHeader className=\"d-flex justify-content-between align-items-center\">\n        <h5 className=\"title\">Create Test {skillType}</h5>\n      </CardHeader>\n      <CardBody>\n        <Row>\n          <Col sm=\"12\">\n            <Exam\n              dataParts={dataParts}\n              skillType={skillType}\n              questions={testQuestions}\n              refetchTestQuestions={refetchTestQuestions}\n              testData={testData}\n              refetchTest={refetchTest}\n            />\n          </Col>\n        </Row>\n      </CardBody>\n      <ModalListQuestions\n        skillType={skillType}\n        refetchTestQuestions={refetchTestQuestions}\n        dataTestQuestionInput={dataTestQuestionInput}\n      />\n      <ModalCreateQuestion\n        skillType={skillType}\n        refetchTestQuestions={refetchTestQuestions}\n        dataTestQuestionInput={dataTestQuestionInput}\n      />\n      <ModalPart\n        skillType={skillType}\n        dataParts={dataParts}\n        partIds={questionContext.partIds}\n        partAndAudioSecs={partAndAudioSecs}\n        refechParts={refechParts}\n        testId={testData?.id}\n      />\n    </Card>\n  );\n};\n\nexport default CreateAndEditTest;\n","import React from \"react\";\nimport {\n  CardHeader,\n  CardTitle,\n  Table,\n  Badge,\n  Button,\n  Label,\n  Input,\n} from \"reactstrap\";\nimport {\n  EnglishCertificateType,\n  SkillsType,\n  TestIdsInput,\n  useGetTestsQuery,\n  useRemoveTestMutation,\n  useUpdateTestMutation,\n} from \"../../../../schema/schema\";\nimport { Link } from \"react-router-dom\";\nimport ModalDelete from \"../Modal/Delete\";\nimport LazyLoad from \"../LazyLoad\";\ninterface ListTestProps {\n  setIconPills?: (val: string) => void;\n  modal?: boolean;\n  setTestIds?: (val: TestIdsInput) => void;\n  testIds?: TestIdsInput;\n  testIdsForget?: string[];\n}\n\nconst ListTest: React.FC<ListTestProps> = ({\n  setIconPills,\n  modal,\n  setTestIds,\n  testIds,\n  testIdsForget,\n}) => {\n  const [isOpenModalDelete, setIsOpenModalDelete] = React.useState(false);\n  const [testIdRemoved, setTestRemove] = React.useState(\"\");\n  const testsQuery = useGetTestsQuery({\n    variables: {\n      data: {\n        certificateType: EnglishCertificateType.Toeic,\n        testIds: {\n          ids: testIdsForget || [],\n        },\n      },\n    },\n  });\n  const [\n    updateTestMutation,\n    updateTestMutationResult,\n  ] = useUpdateTestMutation();\n  React.useEffect(() => {\n    setIconPills && setIconPills(\"tests\");\n    testsQuery.refetch();\n  }, []);\n\n  const [\n    removeTestMutation,\n    removeTestMutationResult,\n  ] = useRemoveTestMutation();\n\n  const removeTest = async () => {\n    await removeTestMutation({\n      variables: {\n        id: testIdRemoved,\n      },\n    });\n  };\n\n  const fetchMoreTests = React.useCallback((): void => {\n    if (\n      testsQuery.loading ||\n      !testsQuery.data ||\n      !testsQuery.data.getTests ||\n      !testsQuery.data.getTests.nextCursor\n    )\n      return;\n    testsQuery.fetchMore({\n      variables: {\n        data: {\n          certificateType: EnglishCertificateType.Toeic,\n          testIds: {\n            ids: testIdsForget || [],\n          },\n          cursor: testsQuery.data && testsQuery.data.getTests?.nextCursor,\n        },\n      },\n      updateQuery: (prev, next) => {\n        return {\n          ...prev,\n          getTests: {\n            ...prev.getTests,\n            tests: [\n              ...prev.getTests.tests,\n              ...(next.fetchMoreResult\n                ? next.fetchMoreResult.getTests.tests\n                : []),\n            ],\n            nextCursor: next?.fetchMoreResult?.getTests?.nextCursor ?? null,\n          },\n        };\n      },\n    });\n  }, [testIdsForget, testsQuery]);\n\n  React.useEffect(() => {\n    (updateTestMutationResult.data?.updateTest ||\n      removeTestMutationResult.data) &&\n      testsQuery.refetch();\n  }, [\n    updateTestMutationResult.loading,\n    removeTestMutationResult.loading,\n    updateTestMutationResult.data,\n    removeTestMutationResult.data,\n    testsQuery,\n  ]);\n  const tests = testsQuery.data?.getTests.tests;\n  return (\n    <>\n      {!modal && (\n        <CardHeader>\n          <CardTitle tag=\"h4\">List of Tests</CardTitle>\n        </CardHeader>\n      )}\n      <LazyLoad className='p-0' refetchQuery={fetchMoreTests} loading={testsQuery.loading}>\n        <Table responsive>\n          <thead className=\"text-primary font-10\">\n            <tr>\n              <th className=\"text-right\" style={{ width: \"5%\" }}></th>\n              <th className=\"text-center font-weight-semi\">Test Name</th>\n              <th className=\"text-center font-weight-semi\">Certificate</th>\n              <th className=\"text-center font-weight-semi\">Skill</th>\n              <th className=\"text-center font-weight-semi\">Status</th>\n              <th className=\"text-center font-weight-semi\">Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {tests &&\n              tests.map((test, index) => {\n                return (\n                  <tr key={index}>\n                    {modal && (\n                      <td className=\"form-check m-0 p-td-initial\">\n                        <Label check>\n                          <Input\n                            type=\"checkbox\"\n                            onChange={async (e) => {\n                              if (e.target.checked) {\n                                testIds &&\n                                  setTestIds &&\n                                  setTestIds({\n                                    ids: [...testIds.ids, test.id],\n                                  });\n                              } else {\n                                const res = testIds?.ids.filter(\n                                  (t) => t !== test.id\n                                );\n                                res &&\n                                  setTestIds &&\n                                  setTestIds({\n                                    ids: res,\n                                  });\n                              }\n                            }}\n                          />\n                          <span className=\"form-check-sign\"></span>\n                        </Label>\n                      </td>\n                    )}\n                    {!modal && <td>{index + 1}</td>}\n                    <td className=\"text-left font-weight-semi\">\n                      <Link\n                        to={`create-test-toeic/${test.skillType.toLowerCase()}/${\n                          test.id\n                        }`}\n                      >\n                        {test.testName}\n                      </Link>\n                    </td>\n                    <td className=\"text-center\">\n                      {test.certificateType === EnglishCertificateType.Toeic ? (\n                        <Badge color=\"primary\">{test.certificateType}</Badge>\n                      ) : (\n                        <Badge color=\"brand\">{test.certificateType}</Badge>\n                      )}\n                    </td>\n                    <td className=\"text-center\">\n                      {test.skillType === SkillsType.Reading ? (\n                        <Badge color=\"success\">{test.skillType}</Badge>\n                      ) : (\n                        <Badge color=\"info\">{test.skillType}</Badge>\n                      )}\n                    </td>\n                    <td className=\"text-center font-weight-semi\">\n                      {test.isPublished ? \"Published\" : \"Draft\"}\n                    </td>\n                    <td className=\"text-center\">\n                      <Button\n                        className=\"btn-icon btn-round mr-1\"\n                        color=\"info\"\n                        size=\"sm\"\n                        type=\"button\"\n                        onClick={async () => {\n                          await updateTestMutation({\n                            variables: {\n                              data: {\n                                id: test.id,\n                                isPublished: !test.isPublished,\n                                testName: test.testName,\n                              },\n                            },\n                          });\n                        }}\n                      >\n                        <i className=\"now-ui-icons users_single-02\"></i>\n                      </Button>\n                      <Link\n                        className=\"btn btn-sm mr-1 btn-warning btn-icon btn-round\"\n                        to={`create-test-toeic/${test.skillType}/${test.id}`}\n                      >\n                        <i className=\"now-ui-icons ui-2_settings-90\"></i>\n                      </Link>\n                      <Button\n                        className=\"btn-icon btn-round\"\n                        color=\"danger\"\n                        size=\"sm\"\n                        type=\"button\"\n                        onClick={() => {\n                          setTestRemove(test.id);\n                          setIsOpenModalDelete(true);\n                        }}\n                      >\n                        <i className=\"now-ui-icons ui-1_simple-remove\"></i>\n                      </Button>\n                    </td>\n                  </tr>\n                );\n              })}\n          </tbody>\n        </Table>\n        <ModalDelete\n          isOpen={isOpenModalDelete}\n          onClose={setIsOpenModalDelete}\n          callback={removeTest}\n          loading={removeTestMutationResult.loading}\n        />\n      </LazyLoad>\n    </>\n  );\n};\n\nexport default ListTest;\n","import React from \"react\";\nimport {\n  CardHeader,\n  CardTitle,\n  Table,\n  Badge,\n  Button,\n} from \"reactstrap\";\nimport {\n  EnglishCertificateType,\n  useGetTestCategoriesQuery,\n  useRemoveTestCategoryMutation,\n  useUpdateTestCategoryMutation,\n} from \"../../../../schema/schema\";\nimport { Link } from \"react-router-dom\";\nimport ModalDelete from \"../Modal/Delete\";\nimport LazyLoad from \"../LazyLoad\";\ninterface ListTestCategoryProps {\n  setIconPills: (val: string) => void;\n}\n\nconst ListTestCategory: React.FC<ListTestCategoryProps> = ({\n  setIconPills,\n}) => {\n  const [isOpenModalDelete, setIsOpenModalDelete] = React.useState(false);\n  const testCategoriesQuery = useGetTestCategoriesQuery({\n    variables: {\n      data: {\n        certificateType: EnglishCertificateType.Toeic,\n      },\n    },\n  });\n\n  const [\n    updateTestCategoryMutation,\n    updateTestCategoryMutationResult,\n  ] = useUpdateTestCategoryMutation();\n  const [\n    removeTestCategoryMutation,\n    removeTestCategoryMutationResult,\n  ] = useRemoveTestCategoryMutation();\n\n  const fetchMoreTestCategories = React.useCallback((): void => {\n    if (\n      testCategoriesQuery.loading ||\n      !testCategoriesQuery.data ||\n      !testCategoriesQuery.data.getTestCategories ||\n      !testCategoriesQuery.data.getTestCategories.nextCursor\n    )\n      return;\n    testCategoriesQuery.fetchMore({\n      variables: {\n        data: {\n          certificateType: EnglishCertificateType.Toeic,\n          cursor:\n            testCategoriesQuery.data &&\n            testCategoriesQuery.data.getTestCategories?.nextCursor,\n        },\n      },\n      updateQuery: (prev, next) => {\n        return {\n          ...prev,\n          getTestCategories: {\n            ...prev.getTestCategories,\n            testCategories: [\n              ...prev.getTestCategories.testCategories,\n              ...(next.fetchMoreResult\n                ? next.fetchMoreResult.getTestCategories.testCategories\n                : []),\n            ],\n            nextCursor:\n              next?.fetchMoreResult?.getTestCategories?.nextCursor ?? null,\n          },\n        };\n      },\n    });\n  }, [testCategoriesQuery]);\n\n  const [testCategoryIdRemoved, setTestCategoryIdRemoved] = React.useState(\"\");\n  const removeTestCategory = async () => {\n    await removeTestCategoryMutation({\n      variables: {\n        id: testCategoryIdRemoved,\n      },\n    });\n  };\n  React.useEffect(() => {\n    setIconPills(\"test-categories\");\n    testCategoriesQuery.refetch();\n  }, []);\n\n  React.useEffect(() => {\n    updateTestCategoryMutationResult.data?.updateTestCategory &&\n      testCategoriesQuery.refetch();\n    if (removeTestCategoryMutationResult.data?.removeTestCategory) {\n      testCategoriesQuery.refetch();\n      setIsOpenModalDelete(false);\n    }\n  }, [\n    updateTestCategoryMutationResult.loading,\n    removeTestCategoryMutationResult.loading,\n    updateTestCategoryMutationResult.data,\n    removeTestCategoryMutationResult.data,\n    testCategoriesQuery,\n  ]);\n  const testCategories =\n    testCategoriesQuery.data?.getTestCategories.testCategories;\n  return (\n    <>\n      <CardHeader>\n        <CardTitle tag=\"h4\">List of Tests</CardTitle>\n      </CardHeader>\n      <LazyLoad className='p-0' refetchQuery={fetchMoreTestCategories} loading={testCategoriesQuery.loading}>\n        <Table responsive>\n          <thead className=\"text-primary font-10\">\n            <tr>\n              <th className=\"text-right\" style={{ width: \"5%\" }}></th>\n              <th className=\"text-center font-weight-semi\">Test Name</th>\n              <th className=\"text-center font-weight-semi\">Certificate</th>\n              <th className=\"text-center font-weight-semi\">Status</th>\n              <th className=\"text-center font-weight-semi\">Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {testCategories &&\n              testCategories.map((testCategory, index) => {\n                return (\n                  <tr key={index}>\n                    <td>{index + 1}</td>\n                    <td className=\"text-left font-weight-semi\">\n                      <Link\n                        to={`create-test-category/${testCategory.certificateType.toLowerCase()}/${\n                          testCategory.id\n                        }`}\n                      >\n                        {testCategory.testCategoryName}\n                      </Link>\n                    </td>\n                    <td className=\"text-center\">\n                      {testCategory.certificateType ===\n                      EnglishCertificateType.Toeic ? (\n                        <Badge color=\"primary\">\n                          {testCategory.certificateType}\n                        </Badge>\n                      ) : (\n                        <Badge color=\"brand\">\n                          {testCategory.certificateType}\n                        </Badge>\n                      )}\n                    </td>\n                    <td className=\"text-center font-weight-semi\">\n                      {testCategory.isPublished ? \"Published\" : \"Draft\"}\n                    </td>\n                    <td className=\"text-center\">\n                      <Button\n                        className=\"btn-icon btn-round mr-1\"\n                        color=\"info\"\n                        size=\"sm\"\n                        type=\"button\"\n                        onClick={async () => {\n                          await updateTestCategoryMutation({\n                            variables: {\n                              data: {\n                                id: testCategory.id,\n                                isPublished: !testCategory.isPublished,\n                                testCategoryName: testCategory.testCategoryName,\n                              },\n                            },\n                          });\n                        }}\n                      >\n                        <i className=\"now-ui-icons users_single-02\"></i>\n                      </Button>\n                      <Link\n                        className=\"btn btn-sm mr-1 btn-warning btn-icon btn-round\"\n                        to={`create-test-category/${testCategory.certificateType.toLowerCase()}/${\n                          testCategory.id\n                        }`}\n                      >\n                        <i className=\"now-ui-icons ui-2_settings-90\"></i>\n                      </Link>\n                      <Button\n                        className=\"btn-icon btn-round\"\n                        color=\"danger\"\n                        size=\"sm\"\n                        type=\"button\"\n                        onClick={async () => {\n                          setTestCategoryIdRemoved(testCategory.id);\n                          setIsOpenModalDelete(true);\n                          console.log(\"isOpenModalDelete\", isOpenModalDelete);\n                        }}\n                      >\n                        <i className=\"now-ui-icons ui-1_simple-remove\"></i>\n                      </Button>\n                    </td>\n                  </tr>\n                );\n              })}\n          </tbody>\n        </Table>\n        <ModalDelete\n          isOpen={isOpenModalDelete}\n          callback={removeTestCategory}\n          loading={removeTestCategoryMutationResult.loading}\n        />\n      </LazyLoad>\n    </>\n  );\n};\n\nexport default ListTestCategory;\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from \"react\";\nimport { Link, useRouteMatch, Route, Switch, useHistory } from \"react-router-dom\";\nimport {\n  Card,\n  CardHeader,\n  CardBody,\n  Col,\n  Row,\n  Nav,\n  NavItem,\n} from \"reactstrap\";\nimport { EnglishCertificateType, NewTestCategoryInput, NewTestInput, SkillsType, useCreateTestCategoryMutation, useCreateTestMutation } from \"../../../../schema/schema\";\nimport ListPart from \"./ListPart\";\nimport ListQuestions from \"./ListQuestions\";\nimport ListTest from \"./ListTest\";\nimport ListTestCategory from \"./ListTestCategory\";\n// import { Route, Switch, Redirect } from \"react-router-dom\";\n// interface ToeicAdminProps {}\n\nconst TestPage: React.FC<{}> = () => {\n  const match = useRouteMatch();\n  const [iconPills, setIconPills] = React.useState(\"test-category\");\n  const [createTestMutation, resultCreateTestMutation] = useCreateTestMutation();\n  const [createTestCategory, resultCreateTestCategory] = useCreateTestCategoryMutation();\n  const time = new Date().getTime();\n  const dataCreateTest : NewTestInput = {\n    testName: 'Draft Test - ' + time,\n    isPublished: false,\n    audioUrl: '',\n    description: '',\n    explaination: '',\n    certificateType: EnglishCertificateType.Toeic,\n  }\n  const dataCreateCategory: NewTestCategoryInput = {\n    testCategoryName: 'Draft Test Category - ' + time,\n    certificateType: EnglishCertificateType.Toeic,\n    isPublished: false,\n  }\n  const history = useHistory();\n  const createTestClick = async (skillType: SkillsType) => {\n    await createTestMutation({\n      variables: {\n        data: {\n          ...dataCreateTest,\n          skillType\n        }\n      }\n    })\n  }\n  const createTestCategoryClick = async () => {\n    await createTestCategory({\n      variables: {\n        data: dataCreateCategory\n      }\n    })\n  }\n  React.useEffect(() => {\n    if(resultCreateTestMutation.data){\n      const id = resultCreateTestMutation.data.createTest.id\n      const path = `${match.url}/create-test-toeic/${resultCreateTestMutation.data.createTest.skillType.toLowerCase()}/${id}`;\n      history.push(path)\n    }\n  },[resultCreateTestMutation.data])\n\n  React.useEffect(() => {\n    if(resultCreateTestCategory.data){\n      const id = resultCreateTestCategory.data.createTestCategory.id\n      const path = `${match.url}/create-test-category/${id}`;\n      history.push(path)\n    }\n  },[resultCreateTestCategory.data])\n  return (\n    <Row>\n      <Col md={12}>\n        <div className=\"px-4 py-2 bg-white font-weight-semi font-10\">\n        <a className=\"btn-info btn text-white\"\n            onClick={async (e) => {\n              e.preventDefault()\n              await createTestCategoryClick();\n            }}\n          >\n            Create Test Category\n          </a>\n          <a className=\"btn-info btn text-white\"\n            onClick={async (e) => {\n              e.preventDefault()\n              await createTestClick(SkillsType.Reading);\n            }}\n          >\n            Create Test Reading\n          </a>\n          <a className=\"btn-info btn text-white\"\n            onClick={async (e) => {\n              e.preventDefault()\n              await createTestClick(SkillsType.Listening);\n            }}\n          >\n            Create Test Listening\n          </a>\n          <Link className=\"btn-info btn\" to={`${match.url}/create-part-toeic`}>\n            Create Part\n          </Link>\n          <Link\n            className=\"btn-info btn\"\n            to={`${match.url}/create-question-toeic`}\n          >\n            Create Question\n          </Link>\n        </div>\n      </Col>\n      <Col className=\"mt-4\">\n        <Card>\n          <CardHeader>\n            <Nav className=\"justify-content-center\" role=\"tablist\" tabs>\n              <NavItem>\n                <Link\n                  className={`${iconPills === \"test-categories\" ? \"active\" : \"\"} nav-link`}\n                  to={`${match.path}/test-categories`}\n                  onClick={(e) => {\n                    setIconPills(\"test-categories\");\n                  }}\n                >\n                  <i className=\"now-ui-icons objects_umbrella-13\"></i>\n                  Test Category\n                </Link>\n              </NavItem>\n              <NavItem>\n              <Link\n                  className={`${iconPills === \"tests\" ? \"active\" : \"\"} nav-link`}\n                  to={`${match.path}/tests`}\n                  onClick={(e) => {\n                    setIconPills(\"tests\");\n                  }}\n                >\n                  <i className=\"now-ui-icons shopping_shop\"></i>\n                  Test\n                </Link>\n              </NavItem>\n              <NavItem>\n                <Link\n                  className={`${iconPills === \"part\" ? \"active\" : \"\"} nav-link`}\n                  to={`${match.path}/part`}\n                  onClick={(e) => {\n                    setIconPills(\"part\");\n                  }}\n                >\n                  <i className=\"now-ui-icons shopping_shop\"></i>\n                  Part\n                </Link>\n              </NavItem>\n              <NavItem>\n              <Link\n                  className={`${iconPills === \"questions\" ? \"active\" : \"\"} nav-link`}\n                  to={`${match.path}/questions`}\n                  onClick={(e) => {\n                    setIconPills(\"part\");\n                  }}\n                >\n                  <i className=\"now-ui-icons shopping_shop\"></i>\n                  Questions\n                </Link>\n              </NavItem>\n            </Nav>\n          </CardHeader>\n          <CardBody>\n            <Switch>\n              <Route path={`${match.path}/part`}>\n                <ListPart setIconPills={setIconPills}/>\n              </Route>\n              <Route path={`${match.path}/questions`}>\n                <ListQuestions setIconPills={setIconPills}/>\n              </Route>\n              <Route path={`${match.path}/tests`}>\n                <ListTest setIconPills={setIconPills}/>\n              </Route>\n              <Route path={`${match.path}/test-categories`}>\n                <ListTestCategory setIconPills={setIconPills}/>\n              </Route>\n            </Switch>\n          </CardBody>\n        </Card>\n      </Col>\n    </Row>\n  );\n};\n\nexport default TestPage;\n","import React from \"react\";\nimport { Button } from \"reactstrap\";\nimport { QuestionContext } from \"../QuestionsAndTest/QuestionContext\";\ninterface ButtonAddQuestionProps {\n    testId?: string;\n  }\n\nexport const ButtonAddTest: React.FC<ButtonAddQuestionProps> = ({\n    \n  }) => {\n    const questionContext = React.useContext(QuestionContext);\n    return (\n      <div>\n        <Button\n          className=\"btn-icon btn-round mr-1 text-white\"\n          color=\"success\"\n          size=\"md\"\n          type=\"button\"\n          onClick={() => {\n            questionContext.setIsOpenModalAddTest(true);\n          }}\n        >\n          <i className=\"now-ui-icons ui-1_simple-add\"></i>\n        </Button>\n        <span className=\"font-weight-bold font-13 ml-2 text-black\">Add Test</span>\n      </div>\n    );\n  };\n  ","import React from \"react\";\nimport { Modal, ModalBody, Button, Spinner } from \"reactstrap\";\nimport {\n  TestFragment,\n  TestIdsInput,\n  useUpdateTestsMutation,\n} from \"../../../../schema/schema\";\nimport ListTest from \"./ListTest\";\nimport { QuestionContext } from \"./QuestionContext\";\n\ninterface ModalPartProps {\n  testCategoryId?: string;\n  refetchTestCategory?: any;\n  tests?: TestFragment[] | null;\n}\n\nconst ModalTest: React.FC<ModalPartProps> = ({\n  testCategoryId,\n  refetchTestCategory,\n  tests,\n}) => {\n  const questionContext = React.useContext(QuestionContext);\n\n  const [testIds, setTestIds] = React.useState<TestIdsInput>({ ids: [] });\n  const [testIdsForget, setTestIdsForget] = React.useState<string[]>([]);\n  const [\n    updateTestsMutation,\n    updateTestsMutationResult,\n  ] = useUpdateTestsMutation();\n  React.useEffect(() => {\n    questionContext.isOpenModalAddTest && setTestIds({ ids: [] });\n  }, [questionContext.isOpenModalAddTest]);\n\n  React.useEffect(() => {\n    const testIdsDefault =\n      tests &&\n      tests.map((t) => {\n        return t.id;\n      });\n    testIdsDefault && setTestIdsForget(testIdsDefault);\n  }, [tests]);\n\n  React.useEffect(() => {\n    if (updateTestsMutationResult.data?.updateTests) {\n      refetchTestCategory && refetchTestCategory();\n      questionContext.setIsOpenModalAddTest(false);\n    }\n  }, [updateTestsMutationResult.loading]);\n  return (\n    <>\n      <Modal\n        className=\"height-modal-80vh\"\n        contentClassName=\"h-100\"\n        size=\"lg\"\n        centered\n        isOpen={questionContext.isOpenModalAddTest}\n        toggle={() => questionContext.setIsOpenModalAddTest(false)}\n        zIndex={9999}\n      >\n        <div className=\"modal-header justify-content-center\">\n          <button\n            className=\"close\"\n            type=\"button\"\n            onClick={() => questionContext.setIsOpenModalAddTest(false)}\n          >\n            <i className=\"now-ui-icons ui-1_simple-remove\"></i>\n          </button>\n          <h4 className=\"title title-up\">List of Parts</h4>\n        </div>\n        <ModalBody>\n          <ListTest\n            modal\n            setTestIds={setTestIds}\n            testIds={testIds}\n            testIdsForget={testIdsForget}\n          />\n        </ModalBody>\n        <div className=\"modal-footer\">\n          <Button\n            className=\"ml-auto\"\n            color=\"info\"\n            type=\"button\"\n            disabled={testIds && testIds.ids.length > 0 ? false : true}\n            onClick={async () => {\n              testCategoryId &&\n                testIds &&\n                testIds.ids.length > 0 &&\n                (await updateTestsMutation({\n                  variables: {\n                    data: {\n                      testCategoryId,\n                      testIds,\n                    },\n                  },\n                }));\n            }}\n          >\n            {!updateTestsMutationResult.loading ? (\n              \"Add Tests\"\n            ) : (\n              <Spinner color=\"primary\" />\n            )}\n          </Button>\n        </div>\n      </Modal>\n    </>\n  );\n};\n\nexport default ModalTest;\n","/** @jsx jsx */\nimport { jsx, css } from \"@emotion/core\";\nimport React from \"react\";\nimport Lottie from \"react-lottie\";\nimport { Link } from \"react-router-dom\";\nimport { Button } from \"reactstrap\";\nimport loadingJson from \"../../../../assets/lotties/mini-loading.json\";\ninterface ButtonSubmitGroupProps {\n  onClick: () => void;\n  link: string;\n  loading?: boolean;\n}\nconst ButtonSubmitGroup: React.FC<ButtonSubmitGroupProps> = ({\n  onClick,\n  link,\n  loading,\n}) => {\n  const loadingAnimation = {\n    loop: true,\n    autoplay: true,\n    animationData: loadingJson,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  return (\n    <div\n      css={css`\n        .btn {\n          height: 40px;\n          max-width: 100px;\n        }\n      `}\n    >\n      <Button\n        type=\"button\"\n        className=\"bg-info font-weight-bold font-10\"\n        onClick={onClick}\n        disabled={loading}\n      >\n        {loading ? <Lottie options={loadingAnimation} /> : \"Submit\"}\n      </Button>\n      <Link\n        onClick={(e) => {\n          loading && e.preventDefault();\n        }}\n        to={link}\n        className=\"bg-danger btn font-weight-bold font-10\"\n      >\n        Cancel\n      </Link>\n    </div>\n  );\n};\n\nexport default ButtonSubmitGroup;\n","export const generateLink = (link: string) => {\n  const linkRemoved = removeAccents(link.toLowerCase());\n   const newLink = linkRemoved.replace(/[^a-z0-9 -]/g, '') // remove invalid chars\n    .replace(/\\s+/g, '-') // collapse whitespace and replace by -\n    .replace(/-+/g, '-'); // collapse dashes\n  return newLink;\n};\ninterface LatinMapProps {\n  [key: string]: string;\n}\ninterface LatiniseProps {\n  latin_map: LatinMapProps;\n}\nexport const removeAccents = (link: string): string => {\n  const Latinise: LatiniseProps = {\n    latin_map: {},\n  };\n  Latinise.latin_map = {\n    Á: \"A\",\n    Ă: \"A\",\n    Ắ: \"A\",\n    Ặ: \"A\",\n    Ằ: \"A\",\n    Ẳ: \"A\",\n    Ẵ: \"A\",\n    Ǎ: \"A\",\n    Â: \"A\",\n    Ấ: \"A\",\n    Ậ: \"A\",\n    Ầ: \"A\",\n    Ẩ: \"A\",\n    Ẫ: \"A\",\n    Ä: \"A\",\n    Ǟ: \"A\",\n    Ȧ: \"A\",\n    Ǡ: \"A\",\n    Ạ: \"A\",\n    Ȁ: \"A\",\n    À: \"A\",\n    Ả: \"A\",\n    Ȃ: \"A\",\n    Ā: \"A\",\n    Ą: \"A\",\n    Å: \"A\",\n    Ǻ: \"A\",\n    Ḁ: \"A\",\n    Ⱥ: \"A\",\n    Ã: \"A\",\n    Ꜳ: \"AA\",\n    Æ: \"AE\",\n    Ǽ: \"AE\",\n    Ǣ: \"AE\",\n    Ꜵ: \"AO\",\n    Ꜷ: \"AU\",\n    Ꜹ: \"AV\",\n    Ꜻ: \"AV\",\n    Ꜽ: \"AY\",\n    Ḃ: \"B\",\n    Ḅ: \"B\",\n    Ɓ: \"B\",\n    Ḇ: \"B\",\n    Ƀ: \"B\",\n    Ƃ: \"B\",\n    Ć: \"C\",\n    Č: \"C\",\n    Ç: \"C\",\n    Ḉ: \"C\",\n    Ĉ: \"C\",\n    Ċ: \"C\",\n    Ƈ: \"C\",\n    Ȼ: \"C\",\n    Ď: \"D\",\n    Ḑ: \"D\",\n    Ḓ: \"D\",\n    Ḋ: \"D\",\n    Ḍ: \"D\",\n    Ɗ: \"D\",\n    Ḏ: \"D\",\n    ǲ: \"D\",\n    ǅ: \"D\",\n    Đ: \"D\",\n    Ƌ: \"D\",\n    Ǳ: \"DZ\",\n    Ǆ: \"DZ\",\n    É: \"E\",\n    Ĕ: \"E\",\n    Ě: \"E\",\n    Ȩ: \"E\",\n    Ḝ: \"E\",\n    Ê: \"E\",\n    Ế: \"E\",\n    Ệ: \"E\",\n    Ề: \"E\",\n    Ể: \"E\",\n    Ễ: \"E\",\n    Ḙ: \"E\",\n    Ë: \"E\",\n    Ė: \"E\",\n    Ẹ: \"E\",\n    Ȅ: \"E\",\n    È: \"E\",\n    Ẻ: \"E\",\n    Ȇ: \"E\",\n    Ē: \"E\",\n    Ḗ: \"E\",\n    Ḕ: \"E\",\n    Ę: \"E\",\n    Ɇ: \"E\",\n    Ẽ: \"E\",\n    Ḛ: \"E\",\n    Ꝫ: \"ET\",\n    Ḟ: \"F\",\n    Ƒ: \"F\",\n    Ǵ: \"G\",\n    Ğ: \"G\",\n    Ǧ: \"G\",\n    Ģ: \"G\",\n    Ĝ: \"G\",\n    Ġ: \"G\",\n    Ɠ: \"G\",\n    Ḡ: \"G\",\n    Ǥ: \"G\",\n    Ḫ: \"H\",\n    Ȟ: \"H\",\n    Ḩ: \"H\",\n    Ĥ: \"H\",\n    Ⱨ: \"H\",\n    Ḧ: \"H\",\n    Ḣ: \"H\",\n    Ḥ: \"H\",\n    Ħ: \"H\",\n    Í: \"I\",\n    Ĭ: \"I\",\n    Ǐ: \"I\",\n    Î: \"I\",\n    Ï: \"I\",\n    Ḯ: \"I\",\n    İ: \"I\",\n    Ị: \"I\",\n    Ȉ: \"I\",\n    Ì: \"I\",\n    Ỉ: \"I\",\n    Ȋ: \"I\",\n    Ī: \"I\",\n    Į: \"I\",\n    Ɨ: \"I\",\n    Ĩ: \"I\",\n    Ḭ: \"I\",\n    Ꝺ: \"D\",\n    Ꝼ: \"F\",\n    Ᵹ: \"G\",\n    Ꞃ: \"R\",\n    Ꞅ: \"S\",\n    Ꞇ: \"T\",\n    Ꝭ: \"IS\",\n    Ĵ: \"J\",\n    Ɉ: \"J\",\n    Ḱ: \"K\",\n    Ǩ: \"K\",\n    Ķ: \"K\",\n    Ⱪ: \"K\",\n    Ꝃ: \"K\",\n    Ḳ: \"K\",\n    Ƙ: \"K\",\n    Ḵ: \"K\",\n    Ꝁ: \"K\",\n    Ꝅ: \"K\",\n    Ĺ: \"L\",\n    Ƚ: \"L\",\n    Ľ: \"L\",\n    Ļ: \"L\",\n    Ḽ: \"L\",\n    Ḷ: \"L\",\n    Ḹ: \"L\",\n    Ⱡ: \"L\",\n    Ꝉ: \"L\",\n    Ḻ: \"L\",\n    Ŀ: \"L\",\n    Ɫ: \"L\",\n    ǈ: \"L\",\n    Ł: \"L\",\n    Ǉ: \"LJ\",\n    Ḿ: \"M\",\n    Ṁ: \"M\",\n    Ṃ: \"M\",\n    Ɱ: \"M\",\n    Ń: \"N\",\n    Ň: \"N\",\n    Ņ: \"N\",\n    Ṋ: \"N\",\n    Ṅ: \"N\",\n    Ṇ: \"N\",\n    Ǹ: \"N\",\n    Ɲ: \"N\",\n    Ṉ: \"N\",\n    Ƞ: \"N\",\n    ǋ: \"N\",\n    Ñ: \"N\",\n    Ǌ: \"NJ\",\n    Ó: \"O\",\n    Ŏ: \"O\",\n    Ǒ: \"O\",\n    Ô: \"O\",\n    Ố: \"O\",\n    Ộ: \"O\",\n    Ồ: \"O\",\n    Ổ: \"O\",\n    Ỗ: \"O\",\n    Ö: \"O\",\n    Ȫ: \"O\",\n    Ȯ: \"O\",\n    Ȱ: \"O\",\n    Ọ: \"O\",\n    Ő: \"O\",\n    Ȍ: \"O\",\n    Ò: \"O\",\n    Ỏ: \"O\",\n    Ơ: \"O\",\n    Ớ: \"O\",\n    Ợ: \"O\",\n    Ờ: \"O\",\n    Ở: \"O\",\n    Ỡ: \"O\",\n    Ȏ: \"O\",\n    Ꝋ: \"O\",\n    Ꝍ: \"O\",\n    Ō: \"O\",\n    Ṓ: \"O\",\n    Ṑ: \"O\",\n    Ɵ: \"O\",\n    Ǫ: \"O\",\n    Ǭ: \"O\",\n    Ø: \"O\",\n    Ǿ: \"O\",\n    Õ: \"O\",\n    Ṍ: \"O\",\n    Ṏ: \"O\",\n    Ȭ: \"O\",\n    Ƣ: \"OI\",\n    Ꝏ: \"OO\",\n    Ɛ: \"E\",\n    Ɔ: \"O\",\n    Ȣ: \"OU\",\n    Ṕ: \"P\",\n    Ṗ: \"P\",\n    Ꝓ: \"P\",\n    Ƥ: \"P\",\n    Ꝕ: \"P\",\n    Ᵽ: \"P\",\n    Ꝑ: \"P\",\n    Ꝙ: \"Q\",\n    Ꝗ: \"Q\",\n    Ŕ: \"R\",\n    Ř: \"R\",\n    Ŗ: \"R\",\n    Ṙ: \"R\",\n    Ṛ: \"R\",\n    Ṝ: \"R\",\n    Ȑ: \"R\",\n    Ȓ: \"R\",\n    Ṟ: \"R\",\n    Ɍ: \"R\",\n    Ɽ: \"R\",\n    Ꜿ: \"C\",\n    Ǝ: \"E\",\n    Ś: \"S\",\n    Ṥ: \"S\",\n    Š: \"S\",\n    Ṧ: \"S\",\n    Ş: \"S\",\n    Ŝ: \"S\",\n    Ș: \"S\",\n    Ṡ: \"S\",\n    Ṣ: \"S\",\n    Ṩ: \"S\",\n    Ť: \"T\",\n    Ţ: \"T\",\n    Ṱ: \"T\",\n    Ț: \"T\",\n    Ⱦ: \"T\",\n    Ṫ: \"T\",\n    Ṭ: \"T\",\n    Ƭ: \"T\",\n    Ṯ: \"T\",\n    Ʈ: \"T\",\n    Ŧ: \"T\",\n    Ɐ: \"A\",\n    Ꞁ: \"L\",\n    Ɯ: \"M\",\n    Ʌ: \"V\",\n    Ꜩ: \"TZ\",\n    Ú: \"U\",\n    Ŭ: \"U\",\n    Ǔ: \"U\",\n    Û: \"U\",\n    Ṷ: \"U\",\n    Ü: \"U\",\n    Ǘ: \"U\",\n    Ǚ: \"U\",\n    Ǜ: \"U\",\n    Ǖ: \"U\",\n    Ṳ: \"U\",\n    Ụ: \"U\",\n    Ű: \"U\",\n    Ȕ: \"U\",\n    Ù: \"U\",\n    Ủ: \"U\",\n    Ư: \"U\",\n    Ứ: \"U\",\n    Ự: \"U\",\n    Ừ: \"U\",\n    Ử: \"U\",\n    Ữ: \"U\",\n    Ȗ: \"U\",\n    Ū: \"U\",\n    Ṻ: \"U\",\n    Ų: \"U\",\n    Ů: \"U\",\n    Ũ: \"U\",\n    Ṹ: \"U\",\n    Ṵ: \"U\",\n    Ꝟ: \"V\",\n    Ṿ: \"V\",\n    Ʋ: \"V\",\n    Ṽ: \"V\",\n    Ꝡ: \"VY\",\n    Ẃ: \"W\",\n    Ŵ: \"W\",\n    Ẅ: \"W\",\n    Ẇ: \"W\",\n    Ẉ: \"W\",\n    Ẁ: \"W\",\n    Ⱳ: \"W\",\n    Ẍ: \"X\",\n    Ẋ: \"X\",\n    Ý: \"Y\",\n    Ŷ: \"Y\",\n    Ÿ: \"Y\",\n    Ẏ: \"Y\",\n    Ỵ: \"Y\",\n    Ỳ: \"Y\",\n    Ƴ: \"Y\",\n    Ỷ: \"Y\",\n    Ỿ: \"Y\",\n    Ȳ: \"Y\",\n    Ɏ: \"Y\",\n    Ỹ: \"Y\",\n    Ź: \"Z\",\n    Ž: \"Z\",\n    Ẑ: \"Z\",\n    Ⱬ: \"Z\",\n    Ż: \"Z\",\n    Ẓ: \"Z\",\n    Ȥ: \"Z\",\n    Ẕ: \"Z\",\n    Ƶ: \"Z\",\n    Ĳ: \"IJ\",\n    Œ: \"OE\",\n    ᴀ: \"A\",\n    ᴁ: \"AE\",\n    ʙ: \"B\",\n    ᴃ: \"B\",\n    ᴄ: \"C\",\n    ᴅ: \"D\",\n    ᴇ: \"E\",\n    ꜰ: \"F\",\n    ɢ: \"G\",\n    ʛ: \"G\",\n    ʜ: \"H\",\n    ɪ: \"I\",\n    ʁ: \"R\",\n    ᴊ: \"J\",\n    ᴋ: \"K\",\n    ʟ: \"L\",\n    ᴌ: \"L\",\n    ᴍ: \"M\",\n    ɴ: \"N\",\n    ᴏ: \"O\",\n    ɶ: \"OE\",\n    ᴐ: \"O\",\n    ᴕ: \"OU\",\n    ᴘ: \"P\",\n    ʀ: \"R\",\n    ᴎ: \"N\",\n    ᴙ: \"R\",\n    ꜱ: \"S\",\n    ᴛ: \"T\",\n    ⱻ: \"E\",\n    ᴚ: \"R\",\n    ᴜ: \"U\",\n    ᴠ: \"V\",\n    ᴡ: \"W\",\n    ʏ: \"Y\",\n    ᴢ: \"Z\",\n    á: \"a\",\n    ă: \"a\",\n    ắ: \"a\",\n    ặ: \"a\",\n    ằ: \"a\",\n    ẳ: \"a\",\n    ẵ: \"a\",\n    ǎ: \"a\",\n    â: \"a\",\n    ấ: \"a\",\n    ậ: \"a\",\n    ầ: \"a\",\n    ẩ: \"a\",\n    ẫ: \"a\",\n    ä: \"a\",\n    ǟ: \"a\",\n    ȧ: \"a\",\n    ǡ: \"a\",\n    ạ: \"a\",\n    ȁ: \"a\",\n    à: \"a\",\n    ả: \"a\",\n    ȃ: \"a\",\n    ā: \"a\",\n    ą: \"a\",\n    ᶏ: \"a\",\n    ẚ: \"a\",\n    å: \"a\",\n    ǻ: \"a\",\n    ḁ: \"a\",\n    ⱥ: \"a\",\n    ã: \"a\",\n    ꜳ: \"aa\",\n    æ: \"ae\",\n    ǽ: \"ae\",\n    ǣ: \"ae\",\n    ꜵ: \"ao\",\n    ꜷ: \"au\",\n    ꜹ: \"av\",\n    ꜻ: \"av\",\n    ꜽ: \"ay\",\n    ḃ: \"b\",\n    ḅ: \"b\",\n    ɓ: \"b\",\n    ḇ: \"b\",\n    ᵬ: \"b\",\n    ᶀ: \"b\",\n    ƀ: \"b\",\n    ƃ: \"b\",\n    ɵ: \"o\",\n    ć: \"c\",\n    č: \"c\",\n    ç: \"c\",\n    ḉ: \"c\",\n    ĉ: \"c\",\n    ɕ: \"c\",\n    ċ: \"c\",\n    ƈ: \"c\",\n    ȼ: \"c\",\n    ď: \"d\",\n    ḑ: \"d\",\n    ḓ: \"d\",\n    ȡ: \"d\",\n    ḋ: \"d\",\n    ḍ: \"d\",\n    ɗ: \"d\",\n    ᶑ: \"d\",\n    ḏ: \"d\",\n    ᵭ: \"d\",\n    ᶁ: \"d\",\n    đ: \"d\",\n    ɖ: \"d\",\n    ƌ: \"d\",\n    ı: \"i\",\n    ȷ: \"j\",\n    ɟ: \"j\",\n    ʄ: \"j\",\n    ǳ: \"dz\",\n    ǆ: \"dz\",\n    é: \"e\",\n    ĕ: \"e\",\n    ě: \"e\",\n    ȩ: \"e\",\n    ḝ: \"e\",\n    ê: \"e\",\n    ế: \"e\",\n    ệ: \"e\",\n    ề: \"e\",\n    ể: \"e\",\n    ễ: \"e\",\n    ḙ: \"e\",\n    ë: \"e\",\n    ė: \"e\",\n    ẹ: \"e\",\n    ȅ: \"e\",\n    è: \"e\",\n    ẻ: \"e\",\n    ȇ: \"e\",\n    ē: \"e\",\n    ḗ: \"e\",\n    ḕ: \"e\",\n    ⱸ: \"e\",\n    ę: \"e\",\n    ᶒ: \"e\",\n    ɇ: \"e\",\n    ẽ: \"e\",\n    ḛ: \"e\",\n    ꝫ: \"et\",\n    ḟ: \"f\",\n    ƒ: \"f\",\n    ᵮ: \"f\",\n    ᶂ: \"f\",\n    ǵ: \"g\",\n    ğ: \"g\",\n    ǧ: \"g\",\n    ģ: \"g\",\n    ĝ: \"g\",\n    ġ: \"g\",\n    ɠ: \"g\",\n    ḡ: \"g\",\n    ᶃ: \"g\",\n    ǥ: \"g\",\n    ḫ: \"h\",\n    ȟ: \"h\",\n    ḩ: \"h\",\n    ĥ: \"h\",\n    ⱨ: \"h\",\n    ḧ: \"h\",\n    ḣ: \"h\",\n    ḥ: \"h\",\n    ɦ: \"h\",\n    ẖ: \"h\",\n    ħ: \"h\",\n    ƕ: \"hv\",\n    í: \"i\",\n    ĭ: \"i\",\n    ǐ: \"i\",\n    î: \"i\",\n    ï: \"i\",\n    ḯ: \"i\",\n    ị: \"i\",\n    ȉ: \"i\",\n    ì: \"i\",\n    ỉ: \"i\",\n    ȋ: \"i\",\n    ī: \"i\",\n    į: \"i\",\n    ᶖ: \"i\",\n    ɨ: \"i\",\n    ĩ: \"i\",\n    ḭ: \"i\",\n    ꝺ: \"d\",\n    ꝼ: \"f\",\n    ᵹ: \"g\",\n    ꞃ: \"r\",\n    ꞅ: \"s\",\n    ꞇ: \"t\",\n    ꝭ: \"is\",\n    ǰ: \"j\",\n    ĵ: \"j\",\n    ʝ: \"j\",\n    ɉ: \"j\",\n    ḱ: \"k\",\n    ǩ: \"k\",\n    ķ: \"k\",\n    ⱪ: \"k\",\n    ꝃ: \"k\",\n    ḳ: \"k\",\n    ƙ: \"k\",\n    ḵ: \"k\",\n    ᶄ: \"k\",\n    ꝁ: \"k\",\n    ꝅ: \"k\",\n    ĺ: \"l\",\n    ƚ: \"l\",\n    ɬ: \"l\",\n    ľ: \"l\",\n    ļ: \"l\",\n    ḽ: \"l\",\n    ȴ: \"l\",\n    ḷ: \"l\",\n    ḹ: \"l\",\n    ⱡ: \"l\",\n    ꝉ: \"l\",\n    ḻ: \"l\",\n    ŀ: \"l\",\n    ɫ: \"l\",\n    ᶅ: \"l\",\n    ɭ: \"l\",\n    ł: \"l\",\n    ǉ: \"lj\",\n    ſ: \"s\",\n    ẜ: \"s\",\n    ẛ: \"s\",\n    ẝ: \"s\",\n    ḿ: \"m\",\n    ṁ: \"m\",\n    ṃ: \"m\",\n    ɱ: \"m\",\n    ᵯ: \"m\",\n    ᶆ: \"m\",\n    ń: \"n\",\n    ň: \"n\",\n    ņ: \"n\",\n    ṋ: \"n\",\n    ȵ: \"n\",\n    ṅ: \"n\",\n    ṇ: \"n\",\n    ǹ: \"n\",\n    ɲ: \"n\",\n    ṉ: \"n\",\n    ƞ: \"n\",\n    ᵰ: \"n\",\n    ᶇ: \"n\",\n    ɳ: \"n\",\n    ñ: \"n\",\n    ǌ: \"nj\",\n    ó: \"o\",\n    ŏ: \"o\",\n    ǒ: \"o\",\n    ô: \"o\",\n    ố: \"o\",\n    ộ: \"o\",\n    ồ: \"o\",\n    ổ: \"o\",\n    ỗ: \"o\",\n    ö: \"o\",\n    ȫ: \"o\",\n    ȯ: \"o\",\n    ȱ: \"o\",\n    ọ: \"o\",\n    ő: \"o\",\n    ȍ: \"o\",\n    ò: \"o\",\n    ỏ: \"o\",\n    ơ: \"o\",\n    ớ: \"o\",\n    ợ: \"o\",\n    ờ: \"o\",\n    ở: \"o\",\n    ỡ: \"o\",\n    ȏ: \"o\",\n    ꝋ: \"o\",\n    ꝍ: \"o\",\n    ⱺ: \"o\",\n    ō: \"o\",\n    ṓ: \"o\",\n    ṑ: \"o\",\n    ǫ: \"o\",\n    ǭ: \"o\",\n    ø: \"o\",\n    ǿ: \"o\",\n    õ: \"o\",\n    ṍ: \"o\",\n    ṏ: \"o\",\n    ȭ: \"o\",\n    ƣ: \"oi\",\n    ꝏ: \"oo\",\n    ɛ: \"e\",\n    ᶓ: \"e\",\n    ɔ: \"o\",\n    ᶗ: \"o\",\n    ȣ: \"ou\",\n    ṕ: \"p\",\n    ṗ: \"p\",\n    ꝓ: \"p\",\n    ƥ: \"p\",\n    ᵱ: \"p\",\n    ᶈ: \"p\",\n    ꝕ: \"p\",\n    ᵽ: \"p\",\n    ꝑ: \"p\",\n    ꝙ: \"q\",\n    ʠ: \"q\",\n    ɋ: \"q\",\n    ꝗ: \"q\",\n    ŕ: \"r\",\n    ř: \"r\",\n    ŗ: \"r\",\n    ṙ: \"r\",\n    ṛ: \"r\",\n    ṝ: \"r\",\n    ȑ: \"r\",\n    ɾ: \"r\",\n    ᵳ: \"r\",\n    ȓ: \"r\",\n    ṟ: \"r\",\n    ɼ: \"r\",\n    ᵲ: \"r\",\n    ᶉ: \"r\",\n    ɍ: \"r\",\n    ɽ: \"r\",\n    ↄ: \"c\",\n    ꜿ: \"c\",\n    ɘ: \"e\",\n    ɿ: \"r\",\n    ś: \"s\",\n    ṥ: \"s\",\n    š: \"s\",\n    ṧ: \"s\",\n    ş: \"s\",\n    ŝ: \"s\",\n    ș: \"s\",\n    ṡ: \"s\",\n    ṣ: \"s\",\n    ṩ: \"s\",\n    ʂ: \"s\",\n    ᵴ: \"s\",\n    ᶊ: \"s\",\n    ȿ: \"s\",\n    ɡ: \"g\",\n    ᴑ: \"o\",\n    ᴓ: \"o\",\n    ᴝ: \"u\",\n    ť: \"t\",\n    ţ: \"t\",\n    ṱ: \"t\",\n    ț: \"t\",\n    ȶ: \"t\",\n    ẗ: \"t\",\n    ⱦ: \"t\",\n    ṫ: \"t\",\n    ṭ: \"t\",\n    ƭ: \"t\",\n    ṯ: \"t\",\n    ᵵ: \"t\",\n    ƫ: \"t\",\n    ʈ: \"t\",\n    ŧ: \"t\",\n    ᵺ: \"th\",\n    ɐ: \"a\",\n    ᴂ: \"ae\",\n    ǝ: \"e\",\n    ᵷ: \"g\",\n    ɥ: \"h\",\n    ʮ: \"h\",\n    ʯ: \"h\",\n    ᴉ: \"i\",\n    ʞ: \"k\",\n    ꞁ: \"l\",\n    ɯ: \"m\",\n    ɰ: \"m\",\n    ᴔ: \"oe\",\n    ɹ: \"r\",\n    ɻ: \"r\",\n    ɺ: \"r\",\n    ⱹ: \"r\",\n    ʇ: \"t\",\n    ʌ: \"v\",\n    ʍ: \"w\",\n    ʎ: \"y\",\n    ꜩ: \"tz\",\n    ú: \"u\",\n    ŭ: \"u\",\n    ǔ: \"u\",\n    û: \"u\",\n    ṷ: \"u\",\n    ü: \"u\",\n    ǘ: \"u\",\n    ǚ: \"u\",\n    ǜ: \"u\",\n    ǖ: \"u\",\n    ṳ: \"u\",\n    ụ: \"u\",\n    ű: \"u\",\n    ȕ: \"u\",\n    ù: \"u\",\n    ủ: \"u\",\n    ư: \"u\",\n    ứ: \"u\",\n    ự: \"u\",\n    ừ: \"u\",\n    ử: \"u\",\n    ữ: \"u\",\n    ȗ: \"u\",\n    ū: \"u\",\n    ṻ: \"u\",\n    ų: \"u\",\n    ᶙ: \"u\",\n    ů: \"u\",\n    ũ: \"u\",\n    ṹ: \"u\",\n    ṵ: \"u\",\n    ᵫ: \"ue\",\n    ꝸ: \"um\",\n    ⱴ: \"v\",\n    ꝟ: \"v\",\n    ṿ: \"v\",\n    ʋ: \"v\",\n    ᶌ: \"v\",\n    ⱱ: \"v\",\n    ṽ: \"v\",\n    ꝡ: \"vy\",\n    ẃ: \"w\",\n    ŵ: \"w\",\n    ẅ: \"w\",\n    ẇ: \"w\",\n    ẉ: \"w\",\n    ẁ: \"w\",\n    ⱳ: \"w\",\n    ẘ: \"w\",\n    ẍ: \"x\",\n    ẋ: \"x\",\n    ᶍ: \"x\",\n    ý: \"y\",\n    ŷ: \"y\",\n    ÿ: \"y\",\n    ẏ: \"y\",\n    ỵ: \"y\",\n    ỳ: \"y\",\n    ƴ: \"y\",\n    ỷ: \"y\",\n    ỿ: \"y\",\n    ȳ: \"y\",\n    ẙ: \"y\",\n    ɏ: \"y\",\n    ỹ: \"y\",\n    ź: \"z\",\n    ž: \"z\",\n    ẑ: \"z\",\n    ʑ: \"z\",\n    ⱬ: \"z\",\n    ż: \"z\",\n    ẓ: \"z\",\n    ȥ: \"z\",\n    ẕ: \"z\",\n    ᵶ: \"z\",\n    ᶎ: \"z\",\n    ʐ: \"z\",\n    ƶ: \"z\",\n    ɀ: \"z\",\n    ﬀ: \"ff\",\n    ﬃ: \"ffi\",\n    ﬄ: \"ffl\",\n    ﬁ: \"fi\",\n    ﬂ: \"fl\",\n    ĳ: \"ij\",\n    œ: \"oe\",\n    ﬆ: \"st\",\n    ₐ: \"a\",\n    ₑ: \"e\",\n    ᵢ: \"i\",\n    ⱼ: \"j\",\n    ₒ: \"o\",\n    ᵣ: \"r\",\n    ᵤ: \"u\",\n    ᵥ: \"v\",\n    ₓ: \"x\",\n  };\n  // eslint-disable-next-line no-extend-native\n  const res = link.replace(/[^A-Za-z0-9\\\\[\\] ]/g, function (a) {\n    return Latinise.latin_map[a] || a;\n  });\n  return res;\n};\n","import React from \"react\";\nimport {\n  Row,\n  Col,\n  Card,\n  CardHeader,\n  CardBody,\n  FormGroup,\n  Input,\n  Form,\n} from \"reactstrap\";\nimport Select from \"react-select\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport {\n  EnglishCertificateType,\n  GroupType,\n  NewTestGroupInput,\n  TestGroupInfoFragment,\n  useCreateTestGroupMutation,\n  useGetTestGroupInfoLazyQuery,\n  useUniqueLinkTestGroupMutation,\n  useUpdateTestGroupMutation,\n} from \"../../../../schema/schema\";\nimport { store } from \"react-notifications-component\";\nimport { useParams } from \"react-router-dom\";\nimport { notificationAdd } from \"../../utils/Notification\";\nimport ErrorMessage from \"../../components/Error\";\nimport { EnglishCertificateOptions } from \"../../components/QuestionsAndTest/CreateAndEditPart\";\nimport Loading from \"../../../../components/Loading\";\nimport ButtonSubmitGroup from \"../../components/ButtonSubmit\";\nimport { generateLink } from \"../../utils/GenerateLink\";\nconst penEdit = require(\"../../../../assets/img/pen.svg\");\ninterface CreateAndEditTestGroupProps {\n  testsGroupData?: TestGroupInfoFragment[];\n}\n\nexport const ListOfTestGroups: { value: string | null; label: string }[] = [\n  {\n    value: null,\n    label: \"Chose test group\",\n  },\n];\n\nconst GroupTypeOptions = [\n  {\n    value: \"\",\n    label: \"Chose type\",\n  },\n  {\n    value: GroupType.Test,\n    label: \"Test\",\n  },\n  {\n    value: GroupType.Blog,\n    label: \"Blog\",\n  },\n  {\n    value: GroupType.Landing,\n    label: \"Landing\",\n  },\n];\n\nconst CreateAndEditTestGroup: React.FC<CreateAndEditTestGroupProps> = ({\n  testsGroupData,\n}) => {\n  const { testGroupId } = useParams() as { testGroupId?: string };\n  const [isDisableEditLink, setIsDisableEditLink] = React.useState(true);\n  const [uniqueLinkTestGroupMutation] = useUniqueLinkTestGroupMutation();\n  const notification = notificationAdd(\n    \"Test Group\",\n    `${testGroupId ? \"Updated\" : \"\"}`\n  );\n  const [getTestGroupQuery, getTestGroupResponse] = useGetTestGroupInfoLazyQuery();\n  React.useEffect(() => {\n    testGroupId &&\n      getTestGroupQuery({\n        variables: {\n          id: testGroupId,\n        },\n      });\n  }, [getTestGroupQuery, testGroupId]);\n  const [\n    selectedGroupTypeOptions,\n    setSelectedGroupTypeOptions,\n  ] = React.useState(GroupTypeOptions[1]);\n  const [selectedTestGroup, setSelectedTestGroup] = React.useState(\n    ListOfTestGroups[0]\n  );\n  const [certificateTypeSelect, setCertificateTypeSelect] = React.useState(\n    EnglishCertificateOptions[1]\n  );\n  const testGroupData = getTestGroupResponse.data?.getTestGroup;\n  React.useMemo(() => {\n    if (testGroupData) {\n      const selected = testsGroupData?.find(\n        (t) => t.id === testGroupData.parentId\n      );\n      console.log('testGroupData', testGroupData);\n      selected &&\n        setSelectedTestGroup({\n          value: selected.id,\n          label: selected.testGroupName,\n        });\n      setSelectedGroupTypeOptions({\n        value: testGroupData.groupType,\n        label: testGroupData.groupType,\n      });\n      EnglishCertificateOptions.find((prop, key) => {\n        if (prop.value === testGroupData?.certificateType) {\n          setCertificateTypeSelect(EnglishCertificateOptions[key]);\n        }\n        return null;\n      });\n    }\n  }, [testGroupData]);\n\n  const [\n    createTestGroupMutation,\n    createTestGroupResponse,\n  ] = useCreateTestGroupMutation();\n  const [\n    updateTestGroupMutation,\n    updateTestGrouResponse,\n  ] = useUpdateTestGroupMutation();\n\n  const [defaultListTestGroup, setDefaultListTestGroup] = React.useState(\n    ListOfTestGroups\n  );\n\n  let initialValues: NewTestGroupInput = {\n    testGroupName: testGroupData?.testGroupName || \"\",\n    link: testGroupData?.link || \"\",\n    groupType: testGroupData?.groupType || GroupType.Test,\n    parentId: testGroupData?.parentId || null,\n    certificateType:\n      testGroupData?.certificateType || EnglishCertificateType.Toeic,\n    displayOrder: testGroupData?.displayOrder || 0,\n  };\n\n  React.useMemo(() => {\n    if (!testsGroupData) {\n      return ListOfTestGroups;\n    }\n    setDefaultListTestGroup([\n      ...ListOfTestGroups,\n      ...testsGroupData.map((tg) => {\n        const data = {\n          value: tg.id,\n          label: tg.testGroupName,\n        };\n        return data;\n      }),\n    ]);\n  }, [testsGroupData]);\n\n  const [shouldValidate, setShouldValidate] = React.useState(false);\n  const formik = useFormik({\n    enableReinitialize: true,\n    validateOnChange: shouldValidate,\n    validateOnBlur: shouldValidate,\n    initialValues,\n    validationSchema: yup.object().shape({\n      testGroupName: yup\n        .string()\n        .required(\"Test Group Name is a required field\"),\n      link: yup.string().trim().required(\"Link is a required field\"),\n      certificateType: yup\n        .string()\n        .required(\"Type of test is a required field\"),\n      groupType: yup.string().trim().required(\"GroupType is a required field\"),\n    }),\n    onSubmit: async (values) => {\n      const { link, ...remainingData } = values;\n      const linkTrim = link.trim();\n      const res = await uniqueLinkTestGroupMutation({\n        variables: {\n          link: linkTrim,\n          id: testGroupId,\n        },\n      });\n      if (res.data?.uniqueLinkTestGroup) {\n        formik.setErrors({\n          link: \"This link already exists, please try again !\",\n        });\n        return;\n      }\n      if (testGroupId) {\n        const result = await updateTestGroupMutation({\n          variables: {\n            data: { id: testGroupId, link: linkTrim, ...remainingData },\n          },\n        });\n        if (result.data?.updateTestGroup) {\n          store.addNotification(notification);\n        }\n      } else {\n        const result = await createTestGroupMutation({\n          variables: {\n            data: { link: linkTrim, ...remainingData },\n          },\n        });\n        if (result.data?.createTestGroup) {\n          store.addNotification(notification);\n          formik.resetForm();\n        }\n      }\n    },\n  });\n  if (getTestGroupResponse.loading) {\n    return <Loading />;\n  }\n\n  return (\n    <>\n      <Form onSubmit={formik.handleSubmit}>\n        <Row>\n          <Col>\n            <Card>\n              <CardHeader className=\"d-flex justify-content-between align-items-center\">\n                <h5 className=\"title\">\n                  {!testGroupId ? \"Create Test Group\" : \"Update Test Group\"}\n                </h5>\n                <ButtonSubmitGroup\n                  onClick={() => {\n                    formik.submitForm();\n                    setShouldValidate(true);\n                  }}\n                  link={`/admin/test-group`}\n                  loading={\n                    createTestGroupResponse.loading ||\n                    updateTestGrouResponse.loading\n                  }\n                />\n              </CardHeader>\n              <CardBody>\n                <Row>\n                  <Col className=\"pr-1\" md=\"4\">\n                    <FormGroup>\n                      <label>Test Group Name</label>\n                      <Input\n                        placeholder=\"Test Group Name\"\n                        name=\"testGroupName\"\n                        type=\"text\"\n                        onChange={(e) => {\n                          formik.handleChange(e);\n                          const generatedLink = generateLink(e.target.value);\n                          isDisableEditLink &&\n                            formik.setFieldValue(\"link\", generatedLink);\n                        }}\n                        onBlur={formik.handleBlur}\n                        value={formik.values.testGroupName || \"\"}\n                        className={formik.errors.testGroupName && \"input-error\"}\n                      />\n\n                      <ErrorMessage message={formik.errors.testGroupName} />\n                    </FormGroup>\n                  </Col>\n                  <Col md=\"4\" className=\"pl-1\">\n                    <FormGroup>\n                      <label>Children of</label>\n                      <Select\n                        className=\"react-select react-select-primary\"\n                        onChange={(opt: any) => {\n                          formik.setFieldValue(\"parentId\", opt.value);\n                          setSelectedTestGroup(opt);\n                        }}\n                        value={selectedTestGroup}\n                        classNamePrefix=\"react-select\"\n                        placeholder=\"Chose type of Test\"\n                        name=\"parentId\"\n                        options={defaultListTestGroup}\n                      ></Select>\n                      <ErrorMessage message={formik.errors.parentId} />\n                    </FormGroup>\n                  </Col>\n\n                  <Col md=\"4\" className=\"pl-1\">\n                    <FormGroup>\n                      <label>Type</label>\n                      <Select\n                        className=\"react-select react-select-primary\"\n                        onChange={(opt: any) => {\n                          formik.setFieldValue(\"groupType\", opt.value);\n                          setSelectedGroupTypeOptions(opt);\n                        }}\n                        value={selectedGroupTypeOptions}\n                        classNamePrefix=\"react-select\"\n                        placeholder=\"Chose type of Test\"\n                        name=\"groupType\"\n                        options={GroupTypeOptions}\n                      ></Select>\n                      <ErrorMessage message={formik.errors.groupType} />\n                    </FormGroup>\n                  </Col>\n\n                  <Col md=\"6\" className=\"pr-1\">\n                    <FormGroup>\n                      <label>Label Test</label>\n                      <Select\n                        className=\"react-select react-select-primary\"\n                        onChange={(opt: any) => {\n                          setCertificateTypeSelect(opt);\n                          formik.setFieldValue(\"certificateType\", opt.value);\n                        }}\n                        value={certificateTypeSelect}\n                        classNamePrefix=\"react-select\"\n                        placeholder=\"Chose type of Test\"\n                        name=\"certificateType\"\n                        options={EnglishCertificateOptions}\n                      ></Select>\n                      <ErrorMessage message={formik.errors.certificateType} />\n                    </FormGroup>\n                  </Col>\n                  <Col className=\"pl-1\" md=\"6\">\n                    <FormGroup>\n                      <label>Link</label>\n                      <div className=\"d-flex align-items-center\">\n                        <Input\n                          placeholder=\"Link\"\n                          name=\"link\"\n                          type=\"text\"\n                          onChange={formik.handleChange}\n                          onBlur={formik.handleBlur}\n                          value={formik.values.link || \"\"}\n                          className={formik.errors.link && \"input-error\"}\n                          disabled={isDisableEditLink}\n                        />\n                        <span\n                          className=\"ml-2 cursor-pointer\"\n                          onClick={() => setIsDisableEditLink(false)}\n                        >\n                          <img alt=\"penEdit\" src={penEdit} />\n                        </span>\n                      </div>\n                      <ErrorMessage message={formik.errors.link} />\n                    </FormGroup>\n                  </Col>\n                </Row>\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n      </Form>\n    </>\n  );\n};\n\nexport default CreateAndEditTestGroup;\n","import React from \"react\";\nimport {\n  Row,\n  Col,\n  Card,\n  CardHeader,\n  CardBody,\n  Form,\n  FormGroup,\n  Input,\n  Button,\n  Badge,\n  Spinner,\n} from \"reactstrap\";\nimport {\n  useGetTestCategoryLazyQuery,\n  TestCategoryFragment,\n  NewTestCategoryInput,\n  useUpdateTestCategoryMutation,\n  EnglishCertificateType,\n  useUpdateTestMutation,\n  useRemoveFromCatMutation,\n  SkillsType,\n  OrderDirection,\n  useGetTestGroupsInfoQuery,\n  TestGroupInfoFragment,\n  GroupType,\n} from \"../../../../schema/schema\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport { store } from \"react-notifications-component\";\nimport { notificationAdd } from \"../../utils/Notification\";\nimport ErrorMessage from \"../Error\";\nimport { ButtonAddTest } from \"../ButtonQuestion/ButtonAddTest\";\nimport ModalTest from \"./ModalTest\";\nimport { ListOfTestGroups } from \"../../views/TestGroup/CreateAndEditTestGroup\";\nimport Select from \"react-select\";\nimport _ from \"lodash\";\n\ninterface CreateAndEditTestCategoryProps {}\n\nconst CreateAndEditTestCategory: React.FC<CreateAndEditTestCategoryProps> = () => {\n  const notification = notificationAdd(\"Test Category\", \"Update\");\n  const { id } = useParams() as { id?: string };\n  const [\n    getTestCategoryQuery,\n    getTestCategoryResponse,\n  ] = useGetTestCategoryLazyQuery();\n  const [updateTestCategory] = useUpdateTestCategoryMutation();\n  const [\n    updateTestMutation,\n    updateTestMutationResult,\n  ] = useUpdateTestMutation();\n  const [\n    removeTestFromCatMutation,\n    removeTestFromCatMutationResult,\n  ] = useRemoveFromCatMutation();\n\n  const getTestGroupsQuery = useGetTestGroupsInfoQuery({\n    variables: {\n      data: {\n        orderDirection: OrderDirection.Asc,\n        groupType: GroupType.Test,\n        shouldGetChild: true,\n      },\n    },\n  });\n\n  const [idRemove, setIdRemove] = React.useState(\"\");\n\n  React.useEffect(() => {\n    id &&\n      getTestCategoryQuery({\n        variables: {\n          id,\n        },\n      });\n  }, [getTestCategoryQuery, id]);\n  let testsGroupData: TestGroupInfoFragment[] | undefined;\n  if (getTestGroupsQuery.data) {\n    testsGroupData = getTestGroupsQuery.data.getTestGroups.testGroups;\n  }\n\n  const defaultListTestGroup = React.useMemo(() => {\n    if (!testsGroupData) {\n      return ListOfTestGroups;\n    }\n    return [\n      ...ListOfTestGroups,\n      ...testsGroupData.map((tg) => {\n        const data = {\n          value: tg.id,\n          label: tg.testGroupName,\n        };\n        return data;\n      }),\n    ];\n  }, [testsGroupData]);\n  let defaultValue: any;\n\n  let testCategoryData: TestCategoryFragment | undefined;\n  if (getTestCategoryResponse.data) {\n    testCategoryData = getTestCategoryResponse.data.getTestCategory;\n    defaultValue = defaultListTestGroup.find(\n      (e) => e.value === testCategoryData?.testGroup?.id\n    );\n  }\n  const tests = _.cloneDeep(testCategoryData?.tests);\n  const refetchTestCategory = () => {\n    getTestCategoryResponse.refetch && getTestCategoryResponse.refetch();\n  };\n  React.useEffect(() => {\n    if (updateTestMutationResult.data || removeTestFromCatMutationResult.data) {\n      refetchTestCategory();\n      removeTestFromCatMutationResult.data &&\n        setIdRemove(removeTestFromCatMutationResult.data.removeFromCat.id);\n    }\n  }, [\n    updateTestMutationResult.loading,\n    removeTestFromCatMutationResult.loading,\n  ]);\n  let initialValues: NewTestCategoryInput = {\n    id: testCategoryData?.id,\n    certificateType: testCategoryData?.certificateType,\n    testCategoryName: testCategoryData?.testCategoryName!,\n  };\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: initialValues,\n    validationSchema: yup.object().shape({\n      testCategoryName: yup\n        .string()\n        .required(\"Test Category name is a required field\"),\n    }),\n    onSubmit: async (values) => {\n      const result = await updateTestCategory({\n        variables: {\n          data: values,\n        },\n      });\n      if (result.data?.updateTestCategory) {\n        store.addNotification(notification);\n      }\n    },\n  });\n\n  if (getTestCategoryResponse.loading) {\n    return <>{\"...loading\"}</>;\n  }\n\n  return (\n    <Card>\n      <CardHeader className=\"d-flex justify-content-between align-items-center\">\n        <h5 className=\"title\">Create Test Category</h5>\n      </CardHeader>\n      <CardBody>\n        <Form onSubmit={formik.handleSubmit}>\n          <Row>\n            <Col sm=\"12\">\n              <div className=\"d-flex justify-content-between pl-5 align-items-end\">\n                <FormGroup className=\"w-50\">\n                  <label>Test Category Name</label>\n                  <Input\n                    placeholder=\"Test Category Name\"\n                    name=\"testCategoryName\"\n                    type=\"text\"\n                    onChange={formik.handleChange}\n                    onBlur={formik.handleBlur}\n                    value={formik.values.testCategoryName || \"\"}\n                    className={formik.errors.testCategoryName && \"input-error\"}\n                  />\n                  <ErrorMessage message={formik.errors.testCategoryName} />\n                </FormGroup>\n\n                <div>\n                  <Button\n                    type=\"submit\"\n                    className=\"bg-info font-weight-bold font-10\"\n                  >\n                    Submit\n                  </Button>\n                  <Link\n                    to={`/admin/toeic/test-categories`}\n                    className=\"bg-danger btn font-weight-bold font-10\"\n                  >\n                    Cancel\n                  </Link>\n                </div>\n              </div>\n            </Col>\n            <Col md=\"6\" className=\"\">\n              <FormGroup className=\"pl-5\">\n                <label>Test Group</label>\n                <Select\n                  className=\"react-select react-select-primary\"\n                  onChange={(opt: any) => {\n                    formik.setFieldValue(\"testGroupId\", opt.value);\n                  }}\n                  defaultValue={defaultValue}\n                  classNamePrefix=\"react-select\"\n                  placeholder=\"Chose type of Test Group\"\n                  name=\"testGroupId\"\n                  options={defaultListTestGroup}\n                ></Select>\n                <ErrorMessage message={formik.errors.testGroupId} />\n              </FormGroup>\n            </Col>\n            <Col sm=\"12\">\n              <div className=\"px-4 mt-5\">\n                <div className=\"d-flex mb-2 px-2 justify-content-between align-items-center\">\n                  <span\n                    style={{ width: \"10%\" }}\n                    className=\"font-10 text-primary text-center font-weight-semi\"\n                  >\n                    Order\n                  </span>\n                  <span\n                    style={{ width: \"20%\" }}\n                    className=\"font-10 text-primary text-center font-weight-semi\"\n                  >\n                    Test Name\n                  </span>\n                  <span\n                    style={{ width: \"20%\" }}\n                    className=\"font-10 text-primary text-center font-weight-semi\"\n                  >\n                    Skill\n                  </span>\n                  <span\n                    style={{ width: \"20%\" }}\n                    className=\"font-10 text-primary text-center font-weight-semi\"\n                  >\n                    Certificate\n                  </span>\n                  <span\n                    style={{ width: \"10%\" }}\n                    className=\"font-10 text-primary text-center font-weight-semi\"\n                  >\n                    Action\n                  </span>\n                </div>\n                <div>\n                  <>\n                    {tests &&\n                      tests\n                        .sort((a, b) => a.displayOrder - b.displayOrder)\n                        .map((t, t_index) => {\n                          return (\n                            <div\n                              className=\"d-flex mb-2 px-2 justify-content-between align-items-center\"\n                              key={t_index}\n                            >\n                              <span\n                                style={{ width: \"10%\" }}\n                                className=\"font-10 text-center text-primary font-weight-semi\"\n                              >\n                                <Input\n                                  defaultValue={t.displayOrder}\n                                  type=\"number\"\n                                  onChange={(e) => {\n                                    t.displayOrder = parseInt(e.target.value);\n                                  }}\n                                />\n                              </span>\n                              <span\n                                style={{ width: \"20%\" }}\n                                className=\"font-10 text-center font-weight-semi\"\n                              >\n                                <Link\n                                  to={`/admin/toeic/create-test-toeic/${t.skillType.toLowerCase()}/${\n                                    t.id\n                                  }`}\n                                  className=\"text-primary\"\n                                >\n                                  {t.testName}\n                                </Link>\n                              </span>\n                              <span\n                                style={{ width: \"20%\" }}\n                                className=\"text-center\"\n                              >\n                                {t.skillType === SkillsType.Reading ? (\n                                  <Badge color=\"success\">{t.skillType}</Badge>\n                                ) : (\n                                  <Badge color=\"info\">{t.skillType}</Badge>\n                                )}\n                              </span>\n                              <span\n                                style={{ width: \"20%\" }}\n                                className=\"text-center\"\n                              >\n                                {t.certificateType ===\n                                EnglishCertificateType.Toeic ? (\n                                  <Badge color=\"primary\">\n                                    {t.certificateType}\n                                  </Badge>\n                                ) : (\n                                  <Badge color=\"brand\">\n                                    {t.certificateType}\n                                  </Badge>\n                                )}\n                              </span>\n                              <div className=\"d-flex\">\n                                <Button\n                                  className=\"btn-icon btn-round mr-1\"\n                                  color=\"info\"\n                                  size=\"sm\"\n                                  type=\"button\"\n                                  onClick={async (e) => {\n                                    e.preventDefault();\n                                    await updateTestMutation({\n                                      variables: {\n                                        data: {\n                                          id: t.id,\n                                          displayOrder: t.displayOrder,\n                                        },\n                                      },\n                                    });\n                                  }}\n                                >\n                                  <i className=\"now-ui-icons users_single-02\"></i>\n                                </Button>\n                                <Link\n                                  to={`/admin/toeic/create-test-toeic/${t.skillType.toLowerCase()}/${\n                                    t.id\n                                  }`}\n                                  className=\"btn btn-sm mr-1 btn-warning btn-icon btn-round\"\n                                >\n                                  <i className=\"now-ui-icons ui-2_settings-90\"></i>\n                                </Link>\n                                <Button\n                                  className=\"btn-icon btn-round text-center\"\n                                  color=\"danger\"\n                                  size=\"sm\"\n                                  type=\"button\"\n                                  onClick={async (e) => {\n                                    e.preventDefault();\n                                    await removeTestFromCatMutation({\n                                      variables: {\n                                        id: t.id,\n                                      },\n                                    });\n                                  }}\n                                >\n                                  {removeTestFromCatMutationResult.loading &&\n                                  idRemove === t.id ? (\n                                    <Spinner color=\"primary\" />\n                                  ) : (\n                                    <i className=\"now-ui-icons ui-1_simple-remove\"></i>\n                                  )}\n                                </Button>\n                              </div>\n                            </div>\n                          );\n                        })}\n                  </>\n                  <ButtonAddTest />\n                </div>{\" \"}\n              </div>\n            </Col>\n            <ModalTest\n              testCategoryId={testCategoryData?.id}\n              refetchTestCategory={refetchTestCategory}\n              tests={testCategoryData?.tests}\n            />\n          </Row>\n        </Form>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default CreateAndEditTestCategory;\n","import React from \"react\";\nimport PanelHeader from \"../../components/PanelHeader\";\nimport { Switch, Route, useRouteMatch, useParams, useHistory } from \"react-router-dom\";\nimport CreateAndEditQuestion from \"../../components/QuestionsAndTest/CreateAndEditQuestion\";\nimport CreateAndEditPart from \"../../components/QuestionsAndTest/CreateAndEditPart\";\nimport CreateAndEditTest from \"../../components/QuestionsAndTest/CreateAndEditTest\";\nimport QuestionContextProvider from \"../../components/QuestionsAndTest/QuestionContext\";\nimport { EnglishCertificateType } from \"../../../../schema/schema\";\nimport TestPage from \"../../components/QuestionsAndTest\";\nimport CreateAndEditTestCategory from \"../../components/QuestionsAndTest/CreateAndEditTestCategory\";\nimport { capitalizeFirstLetter } from \"../../utils/UppercaseFirstLetter\";\n// import { Route, Switch, Redirect } from \"react-router-dom\";\n// interface ToeicAdminProps {}\n\nconst ToeicAdmin: React.FC<{}> = () => {\n  const match = useRouteMatch();\n  const { type } = useParams() as { type?: string };\n  const history = useHistory();\n  if(!type){\n    history.push('/admin');\n    return <></>\n  }\n  const typeFormatted = capitalizeFirstLetter(type) as EnglishCertificateType;\n  return (\n    <>\n      <PanelHeader>\n      <div className=\"header text-center\">\n            <h2 className=\"title\">{typeFormatted}</h2>\n            <p className=\"category\">\n              Management Test and Questions of {typeFormatted} Category\n            </p>\n          </div>\n      </PanelHeader>\n      <div className=\"content\">\n        <QuestionContextProvider certificateType={typeFormatted}>\n        <Switch>\n        <Route path={`${match.url}/create-test-category/:id`}>\n            <CreateAndEditTestCategory />\n          </Route>\n          <Route path={`${match.url}/create-test-toeic/:skillTypeParam/:id`}>\n            <CreateAndEditTest />\n          </Route>\n          <Route path={[`${match.url}/create-question-toeic`, `${match.url}/questions/:questionId/edit`]}>\n            <CreateAndEditQuestion />\n          </Route>\n          <Route path={[`${match.url}/create-part-toeic`, `${match.url}/part/:partId/edit`]}>\n            <CreateAndEditPart />\n          </Route>\n          <Route path={`${match.url}`}>\n            <TestPage />\n          </Route>\n        </Switch>\n        </QuestionContextProvider>\n      </div>\n    </>\n  );\n};\n\nexport default ToeicAdmin;\n","export const capitalizeFirstLetter = (val: string) => {\n    return val.charAt(0).toUpperCase() + val.slice(1);\n}","import React from \"react\";\nimport { CardBody, Table, Button, Card } from \"reactstrap\";\nimport { Link, useRouteMatch } from \"react-router-dom\";\nimport {\n  useDeleteBlogMutation,\n  useGetBlogsQuery,\n} from \"../../../../../schema/schema\";\nimport ModalDelete from \"../../../components/Modal/Delete\";\nimport Loading from \"../../../../../components/Loading\";\ninterface ListTestProps {}\n\nconst ListBlog: React.FC<ListTestProps> = () => {\n  const match = useRouteMatch();\n  const [isOpenModalDelete, setIsOpenModalDelete] = React.useState(false);\n  const [idRemove, setIdRemove] = React.useState(\"\");\n  const { data, loading, refetch } = useGetBlogsQuery({\n    variables: {\n      data: {},\n    },\n  });\n  const deleteBlog = async () => {\n    await deleteBlogMutation({\n      variables: {\n        id: idRemove,\n      },\n    });\n  };\n  const [\n    deleteBlogMutation,\n    deleteBlogMutationResult,\n  ] = useDeleteBlogMutation();\n\n  React.useMemo(() => {\n    deleteBlogMutationResult.data?.deleteBlog && refetch();\n  }, [deleteBlogMutationResult.data, refetch]);\n\n  if (loading) {\n    return <Loading />;\n  }\n  const blogs = data?.getBlogs.blogs;\n  return (\n    <Card>\n      <CardBody>\n        <Table responsive>\n          <thead className=\"text-primary font-10\">\n            <tr>\n              <th className=\"text-right\" style={{ width: \"5%\" }}></th>\n              <th className=\"text-center font-weight-semi\">Blog Name</th>\n              <th className=\"text-center font-weight-semi\">Test Group</th>\n              <th className=\"text-center font-weight-semi\">Author</th>\n              <th className=\"text-center font-weight-semi\">Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {blogs &&\n              blogs.map((blog, index) => {\n                return (\n                  <tr key={index}>\n                    <td>{index + 1}</td>\n                    <td className=\"text-left font-weight-semi\">\n                      {blog.blogName}\n                    </td>\n                    <td className=\"text-center\">\n                      {blog.testGroup.testGroupName}\n                    </td>\n                    <td className=\"text-center\">\n                      {blog.author.firstName + \" \" + blog.author.lastName}\n                    </td>\n                    <td className=\"text-center\">\n                      <Button\n                        className=\"btn-icon btn-round mr-1\"\n                        color=\"info\"\n                        size=\"sm\"\n                        type=\"button\"\n                      >\n                        <i className=\"now-ui-icons users_single-02\"></i>\n                      </Button>\n                      <Link\n                        className=\"btn btn-sm mr-1 btn-warning btn-icon btn-round\"\n                        to={`${match.url}/${blog.id}/edit`}\n                      >\n                        <i className=\"now-ui-icons ui-2_settings-90\"></i>\n                      </Link>\n                      <Button\n                        className=\"btn-icon btn-round\"\n                        color=\"danger\"\n                        size=\"sm\"\n                        type=\"button\"\n                        onClick={() => {\n                          setIsOpenModalDelete(true);\n                          setIdRemove(blog.id);\n                        }}\n                      >\n                        <i className=\"now-ui-icons ui-1_simple-remove\"></i>\n                      </Button>\n                    </td>\n                  </tr>\n                );\n              })}\n          </tbody>\n        </Table>\n      </CardBody>\n      <ModalDelete\n        isOpen={isOpenModalDelete}\n        loading={deleteBlogMutationResult.loading}\n        callback={deleteBlog}\n        onClose={setIsOpenModalDelete}\n      />\n    </Card>\n  );\n};\n\nexport default ListBlog;\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from \"react\";\nimport {\n  Link,\n  useRouteMatch\n} from \"react-router-dom\";\nimport { Col, Row } from \"reactstrap\";\nimport PanelHeader from \"../../../components/PanelHeader\";\nimport ListBlog from \"../ListBlog\";\n// import { Route, Switch, Redirect } from \"react-router-dom\";\n// interface ToeicAdminProps {}\n\nconst BlogHomePage: React.FC<{}> = () => {\n  const match = useRouteMatch();\n  return (\n    <>\n      <PanelHeader>\n          <div className=\"header text-center\">\n            <h2 className=\"title\">Blog</h2>\n            <p className=\"category\">Management Blog</p>\n          </div>\n      </PanelHeader>\n      <div className=\"content\">\n        <Row>\n          <Col md={12}>\n            <div className=\"px-4 py-2 bg-white font-weight-semi font-10\">\n              <Link className=\"btn-info btn\" to={`${match.url}/create-blog`}>\n                Create new blog\n              </Link>\n            </div>\n          </Col>\n          <Col className=\"mt-4\">\n            <ListBlog />\n          </Col>\n        </Row>\n      </div>\n    </>\n  );\n};\n\nexport default BlogHomePage;\n","/** @jsx jsx */\nimport { css, jsx } from \"@emotion/core\";\nimport React from \"react\";\nimport {\n  Row,\n  Col,\n  Button,\n  FormGroup,\n  Input,\n  CardHeader,\n  Card,\n  CardBody,\n  Form,\n} from \"reactstrap\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { useFormik } from \"formik\";\nimport * as yup from \"yup\";\nimport ErrorMessage from \"../../../components/Error\";\nimport {\n  BlogFragment,\n  EnglishCertificateType,\n  MediaType,\n  NewBlogInput,\n  useCreateBlogMutation,\n  useGetBlogLazyQuery,\n  useGetTestGroupsQuery,\n  useUniqueLinkBlogMutation,\n  useUpdateBlogMutation,\n} from \"../../../../../schema/schema\";\nimport { useMe } from \"../../../../../hooks/useMe\";\nimport PanelHeader from \"../../../components/PanelHeader\";\nimport ImageUpload from \"../../../components/ImageUploader\";\nimport config from \"../../../../../config\";\nimport TinyMCETextarea from \"../../../components/TinyMCETextarea\";\nimport { notificationAdd } from \"../../../utils/Notification\";\nimport { store } from \"react-notifications-component\";\nimport Select from \"react-select\";\nimport { generateLink } from \"../../../utils/GenerateLink\";\nconst penEdit = require(\"../../../../../assets/img/pen.svg\");\ninterface BlogProps {}\nconst TestGroupDefaultOptions = [\n  {\n    value: \"0\",\n    label: \"Chose test group\",\n  },\n];\n\nconst CreateAndEditBlog: React.FC<BlogProps> = () => {\n  const { id } = useParams() as any;\n  const [getBlogQuery, getBlogResponse] = useGetBlogLazyQuery();\n  const [uniqueLinkBlogMutation] = useUniqueLinkBlogMutation();\n  const [createBlogMutation] = useCreateBlogMutation();\n  const [updateBlogMutation] = useUpdateBlogMutation();\n  const [path, setPath] = React.useState<string | null>(null);\n  const [isDisableEditLink, setIsDisableEditLink] = React.useState(true);\n  const [TestGroupOptions, setTestGroupOptions] = React.useState(\n    TestGroupDefaultOptions\n  );\n  const [testGroupSelected, setTestGroupSelected] = React.useState(\n    TestGroupOptions[0]\n  );\n  React.useEffect(() => {\n    formik.setFieldValue(\"image\", path);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [path]);\n  let blog: BlogFragment | undefined;\n  React.useEffect(() => {\n    if (!id) return;\n    getBlogQuery({\n      variables: { id },\n    });\n  }, [getBlogQuery, id]);\n  const testGroupQuery = useGetTestGroupsQuery({\n    variables: {\n      data: {\n        certificateType: EnglishCertificateType.Toeic,\n        shouldGetChild: true,\n      },\n    },\n  });\n  const testGroupsData = testGroupQuery.data?.getTestGroups.testGroups;\n  React.useMemo(() => {\n    if (testGroupsData) {\n      setTestGroupOptions([\n        ...TestGroupDefaultOptions,\n        ...testGroupsData.map((t) => {\n          return {\n            value: t.id,\n            label: t.testGroupName,\n          };\n        }),\n      ]);\n    }\n  }, [testGroupsData]);\n  \n  let urlDefault: string = \"\";\n  if (getBlogResponse.data?.getBlog) {\n    blog = getBlogResponse.data?.getBlog;\n    urlDefault = config.PATH_IMAGE + blog.image;\n  }\n  const me = useMe();\n  const initialValues: NewBlogInput = {\n    blogName: blog?.blogName || \"\",\n    content: blog?.content || \"\",\n    image: blog?.image || \"\",\n    testGroupId: blog?.testGroup.id || \"\",\n    authorId: me.id,\n    link: blog?.link || \"\",\n    metaTags: blog?.metaTags\n  };\n  const [shouldValidate, setShouldValidate] = React.useState(false);\n  const shouldShowPreview = path || blog?.image;\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues,\n    validateOnChange: shouldValidate,\n    validateOnBlur: shouldValidate,\n    validationSchema: yup.object().shape({\n      blogName: yup.string().required(\"Blog name is a required field\"),\n    }),\n    onSubmit: async (values) => {\n      const { link, ...remainingData } = values;\n      const linkTrim = link.trim();\n      const res = await uniqueLinkBlogMutation({\n        variables: {\n          link: linkTrim,\n          id,\n        },\n      });\n      if (res.data?.uniqueLinkBlog) {\n        formik.setErrors({\n          link: \"This link already exists, please try again !\",\n        });\n        return;\n      }\n      if (id) {\n        const result = await updateBlogMutation({\n          variables: {\n            data: { id,link: linkTrim, ...remainingData},\n          },\n        });\n        const notification = notificationAdd(\"Blog\", \"Updated\");\n        if (result.data?.updateBlog) {\n          store.addNotification(notification);\n        }\n        return;\n      } else {\n        const result = await createBlogMutation({\n          variables: {\n            data: { link: linkTrim, ...remainingData },\n          },\n        });\n        const notification = notificationAdd(\"Blog\", \"Created\");\n        if (result.data?.createBlog) {\n          store.addNotification(notification);\n          formik.resetForm();\n        }\n      }\n    },\n  });\n  // create and mark it draft\n\n  return (\n    <Form key={formik.submitCount} onSubmit={formik.handleSubmit}>\n      <input name=\"authorId\" value={formik.values.authorId} type=\"hidden\" />\n      <PanelHeader\n        height=\"500\"\n        className=\"d-flex align-items-center justify-content-center\"\n        css={css`\n          ${shouldShowPreview\n            ? `background: url(${\n                config.PATH_IMAGE + shouldShowPreview\n              }) no-repeat;     background-position: center;\n        background-size: cover;`\n            : \"\"}\n          .fileContainer {\n            background: transparent !important;\n            color: white !important;\n            box-shadow: none !important;\n            p {\n              ${shouldShowPreview ? \"display: none;\" : \"\"}\n            }\n          }\n          .chooseFileButton {\n            border: 1px solid white;\n            background: rgba(0, 0, 0, 0.6);\n            backdrop-filter: blur(6px);\n          }\n        `}\n      >\n        <div className=\"w-50\">\n          <Input placeholder=\"Chose file\" name=\"image\" type=\"hidden\" />\n          <ImageUpload\n            type={MediaType.Image}\n            setPath={setPath}\n            url={urlDefault}\n            singleImage\n            isShowPreview={false}\n            path={path}\n          />\n          <ErrorMessage message={formik.errors.image} />\n        </div>\n      </PanelHeader>\n      <div className=\"content\">\n        <Card>\n          <CardHeader className=\"d-flex justify-content-between align-items-center\">\n            <h5 className=\"title\">Create Blog</h5>\n            <div>\n              <Button\n                type=\"submit\"\n                className=\"bg-info font-weight-bold font-10\"\n                onClick={() => {\n                  setShouldValidate(true);\n                }}\n              >\n                Submit\n              </Button>\n              <Link\n                to={`/admin/blog`}\n                className=\"bg-danger btn font-weight-bold font-10\"\n              >\n                Cancel\n              </Link>\n            </div>\n          </CardHeader>\n          <CardBody>\n            <Row>\n              <Col md={6}>\n                <div className=\"d-flex justify-content-between align-items-end\">\n                  <FormGroup className=\"w-100\">\n                    <label>Blog name</label>\n                    <Input\n                      placeholder=\"Blog name\"\n                      name=\"blogName\"\n                      type=\"text\"\n                      onChange={(e) => {\n                        formik.handleChange(e);\n                        const generatedLink = generateLink(e.target.value);\n                        isDisableEditLink &&\n                          formik.setFieldValue(\"link\", generatedLink);\n                      }}\n                      onBlur={formik.handleBlur}\n                      value={formik.values.blogName}\n                      className={formik.errors.blogName && \"input-error\"}\n                    />\n                    <ErrorMessage message={formik.errors.blogName} />\n                  </FormGroup>\n                </div>\n              </Col>\n              <Col md={6}>\n                <div className=\"d-flex justify-content-between align-items-end\">\n                  <FormGroup className=\"w-100\">\n                    <label>Test Group</label>\n                    <Select\n                      className=\"react-select react-select-primary\"\n                      onChange={(opt: any) => {\n                        setTestGroupSelected(opt);\n                        formik.setFieldValue(\"testGroupId\", opt.value);\n                      }}\n                      classNamePrefix=\"react-select\"\n                      placeholder=\"Single Select\"\n                      value={testGroupSelected}\n                      name=\"testGroupId\"\n                      options={TestGroupOptions}\n                    />\n                    <ErrorMessage message={formik.errors.blogName} />\n                  </FormGroup>\n                </div>\n              </Col>\n            </Row>\n            <Row>\n              <Col md={6}>\n                <div className=\"d-flex justify-content-between align-items-end\">\n                  <FormGroup className=\"w-100\">\n                  <div className=\"d-flex align-items-center\">\n                        <Input\n                          placeholder=\"Link\"\n                          name=\"link\"\n                          type=\"text\"\n                          onChange={formik.handleChange}\n                          onBlur={formik.handleBlur}\n                          value={formik.values.link || \"\"}\n                          className={formik.errors.link && \"input-error\"}\n                          disabled={isDisableEditLink}\n                        />\n                        <span\n                          className=\"ml-2 cursor-pointer\"\n                          onClick={() => setIsDisableEditLink(false)}\n                        >\n                          <img alt=\"penEdit\" src={penEdit} />\n                        </span>\n                      </div>\n                      <ErrorMessage message={formik.errors.link} />\n                  </FormGroup>\n                </div>\n              </Col>\n\n            </Row>\n            <Row>\n              <Col className=\"\" md=\"12\">\n                <FormGroup>\n                  <label>Content</label>\n                  <TinyMCETextarea\n                    textareaName=\"content\"\n                    onEditorChange={(e: any) => {\n                      formik.setFieldValue(\"content\", e);\n                    }}\n                    value={formik.values.content}\n                  />\n                </FormGroup>\n                <ErrorMessage message={formik.errors.content} />\n              </Col>\n            </Row>\n          </CardBody>\n        </Card>\n      </div>\n    </Form>\n  );\n};\n\nexport default CreateAndEditBlog;\n","import React from \"react\";\nimport { Switch, Route, useRouteMatch } from \"react-router-dom\";\nimport BlogHomePage from \"./HomePage\";\nimport CreateAndEditBlog from \"./CreateAndEditBlog\";\n\nconst BlogAdmin: React.FC<{}> = () => {\n  const match = useRouteMatch();\n  return (\n      <Switch>\n        <Route path={[`${match.path}/create-blog`, `${match.path}/:id/edit`]}>\n          <CreateAndEditBlog />\n        </Route>\n        <Route path={`${match.path}`}>\n          <BlogHomePage />\n        </Route>\n      </Switch>\n  );\n};\n\nexport default BlogAdmin;\n","import React from \"react\";\nimport { Link, useRouteMatch } from \"react-router-dom\";\nimport Select from \"react-select\";\nimport { Button, Card, Col, Input, Row, Table } from \"reactstrap\";\nimport { notificationAdd } from \"../../utils/Notification\";\nimport { store } from \"react-notifications-component\";\nimport {\n  TestGroupChildInfoFragment,\n  TestGroupInfoFragment,\n  useUpdateTestGroupMutation,\n} from \"../../../../schema/schema\";\nimport LazyLoad from \"../../components/LazyLoad\";\nconst arrow = require(\"../../../../assets/img/arrow_square.svg\");\nconst StatusOptions = [\n  {\n    value: true,\n    label: \"Visible\",\n  },\n  {\n    value: false,\n    label: \"Hidden\",\n  },\n];\ninterface ListTestGroupProps {\n  testsGroupData?: TestGroupInfoFragment[];\n  loading?: boolean;\n}\nconst ListTestGroup: React.FC<ListTestGroupProps> = ({ testsGroupData, loading }) => {\n  const match = useRouteMatch();\n  return (\n    <Row>\n      <Col lg={12}>\n      <div className=\"px-4 py-2 bg-white font-weight-semi font-10\">\n          <Link\n            className=\"btn-info btn text-white\"\n            to={`${match.url}/create-test-group`}\n          >\n            Create Test Group\n          </Link>\n        </div>\n      </Col >\n      <Col lg={12} className='mt-4'>\n      <Card className='p-2'>\n        <LazyLoad className='p-2' loading={loading}>\n        <Table responsive>\n          <thead className=\"text-primary font-10\">\n            <tr>\n              <th className=\"text-center font-weight-semi\">Test Group Name</th>\n              <th className=\"text-center font-weight-semi\">Link</th>\n              <th\n                className=\"text-center font-weight-semi\"\n                style={{\n                  width: \"15%\",\n                }}\n              >\n                Status\n              </th>\n              <th className=\"text-center font-weight-semi\">Order</th>\n              <th className=\"text-center font-weight-semi\">Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            <ListBody testsGroupData={testsGroupData} />\n          </tbody>\n        </Table>\n        </LazyLoad>\n      </Card>\n      </Col>\n   \n    </Row>\n  );\n};\n\nconst ListBody: React.FC<ListTestGroupProps> = ({ testsGroupData }) => {\n  return (\n    <>\n      {testsGroupData &&\n        testsGroupData.map((testGroup) => {\n          const testGroupsChild = testGroup.testGroupsChild.slice();\n          return (\n            <>\n              <ListBodyChild key={testGroup.id} testGroup={testGroup} />\n              {testGroupsChild &&\n                testGroupsChild.length > 0 &&\n                testGroupsChild\n                  .sort((a, b) => a.displayOrder - b.displayOrder)\n                  .map((testGroupChild) => {\n                    return (\n                      <ListBodyChild\n                        key={testGroupChild.id}\n                        isChild\n                        testGroup={testGroupChild}\n                      />\n                    );\n                  })}\n            </>\n          );\n        })}\n    </>\n  );\n};\n\nconst ListBodyChild: React.FC<{\n  testGroup: TestGroupInfoFragment | TestGroupChildInfoFragment;\n  isChild?: boolean;\n}> = ({ testGroup, isChild }) => {\n  const match = useRouteMatch();\n  const [updateTestGroupMutation] = useUpdateTestGroupMutation();\n  const notification = notificationAdd(\"Test Group\", \"Updated\");\n  let order = testGroup.displayOrder;\n  let StatusDefault = StatusOptions.find(\n    (s) => s.value === testGroup.isPublished\n  );\n  let updateIsPublic: any;\n  return (\n    <tr key={testGroup.id}>\n      <td className={`text-left font-weight-semi ${isChild ? \"pl-4\" : \"\"}`}>\n        <Link to={`${match.path}/edit-test-group/${testGroup.id}`}>\n          {isChild && <img width=\"30px\" src={arrow} alt=\"arrow_square\" />}{\" \"}\n          {testGroup.testGroupName}\n        </Link>\n      </td>\n      <td className=\"text-center font-weight-semi\">{testGroup.link}</td>\n      <td className=\"text-center font-weight-semi\">\n        <Select\n          options={StatusOptions}\n          defaultValue={StatusDefault}\n          classNamePrefix=\"react-select\"\n          onChange={(opt) => {\n            updateIsPublic = opt;\n          }}\n        ></Select>\n      </td>\n      <td>\n        <Input\n          placeholder=\"Order\"\n          type=\"number\"\n          onChange={(e) => {\n            order = parseInt(e.target.value);\n          }}\n          defaultValue={testGroup.displayOrder}\n          className={`mx-auto width-4rem bg-white`}\n        />\n      </td>\n      <td className=\"text-center\">\n        <Button\n          className=\"btn-icon btn-round mr-1\"\n          color=\"info\"\n          size=\"sm\"\n          type=\"button\"\n          onClick={async () => {\n            const { isPublished, __typename, ...remainingData } = testGroup;\n            const res = await updateTestGroupMutation({\n              variables: {\n                data: {\n                  ...remainingData,\n                  displayOrder: order,\n                },\n              },\n            });\n            if (res.data?.updateTestGroup) {\n              store.addNotification(notification);\n            }\n          }}\n        >\n          <i className=\"now-ui-icons users_single-02\"></i>\n        </Button>\n        <Link\n          className=\"btn btn-sm mr-1 btn-warning btn-icon btn-round\"\n          to={`${match.path}/edit-test-group/${testGroup.id}`}\n        >\n          <i className=\"now-ui-icons ui-2_settings-90\"></i>\n        </Link>\n        <Button\n          className=\"btn-icon btn-round\"\n          color=\"danger\"\n          size=\"sm\"\n          type=\"button\"\n          // onClick={async () => {\n          //   await removeTestCategoryMutation({\n          //     variables: {\n          //       id: testCategory.id,\n          //     },\n          //   });\n          // }}\n        >\n          <i className=\"now-ui-icons ui-1_simple-remove\"></i>\n        </Button>\n      </td>\n    </tr>\n  );\n};\n\nexport default ListTestGroup;\n","/*!\n\n=========================================================\n* Now UI Dashboard React - v1.4.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/now-ui-dashboard-react\n* Copyright 2020 Creative Tim (https://www.creative-tim.com)\n* Licensed under MIT (https://github.com/creativetimofficial/now-ui-dashboard-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\nimport Dashboard from \"./views/Dashboard.js\";\n// import Notifications from \"./views/Notifications.js\";\nimport ToeicAdmin from \"./views/Toeic\";\nimport BlogAdmin from \"./views/Blog\";\n// import Typography from \"./views/Typography.js\";\n// import TableList from \"./views/TableList.js\";\n// import Maps from \"./views/Maps.js\";\nimport TestGroup from \"./views/TestGroup\";\nimport UserPage from \"./views/UserPage.js\";\n\nvar dashRoutes = [\n  {\n    path: \"/dashboard\",\n    name: \"Dashboard\",\n    icon: \"design_app\",\n    component: Dashboard,\n    layout: \"/admin\",\n  },\n  {\n    path: \"/test-group\",\n    name: \"Test Group\",\n    icon: \"location_map-big\",\n    component: TestGroup,\n    layout: \"/admin\",\n  },\n  {\n    path: \"/blog\",\n    name: \"Blog\",\n    icon: \"design_image\",\n    component: BlogAdmin,\n    layout: \"/admin\",\n  },\n  {\n    path: \"/toeic\",\n    name: \"Toeic\",\n    icon: \"design_image\",\n    component: ToeicAdmin,\n    layout: \"/admin\",\n    isTest: true,\n  },\n  {\n    path: \"/ielts\",\n    name: \"Ielts\",\n    icon: \"design_image\",\n    component: ToeicAdmin,\n    layout: \"/admin\",\n    isTest: true,\n  },\n\n  // {\n  //   path: \"/notifications\",\n  //   name: \"Notifications\",\n  //   icon: \"ui-1_bell-53\",\n  //   component: Notifications,\n  //   layout: \"/admin\",\n  // },\n  {\n    path: \"/user-page\",\n    name: \"User Profile\",\n    icon: \"users_single-02\",\n    component: UserPage,\n    layout: \"/admin\",\n  },\n  // {\n  //   path: \"/extended-tables\",\n  //   name: \"Table List\",\n  //   icon: \"files_paper\",\n  //   component: TableList,\n  //   layout: \"/admin\",\n  // },\n  // {\n  //   path: \"/typography\",\n  //   name: \"Typography\",\n  //   icon: \"design-2_ruler-pencil\",\n  //   component: Typography,\n  //   layout: \"/admin\",\n  // },\n  // {\n  //   pro: true,\n  //   path: \"/upgrade\",\n  //   name: \"Upgrade to PRO\",\n  //   icon: \"objects_spaceship\",\n  //   component: Upgrade,\n  //   layout: \"/admin\",\n  // },\n];\nexport default dashRoutes;\n","import React from \"react\";\nimport PanelHeader from \"../../components/PanelHeader\";\nimport { Switch, Route, useRouteMatch } from \"react-router-dom\";\nimport CreateAndEditTestGroup from \"./CreateAndEditTestGroup\";\nimport {\n  OrderDirection,\n  useGetTestGroupsInfoQuery,\n} from \"../../../../schema/schema\";\nimport ListTestGroup from \"./ListTestGroup\";\nconst TestGroup: React.FC<{}> = () => {\n  const match = useRouteMatch();\n  const variables = {\n    data: {\n      orderDirection: OrderDirection.Asc,\n    },\n  };\n  const { data, loading, refetch } = useGetTestGroupsInfoQuery({\n    variables,\n  });\n  const testsGroupData = data?.getTestGroups.testGroups;\n  React.useMemo(() => {\n    refetch();\n  }, [refetch]);\n\n\n  return (\n    <>\n      <PanelHeader>\n        <div className=\"header text-center\">\n          <h2 className=\"title\">Test Group</h2>\n          <p className=\"category\">Management Test Group</p>\n        </div>\n      </PanelHeader>\n      <div className=\"content\">\n        <Switch>\n          <Route\n            path={[\n              `${match.path}/create-test-group`,\n              `${match.path}/edit-test-group/:testGroupId`,\n            ]}\n          >\n            <CreateAndEditTestGroup testsGroupData={testsGroupData}/>\n          </Route>\n          <Route path={`${match.path}`}>\n            <ListTestGroup testsGroupData={testsGroupData} loading={loading} />\n          </Route>\n        </Switch>\n      </div>\n    </>\n  );\n};\n\nexport default TestGroup;\n","/*!\n\n=========================================================\n* Now UI Dashboard React - v1.4.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/now-ui-dashboard-react\n* Copyright 2020 Creative Tim (https://www.creative-tim.com)\n* Licensed under MIT (https://github.com/creativetimofficial/now-ui-dashboard-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\nimport React from \"react\";\n\n// reactstrap components\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardBody,\n  FormGroup,\n  Form,\n  Input,\n  Row,\n  Col,\n} from \"reactstrap\";\n\n// core components\n\nclass User extends React.Component {\n  render() {\n    return (\n      <>\n        {/* <PanelHeader /> */}\n        <div className=\"content\">\n          <Row>\n            <Col md=\"8\">\n              <Card>\n                <CardHeader>\n                  <h5 className=\"title\">Edit Profile</h5>\n                </CardHeader>\n                <CardBody>\n                  <Form>\n                    <Row>\n                      <Col className=\"pr-1\" md=\"5\">\n                        <FormGroup>\n                          <label>Company (disabled)</label>\n                          <Input\n                            defaultValue=\"Creative Code Inc.\"\n                            disabled\n                            placeholder=\"Company\"\n                            type=\"text\"\n                          />\n                        </FormGroup>\n                      </Col>\n                      <Col className=\"px-1\" md=\"3\">\n                        <FormGroup>\n                          <label>Username</label>\n                          <Input\n                            defaultValue=\"michael23\"\n                            placeholder=\"Username\"\n                            type=\"text\"\n                          />\n                        </FormGroup>\n                      </Col>\n                      <Col className=\"pl-1\" md=\"4\">\n                        <FormGroup>\n                          <label htmlFor=\"exampleInputEmail1\">\n                            Email address\n                          </label>\n                          <Input placeholder=\"Email\" type=\"email\" />\n                        </FormGroup>\n                      </Col>\n                    </Row>\n                    <Row>\n                      <Col className=\"pr-1\" md=\"6\">\n                        <FormGroup>\n                          <label>First Name</label>\n                          <Input\n                            defaultValue=\"Mike\"\n                            placeholder=\"Company\"\n                            type=\"text\"\n                          />\n                        </FormGroup>\n                      </Col>\n                      <Col className=\"pl-1\" md=\"6\">\n                        <FormGroup>\n                          <label>Last Name</label>\n                          <Input\n                            defaultValue=\"Andrew\"\n                            placeholder=\"Last Name\"\n                            type=\"text\"\n                          />\n                        </FormGroup>\n                      </Col>\n                    </Row>\n                    <Row>\n                      <Col md=\"12\">\n                        <FormGroup>\n                          <label>Address</label>\n                          <Input\n                            defaultValue=\"Bld Mihail Kogalniceanu, nr. 8 Bl 1, Sc 1, Ap 09\"\n                            placeholder=\"Home Address\"\n                            type=\"text\"\n                          />\n                        </FormGroup>\n                      </Col>\n                    </Row>\n                    <Row>\n                      <Col className=\"pr-1\" md=\"4\">\n                        <FormGroup>\n                          <label>City</label>\n                          <Input\n                            defaultValue=\"Mike\"\n                            placeholder=\"City\"\n                            type=\"text\"\n                          />\n                        </FormGroup>\n                      </Col>\n                      <Col className=\"px-1\" md=\"4\">\n                        <FormGroup>\n                          <label>Country</label>\n                          <Input\n                            defaultValue=\"Andrew\"\n                            placeholder=\"Country\"\n                            type=\"text\"\n                          />\n                        </FormGroup>\n                      </Col>\n                      <Col className=\"pl-1\" md=\"4\">\n                        <FormGroup>\n                          <label>Postal Code</label>\n                          <Input placeholder=\"ZIP Code\" type=\"number\" />\n                        </FormGroup>\n                      </Col>\n                    </Row>\n                    <Row>\n                      <Col md=\"12\">\n                        <FormGroup>\n                          <label>About Me</label>\n                          <Input\n                            cols=\"80\"\n                            defaultValue=\"Lamborghini Mercy, Your chick she so thirsty, I'm in\n                            that two seat Lambo.\"\n                            placeholder=\"Here can be your description\"\n                            rows=\"4\"\n                            type=\"textarea\"\n                          />\n                        </FormGroup>\n                      </Col>\n                    </Row>\n                  </Form>\n                </CardBody>\n              </Card>\n            </Col>\n            <Col md=\"4\">\n              <Card className=\"card-user\">\n                <div className=\"image\">\n                  <img alt=\"...\" src={require(\"../assets/img/bg5.jpg\")} />\n                </div>\n                <CardBody>\n                  <div className=\"author\">\n                    <a href=\"#pablo\" onClick={(e) => e.preventDefault()}>\n                      <img\n                        alt=\"...\"\n                        className=\"avatar border-gray\"\n                        src={require(\"../assets/img/mike.jpg\")}\n                      />\n                      <h5 className=\"title\">Mike Andrew</h5>\n                    </a>\n                    <p className=\"description\">michael24</p>\n                  </div>\n                  <p className=\"description text-center\">\n                    \"Lamborghini Mercy <br />\n                    Your chick she so thirsty <br />\n                    I'm in that two seat Lambo\"\n                  </p>\n                </CardBody>\n                <hr />\n                <div className=\"button-container\">\n                  <Button\n                    className=\"btn-neutral btn-icon btn-round\"\n                    color=\"default\"\n                    href=\"#pablo\"\n                    onClick={(e) => e.preventDefault()}\n                    size=\"lg\"\n                  >\n                    <i className=\"fab fa-facebook-f\" />\n                  </Button>\n                  <Button\n                    className=\"btn-neutral btn-icon btn-round\"\n                    color=\"default\"\n                    href=\"#pablo\"\n                    onClick={(e) => e.preventDefault()}\n                    size=\"lg\"\n                  >\n                    <i className=\"fab fa-twitter\" />\n                  </Button>\n                  <Button\n                    className=\"btn-neutral btn-icon btn-round\"\n                    color=\"default\"\n                    href=\"#pablo\"\n                    onClick={(e) => e.preventDefault()}\n                    size=\"lg\"\n                  >\n                    <i className=\"fab fa-google-plus-g\" />\n                  </Button>\n                </div>\n              </Card>\n            </Col>\n          </Row>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default User;\n","import React from \"react\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\n\n// core components\nimport HeaderAdmin from \"../components/Navbars/HeaderAdmin\";\nimport Footer from \"../components/Footer/FooterAdmin\";\nimport Sidebar from \"../components/Sidebar/Sidebar\";\nimport FixedPlugin from \"../components/FixedPlugin/FixedPlugin.js\";\nimport routes from \"../routes.js\";\nimport { MeContext, notMe } from \"../../../hooks/useMe\";\nimport { useMeQuery } from \"../../../schema/schema\";\n\ninterface DashboardAdminProps {}\n\nconst DashboardAdmin: React.FC<DashboardAdminProps> = () => {\n  const mainPanel = React.useRef<HTMLDivElement>(null);\n  const [backgroundColor, setBackgroundColor] = React.useState(\"brand\");\n  const handleColorClick = (color: any) => {\n    setBackgroundColor(color);\n  };\n  const meQuery = useMeQuery();\n  let me = meQuery.data?.me;\n  if (!me) {\n    me = notMe;\n  }\n\n  return (\n    <MeContext.Provider value={me}>\n      <div className=\"wrapper admin-page\">\n        <Sidebar routes={routes} backgroundColor={backgroundColor} />\n        <div className=\"flex-column d-flex main-panel\" ref={mainPanel}>\n          <HeaderAdmin />\n          <Switch>\n            {routes.map((prop, key) => {\n              if(prop.isTest){\n                return (\n                  <Route\n                    path={prop.layout + '/:type'}\n                    component={prop.component}\n                    key={key}\n                  />\n                );\n              }\n              return (\n                <Route\n                  path={prop.layout + prop.path}\n                  component={prop.component}\n                  key={key}\n                />\n              );\n            })}\n            <Redirect from=\"/admin\" to=\"/admin/dashboard\" />\n          </Switch>\n          <Footer className=\"mt-auto\" fluid />\n        </div>\n        <FixedPlugin\n          bgColor={backgroundColor}\n          handleColorClick={(e: any) => {\n            handleColorClick(e.value);\n          }}\n        />\n      </div>\n    </MeContext.Provider>\n  );\n};\n\nexport default DashboardAdmin;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink\n} from \"@apollo/client\";\nimport { Switch, Route, BrowserRouter as Router, Redirect } from \"react-router-dom\";\nimport config from \"./config\";\n// styles for this kit\nimport \"./assets/css/bootstrap.min.css\";\nimport \"./assets/scss/now-ui-kit.scss?v=1.4.0\";\nimport \"./assets/demo/demo.css?v=1.4.0\";\nimport \"./assets/demo/nucleo-icons-page-styles.css?v=1.4.0\";\nimport \"react-notifications-component/dist/theme.css\";\n// pages for this kit\nimport ReactNotification from \"react-notifications-component\";\nimport { setContext } from '@apollo/client/link/context';\n// import dashRoutes from \"./router\";\nimport Index from \"./views/Index\";\nimport DashboardAdmin from \"./views/admin/layouts/Admin\";\nconst httpLink = createHttpLink({\n  uri: config.GRAPHQL_SERVER_URL,\n  fetch,\n  fetchOptions: {\n    credentials: \"include\",\n  }\n});\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const powper = JSON.parse(localStorage.getItem('powper') ?? '{}');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: powper?.tokens?.accessToken ? `${powper.tokens.accessToken}` : \"\",\n    }\n  }\n});\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <ReactNotification />\n        <Switch>\n          <Route path={'/admin'}>\n            <DashboardAdmin />\n          </Route>\n          <Route path={['/home']}>\n            <Index />\n          </Route>\n          <Redirect to='/home/' />\n          <Redirect from='/' to='/home' />\n        </Switch>\n      </Router>\n    </ApolloProvider>\n  );\n}\nrender(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister(); // for production\n\n// serviceWorker.register(); // for local\n"],"sourceRoot":""}