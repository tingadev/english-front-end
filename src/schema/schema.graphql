type Query {
  user(id: String!): User!
  users: [User!]!
  isEmailAlreadyExist(email: String!): Boolean!
  part(id: String!): Part!
  getParts(data: PartFilterInput!): Parts!
  getPartsFromIds(data: PartIdsInput!): [Part!]!
  question(id: String!): Question!
  questions(questionFilterType: QuestionFilterTypeInput!): Questions!
  test(id: String!): Test!
  getTests(data: TestFilterInput!): Tests!
  getTestCategory(id: String!): TestCategory!
  getTestCategories(data: TestCategoryFilterInput!): TestCategories!
  getTestQuestions(testId: String!): [TestQuestion!]!
  getTestGroup(id: String!): TestGroup!
  getTestGroups(data: TestGroupFilterInput!): TestGroups!
  me: Me
}

type User {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  profileMediaUrl: String
  email: String!
  firstName: String!
  lastName: String
  address: String
  level: String
  role: String!

  """First + Last name"""
  name: String!
  phone: String
  socialLinks: SocialLink
  password: String
  isVerified: Boolean
  version: Float!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type SocialLink {
  facebook: String
  twitter: String
  linkedin: String
}

type Part {
  id: String!
  partName: String!
  description: String!
  skillType: SkillsType!
  certificateType: EnglishCertificateType!
  testQuestion: TestQuestion
  test: Test
  displayOrder: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  deleteAt: DateTime
}

enum SkillsType {
  Reading
  Listening
}

enum EnglishCertificateType {
  Toeic
  IELTS
  Custom
  Blog
}

type TestQuestion {
  id: String!
  test: Test!
  question: Question!
  part: Part!
  displayOrder: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  deleteAt: DateTime
}

type Test {
  id: String!
  testName: String!
  description: String!
  audioUrl: String!
  explaination: String!
  skillType: SkillsType!
  certificateType: EnglishCertificateType!
  partAndAudioSecs: [PartAndAudioSeconds!]
  testQuestions: [TestQuestion!]
  part: Part
  testCategory: TestCategory
  isPublished: Boolean!
  displayOrder: Float!
  displayOrderCategory: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  deleteAt: DateTime
}

type PartAndAudioSeconds {
  partId: String
  autdioSecs: Float
  displayOrder: Float
}

type TestCategory {
  id: String!
  testCategoryName: String!
  certificateType: EnglishCertificateType!
  tests: [Test!]
  testGroup: TestGroup
  isPublished: Boolean!
  displayOrder: Float!
  displayOrderGroup: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  deleteAt: DateTime
}

type TestGroup {
  id: String!
  testGroupName: String!
  link: String!
  parentId: String
  certificateType: EnglishCertificateType!
  testCategories: [TestCategory!]
  isPublished: Boolean!
  displayOrder: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  deleteAt: DateTime
}

type Question {
  id: String!
  questionName: String!
  audioSec: Float!
  audioSecVN: Float!
  questionType: QuestionType!
  description: String
  content: String
  explaination: String
  quickExplaination: String
  image: String
  answers: [Answers!]!
  testQuestion: TestQuestion
  skillType: SkillsType!
  certificateType: EnglishCertificateType!
  result: String!
  isGroup: Boolean!
  questionGroupOrder: Float!
  questionGroup: Question!
  questionGroups: [Question!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  deleteAt: DateTime
}

enum QuestionType {
  SingleChoice
  MultiChoice
  FillBlank
}

type Answers {
  keyAnswer: String
  answerContent: String
}

type Parts {
  parts: [Part!]!
  total: Float!
  nextCursor: String
}

input PartFilterInput {
  skillType: SkillsType
  certificateType: EnglishCertificateType
  orderDirection: OrderDirection
  cursor: String
  partIds: PartIdsInput
}

"""Query Order Direction"""
enum OrderDirection {
  Asc
  Desc
}

input PartIdsInput {
  ids: [String!]!
}

type Questions {
  questions: [Question!]!
  total: Float!
  nextCursor: String
}

input QuestionFilterTypeInput {
  skillType: SkillsType
  certificateType: EnglishCertificateType!
  orderDirection: OrderDirection
  cursor: String
  testId: String
  title: String
}

type Tests {
  tests: [Test!]!
  total: Float!
  nextCursor: String
}

input TestFilterInput {
  skillType: SkillsType
  certificateType: EnglishCertificateType
  orderDirection: OrderDirection
  cursor: String
  testIds: TestIdsInput
}

input TestIdsInput {
  ids: [String!]!
}

type TestCategories {
  testCategories: [TestCategory!]!
  total: Float!
  nextCursor: String
}

input TestCategoryFilterInput {
  certificateType: EnglishCertificateType
  orderDirection: OrderDirection
  cursor: String
  testCategoryIds: TestCategoryIdsInput
}

input TestCategoryIdsInput {
  ids: [String!]!
}

type TestGroups {
  testGroups: [TestGroup!]!
  total: Float!
  nextCursor: String
}

input TestGroupFilterInput {
  orderDirection: OrderDirection
  certificateType: EnglishCertificateType
  cursor: String
  testGroupIds: TestGroupIdsInput
}

input TestGroupIdsInput {
  ids: [String!]!
}

type Me {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  profileMediaUrl: String
  email: String!
  firstName: String!
  lastName: String
  address: String
  level: String
  role: String!

  """First + Last name"""
  name: String!
  phone: String
  socialLinks: SocialLink
  password: String
  isVerified: Boolean
  version: Float!
  impersonatingUser: ImpersonatingUser
}

type ImpersonatingUser {
  userId: String!
  tokens: AccessTokens!
}

type AccessTokens {
  refreshToken: String!
  accessToken: String!
}

type Mutation {
  createUser(data: NewUserInput!): User!
  createPart(data: NewPartInput!): Part!
  updatePart(data: NewPartInput!): Part!
  removePart(id: String!): String!
  createQuestion(data: NewQuestionInput!): Question!
  updateQuestion(data: NewQuestionInput!): Question!
  removeQuestion(id: String!): String!
  createTest(data: NewTestInput!): Test!
  updateTest(data: NewTestInput!): Test!
  updateTests(data: TestsUpdateInput!): [Test!]!
  removeFromCat(id: String!): Test!
  removeTest(id: String!): String!
  createTestCategory(data: NewTestCategoryInput!): TestCategory!
  updateTestCategory(data: NewTestCategoryInput!): TestCategory!
  removeTestCategory(id: String!): String!
  uploadMedia(data: AssetInput!): Asset!
  createTestQuestion(data: TestQuestionInputId!): TestQuestion!
  createListTestQuestions(data: TestQuestionInputIds!): [TestQuestion!]!
  removeTestQuestion(id: String!): String!
  updateTestQuestion(data: TestQuestionInputId!): TestQuestion!
  createTestGroup(data: NewTestGroupInput!): TestGroup!
  updateTestGroup(data: NewTestGroupInput!): TestGroup!
  removeTestGroup(id: String!): String!
  login(password: String!, email: String!): Me!
  logout: Boolean!
  changePassword(data: ChangePasswordInput!): Me!
  updateMe(data: UpdateMeInput!): Me!
}

input NewUserInput {
  profileMediaUrl: String
  firstName: String!
  lastName: String!
  email: String!
  phone: String
  socialLinks: SocialLinkInput
  address: String
  password: String
  role: UserRole!
}

input SocialLinkInput {
  facebook: String
  twitter: String
  linkedin: String
}

"""User Authorization Roles"""
enum UserRole {
  Member
  Ops
  Admin
}

input NewPartInput {
  id: String
  partName: String!
  skillType: SkillsType!
  description: String!
  certificateType: EnglishCertificateType!
  displayOrder: Float
}

input NewQuestionInput {
  id: String
  questionName: String!
  audioSec: Float!
  audioSecVN: Float!
  questionType: QuestionType!
  content: String
  description: String
  quickExplaination: String
  explaination: String
  image: String
  skillType: SkillsType!
  certificateType: EnglishCertificateType!
  answers: [AnswersInput!]!
  result: String!
  partId: String
  testId: String
  answersGroup: [AnswersGroupInput!]
}

input AnswersInput {
  keyAnswer: String
  answerContent: String
}

input AnswersGroupInput {
  id: String
  order: Float
  description: String
  explaination: String
  result: String
  answers: [AnswersInput!]
  questionName: String
  isNew: Boolean
}

input NewTestInput {
  id: String
  testCategoryId: String
  testName: String
  skillType: SkillsType
  description: String
  explaination: String
  certificateType: EnglishCertificateType
  isPublished: Boolean
  partAndAudioSecs: [AudioSecondsInput!]
  testQuestionInputIds: TestQuestionInputIds
  audioUrl: String
  displayOrder: Float
  displayOrderCategory: Float
}

input AudioSecondsInput {
  partId: String
  autdioSecs: Float
  displayOrder: Float
}

input TestQuestionInputIds {
  testId: String
  partIdAndQuestionIdsInput: [PartIdAndQuestionIdsInput!]!
}

input PartIdAndQuestionIdsInput {
  partId: String
  questionIds: [String!]!
}

input TestsUpdateInput {
  testIds: TestIdsInput!
  testCategoryId: String!
}

input NewTestCategoryInput {
  id: String
  testGroupId: String
  testCategoryName: String!
  certificateType: EnglishCertificateType
  isPublished: Boolean
  displayOrder: Float
  displayOrderGroup: Float
}

type Asset {
  url: String!
  name: String!
  path: String!
  type: String!
  createdAt: DateTime!
}

input AssetInput {
  name: String!
  type: String!
  typeFolder: MediaType!
}

enum MediaType {
  Image
  Audio
  Video
}

input TestQuestionInputId {
  id: String
  testId: String
  partId: String
  questionId: String
  displayOrder: Float
}

input NewTestGroupInput {
  id: String
  testGroupName: String
  parentId: String
  isPublished: Boolean
  displayOrder: Float
  link: String
  certificateType: EnglishCertificateType
}

"""Change password"""
input ChangePasswordInput {
  token: String!
  email: String!
  password: String!
}

"""Update me"""
input UpdateMeInput {
  profileMediaUrl: String
  firstName: String!
  lastName: String!
  email: String
  phone: String
  socialLinks: SocialLinkInput
  address: String
  id: String!
  password: String
}
